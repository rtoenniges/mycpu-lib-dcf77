                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                ;~~  [MyCA] Macro Cross Assembler V1.10 for MyCPU, (c) 2023 by Dennis Kuschel  ~~
                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                ;[File: sl60dcf77.asm]
                ;[ASCII]
                ;******************************************
                ;***********  DCF77 Library  **************
                ;******************************************
                ;***** by Robin Toenniges (2016-2024) *****
                ;******************************************
                
                ;[File: C:\Program Files (x86)\myca\include\conio.hsm]
                ;[ASCII]
                
                ;-- functions --
                KERN_KBHIT          EQU 023Ah
                KERN_GETCH          EQU 023Ch
                KERN_UNGETCH        EQU 023Eh
                KERN_TESTCTRLC      EQU 0240h
                KERN_PRINTCHAR      EQU 0242h
                KERN_PRINTSTR       EQU 0244h
                KERN_PRINTSTRR      EQU 0246h
                KERN_GETCRSRPOS     EQU 0248h
                KERN_GETSCREENSIZE  EQU 024Ah
                KERN_GETFREELINES   EQU 024Ch
                KERN_INPUT          EQU 0258h
                KERN_PRINTHEX       EQU 025Eh
                KERN_PRINTDEZ       EQU 0260h
                KERN_SETCONSOLE     EQU 022Ch
                KERN_GSTERMINAL     EQU 02A0h
                KERN_QUOTEMODE      EQU 02E6h
                KERN_GSSTDOUTVECT   EQU 02D4h
                KERN_SETINPSPVECT   EQU 025Ah
                KERN_SETINPUTMODE   EQU 025Ch
                
                ;-- flag definitions --
                CON_DISP_LCD        SET 01h
                CON_DISP_SCREEN     SET 02h
                CON_DISP_TTY        SET 03h
                CON_DISP_TTYSCR     SET 04h
                CON_DISP_NONE       SET 0Fh
                CON_KEYB_KEYB       SET 10h
                CON_KEYB_TTY        SET 20h
                CON_KEYB_NONE       SET 0F0h
                INPMODE_BASIC       SET 0
                INPMODE_BASICRUN    SET 1
                INPMODE_KERNALSHELL SET 2
                INPUTFLAG_HISTORY   SET 01h
                INPUTFLAG_SIZE      SET 02h
                INPUTFLAG_QUOTE     SET 04h
                INPUTFLAG_LINE80    SET 08h
                INPUTFLAG_TABKEY    SET 10h
                INPUTFLAG_NOBORDER  SET 20h
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\sys.hsm]
                ;[ASCII]
                
                KERN_WARMSTART      EQU 0220h
                KERN_FILEINPUT      EQU 027Ah
                KERN_GETINFO        EQU 02A2h
                KERN_REGFILEDEVICE  EQU 0264h
                KERN_FSREGISTER     EQU 02AEh
                KERN_FSUNREGISTER   EQU 02B0h
                KERN_GETCHECKSUM16  EQU 02B2h
                KERN_SETMEMBORDERS  EQU 029Eh
                KERN_SETIDLEFUNC    EQU 02EAh
                KERN_IDLE           EQU 02ECh
                KERN_TESTVERSION    EQU 030Ch
                KERN_CONFIGBYTE     EQU 030Ah
                KERN_IDEDRIVER      EQU 030Eh
                KERN_MULTIPLEX      EQU 0312h
                KERN_PRGMOVE        EQU 032Ah
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\code.hsm]
                ;[ASCII]
                
                KERN_ADAPTOPCODES   EQU 02C4h
                KERN_EXECUTEFILE    EQU 02BEh
                KERN_EXITTSR        EQU 02C2h
                KERN_KILLPROGRAM    EQU 02C0h
                KERN_KILLPROGEX     EQU 0328h
                KERN_SPECROMCALL    EQU 02B6h
                KERN_CALLFROMROM    EQU 02B8h
                KERN_CALLROM        EQU 02BAh
                KERN_LIBCALL        EQU 02CAh
                KERN_LIBSELECT      EQU 02CCh
                KERN_LIBDESELECT    EQU 02CEh
                KERN_LIBUNLOAD      EQU 02D0h
                KERN_ISLOADED       EQU 02D2h
                KERN_ASSERT         EQU 0326h
                
                REG_ROMPAGE  SET 3900h
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\interrupt.hsm]
                ;[ASCII]
                
                KERN_IC_ENABLEINT   EQU 0222h
                KERN_IC_DISABLEINT  EQU 0224h
                KERN_IC_GETVECTOR   EQU 0226h
                KERN_IC_SETVECTOR   EQU 0228h
                KERN_IC_REGISTERBH  EQU 022Ah
                KERN_SPINLOCK       EQU 02A8h
                KERN_INTVECT        EQU 0332h
                
                KERN_INSDELTIMER    EQU 02AAh
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\time.hsm]
                ;[ASCII]
                
                KERN_GETSETTIME     EQU 029Ah
                KERN_GETSETDATE     EQU 029Ch
                
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\mem.hsm]
                ;[ASCII]
                
                KERN_MALLOCFREE     EQU 02C8h
                KERN_ALLOCFREERAMP  EQU 02ACh
                KERN_ALLOCDBUF      EQU 031Ah
                KERN_FREEDBUF       EQU 031Ch
                KERN_ALLOCFREEZSP   EQU 02F4h
                
                REG_RAMPAGE         SET 3800h
                ADR_RAMPAGE_START   SET 4000h
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\registers.hsm]
                ;[ASCII]
                
                IOSPACE1   SET 2000h  ;2000 - 27FFh
                IOSPACE2   SET 2800h  ;2800 - 2FFFh
                
                EMULATORTAGADDR    SET 3FF5h
                INTCONTROLLER      SET IOSPACE1+0100h
                REG_IC_IEMASK      SET INTCONTROLLER 
                REG_IC_INT         SET INTCONTROLLER+1
                KEYBOARDCONTROLLER SET IOSPACE1+0200h
                KEYBOARDIRQ        SET 1
                PRINTERPORT        SET IOSPACE1+0380h
                PRINTERDATA        SET PRINTERPORT
                PRINTERCONTROL     SET PRINTERPORT+1
                PRINTERSTATUS      SET PRINTERPORT+1
                RS232BASE          SET IOSPACE1+0300h
                RS232DIF           SET 8
                RS232PORT1         SET RS232BASE
                RS232PORT2         SET RS232BASE+RS232DIF
                RS232P1IRQ         SET 2
                RS232P2IRQ         SET 3
                RS_DATA            SET 0
                LCDBASE            SET IOSPACE1+0280h
                REG_SDRV_BLOCKL    SET 1100h
                REG_SDRV_BLOCKH    SET 1120h
                REG_SDRV_MAGIC     SET 1140h
                REG_SDRV_STATUS    SET 1100h
                REG_SDRV_DATA      SET 1000h
                REG_RTC_ADR        SET 11C0h
                REG_RTC_DIN        SET 1180h
                REG_RTC_DOUT       SET 1180h
                SCREENIOBASE       SET 1400h
                SCREEN_DATA        SET SCREENIOBASE
                SCREEN_COLOR       SET SCREENIOBASE+0100h
                REG_SCR_FIRSTLINE  SET SCREENIOBASE+0200h
                REG_SCR_RAMBLOCK   SET SCREENIOBASE+0280h
                REG_SCR_GFXCOLOR   SET SCREENIOBASE+0300h
                REG_SCR_FLAGS      SET SCREENIOBASE+0380h
                
                REG_ZEROPAGE       SET 3A00h
                REG_STACKPAGE      SET 3B00h
                
                RAMPAGE_BASIC      SET 0
                RAMPAGE_OS         SET 1
                ROMPAGE_RAM0       SET 080h
                ROMPAGE_ROM0       SET 000h
                
                ;[File: sl60dcf77.asm]
                ;Comment this line out if you dont want synced status on Multi-I/O-LEDs
                ;Comment this line in if you use the SCC-Rack-Extension
                ;#DEFINE SCC_BOARD 
                ;Comment this line in if library should load on higher ROM-Page
                ;Comment this line in if you want debug output
                ;#DEFINE DEBUG
                
                ;Debug Message
                ;Second[MeteoCount1|MeteoCount2]: BitLevel(PulseTime) {Additional comments}
                ;Example: 28[28|49]: H(6) Minute: 32
                
                ORG 8000h
    8000 0280    DW 8002h
    8002 F880    DW initfunc
    8004 4F81    DW termfunc
    8006 F880    DW codestart
                ;-------------------------------------;
                ; declare variables
                
                ;Addresses
                HDW_INT             EQU 7       ;IRQ7
                
                
                KERN_IOCHANGELED    EQU 0306h   ;Kernel routine for changing the Multi-I/O-LEDs
                
                ;Decoding parameter
                ;Low        = 100ms         is theoretically 3
                ;High       = 200ms         is theoretically 6
                ;Syncpause  = 1800-1900ms   is theoretically 54-57
                ;New second = 800-900ms     is theoretically 24-27
                PARAM_LOWHIGH       SET 5       ;Edge time < PARAM_LOWHIGH      = 0(Low),           >= PARAM_LOWHIGH    = 1(High)
                PARAM_SYNCPAUSE     SET 50      ;Edge time < PARAM_SYNCPAUSE    = New second/bit,   >= PARAM_SYNCPAUSE  = Syncpoint
                PARAM_SECOND        SET 20      ;Edge time < PARAM_SECOND       = New bit,          >= PARAM_SECOND     = New second
                PARAM_IGNORE        SET 2       ;Edge time < PARAM_IGNORE       = Signal interference (ignore)
                
                ;Variables
    8008 01     FLG_firstStart      DB  1   ;This flag indicates first start of library -> Ignore first edge
    8009 0000   FLG_dcfReceiver     DW  0   ;This flag is set to 1 if new input (rising edge) comes from the DCF77-Receiver
                                            ;FLG_dcfReceiver+1 is set to 1 if bit is ready for decoding
    800B 00     VAR_bitCount        DB  0   ;Timer Interrupt Counter
    800C 0000   VAR_bitCache        DW  0   ;Byte 0 = time value, Byte 1 = temp value
    800E 00     VAR_edgeCnt         DB  0   ;Edge counter
                
    800F 00     VAR_dateParity      DB  0
                
                ;VAR_pSecond         DB  0   ;Pseudo second to bridge desynchronization
                
                ;Time variables initialized with FFh to "lock" Get-functions until 2nd synchronization point reached
                START_DATA_STRUCT
    8010 01     FLG_synced          DB  1   ;00h | Sync flag -> 0 if synchron with dcf77
    8011 00     VAR_dataOK          DB  0   ;01h | Parity check -> Bit 0 = Minutes OK, Bit 1 = Hours OK, Bit 2 = Date OK, Bit 3 = Meteo OK
    8012 00     VAR_bitData         DB  0   ;02h | Bit data '0->00h' or '1->80h' of current second
                
    8013 FF     VAR_second          DB  0FFh ;03h | DCF77-Second/Bit counter
    8014 FF     VAR_minutes         DB  0FFh ;04h
    8015 FF     VAR_hours           DB  0FFh ;05h
                
    8016 FF     VAR_day             DB  0FFh ;06h
    8017 FF     VAR_weekday         DB  0FFh ;07h
    8018 FF     VAR_month           DB  0FFh ;08h
    8019 FF     VAR_year            DB  0FFh ;09h                          
                END_DATA_STRUCT ; + Meteo data -> 0Ah - 5Dh 
                
                PAR_DATA_SIZE       EQU END_DATA_STRUCT - START_DATA_STRUCT + 83
                
                ;2x 82 Bit + 0
    801A 000000 VAR_meteo1          DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ;Weather bits n
    801D 000000 
    8020 000000 
    8023 000000 
    8026 0000   
    8028 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ;Weather bits n+1
    802B 000000 
    802E 000000 
    8031 000000 
    8034 0000   
                                        ;******* Minute *******|********* Hour *********|********* Day **********|**** Month ****|*** WD **|******** Year *********|
    8036 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0
    8039 000000 
    803C 000000 
    803F 000000 
    8042 000000 
    8045 000000 
    8048 000000 
    804B 000000 
    804E 000000 
    8051 000000 
    8054 000000 
    8057 000000 
    805A 000000 
    805D 00     
    805E 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ;Weather bits n+2
    8061 000000 
    8064 000000 
    8067 000000 
    806A 000000 
                
    806D 000000 VAR_meteo2          DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    8070 000000 
    8073 000000 
    8076 000000 
    8079 0000   
    807B 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    807E 000000 
    8081 000000 
    8084 000000 
    8087 0000   
    8089 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0
    808C 000000 
    808F 000000 
    8092 000000 
    8095 000000 
    8098 000000 
    809B 000000 
    809E 000000 
    80A1 000000 
    80A4 000000 
    80A7 000000 
    80AA 000000 
    80AD 000000 
    80B0 00     
    80B1 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    80B4 000000 
    80B7 000000 
    80BA 000000 
    80BD 000000 
                
                ;TODO: Zeropages reduzieren (Evtl. nur einer?!) -> Pointer zuerst in normalen Variablen speichern 
                VAR_meteoWritePTR   DS  2
                VAR_meteoReadPTR    DS  2
                VAR_dataStructPTR   DS  2
                
                ZP_meteoRW          EQU 10h ;Write pointer for meteo data
                ZP_dataStructPTR    EQU 12h ;Pointer for Data struct
    80C6 00     VAR_meteoCount1     DB  0 ;Weather bit counter (0-41)
    80C7 00     VAR_meteoCount2     DB  0 ;Time bit counter (42-81)
                
    80C8 00     VAR_tmpMinutes      DB  0
    80C9 00     VAR_tmpHours        DB  0
    80CA 00     VAR_tmpDay          DB  0
    80CB 00     VAR_tmpWeekday      DB  0
    80CC 00     VAR_tmpMonth        DB  0
    80CD 00     VAR_tmpYear         DB  0
    80CE 00     VAR_ledsDataOK      DB  0
                
    80CF 00     VAR_timerhandle     DB  0   ;Address of timer interrupt handle
                
                PAR_HDLMax          SET 6 ;Maximum number of App-Handler
                VAR_tabHANDLER      DS  2*PAR_HDLMax  ;Address register for handlers
                VAR_tabHDLROMPAGE   DS  PAR_HDLMax ;ROM-Pages from registered handlers
                
    80E2 00     VAR_HDLCount        DB  0 ;Number of registered handlers
    80E3 000000 VAR_HDLbitmaskREG   DB  0,0,0,0,0,0 ;Bitmask of registered handlers
    80E6 000000 
    80E9 000000 VAR_HDLbitmaskEN    DB  0,0,0,0,0,0 ;Bitmask of enabled handlers
    80EC 000000 
    80EF 00     VAR_HDLPTR          DB  0 ;Current active handler
                VAR_TEMP_ROMPAGE    DS  1 ;ROMPAGE from application
                VAR_TEMP            DS  2 ;Temporary application handler address
                VAR_TEMP2           DS  5 ;Temporary stack variable
                
                
                ;-------------------------------------;
                ; begin of assembly code
                
                codestart
                ;--------------------------------------------------------- 
                ;Library handling  
                ;---------------------------------------------------------  
                
                ;Library initialization
                ;---------------------------------------------------------   
                initfunc
    80F8 E000               ORA #0
    80FA 187081             JNZ funcdispatch
    80FD 04                 CLC
    80FE 1BD202             JSR (KERN_ISLOADED)
    8101 2C                 CLA
    8102 179188             JPC _RTS
                
                ;Initialize Zeropointer
    8105 3C10               FLG ZP_meteoRW
    8107 3C11               FLG ZP_meteoRW+1
    8109 3C12               FLG ZP_dataStructPTR
    810B 3C13               FLG ZP_dataStructPTR+1
                
                ;Move this program to a separate memory page
    810D 6CF880             LPT  #codestart
    8110 300E               LDA  #0Eh
    8112 1B1203             JSR  (KERN_MULTIPLEX)  ;may fail on older kernel
                
                ;Initialize Meteo-Data Read/Write pointer
    8115 6C1A80             LPT #VAR_meteo1
    8118 6EC280             SPTA VAR_meteoReadPTR
    811B 6C6D80             LPT #VAR_meteo2
    811E 6EC080             SPTA VAR_meteoWritePTR
                
                ;Allocate RAM for Data-Struct            
    8121 6C5D00             LPT #PAR_DATA_SIZE
    8124 05                 SEC
    8125 1BC802             JSR (KERN_MALLOCFREE)
    8128 6EC480             SPTA VAR_dataStructPTR
                
                ;Enable hardware interrupt (IRQ7)
    812B 3007               LDA #HDW_INT
    812D 6C9E82             LPT #int_dcf77
    8130 1B2802             JSR (KERN_IC_SETVECTOR)
    8133 1B2202             JSR (KERN_IC_ENABLEINT)
                
                ;Enable timer interrupt
    8136 2C                 CLA    
    8137 6C1983             LPT #int_timer
    813A 1B1203             JSR (KERN_MULTIPLEX)
    813D 42CF80             STAA VAR_timerhandle  ;Save adress of timerhandle 
                
                ;Register idle function
    8140 05                 SEC
    8141 6C2383             LPT #int_idle
    8144 1BEA02             JSR (KERN_SETIDLEFUNC)
                
                ;If sync display enabled clear LEDs 
    8147 2C                 CLA
    8148 1B0603             JSR (KERN_IOCHANGELED)
    814B 2C                 CLA
    814C 11C202             JMP (KERN_EXITTSR)
                
                ;Termination function
                ;---------------------------------------------------------                  
                termfunc  
                            ;Disable timer-interrupt
    814F 3001               LDA  #1
    8151 52CF80             LDXA VAR_timerhandle      
    8154 1B1203             JSR (KERN_MULTIPLEX)
                            ;Disable hardware-interrupt
    8157 3007               LDA #HDW_INT
    8159 1B2402             JSR (KERN_IC_DISABLEINT)
                            ;Disable idle function
    815C 04                 CLC
    815D 6C2383             LPT #int_idle
    8160 1BEA02             JSR (KERN_SETIDLEFUNC)
                            ;Free allocated RAM
    8163 04                 CLC
    8164 6DC480             LPTA VAR_dataStructPTR
    8167 1BC802             JSR (KERN_MALLOCFREE)
                
                            ;Set LEDs to default
    816A 30FF               LDA #0FFh
    816C 1B0603             JSR (KERN_IOCHANGELED)
                
    816F 1F                 RTS
                
                ;Functiondispatch
                ;---------------------------------------------------------     
                funcdispatch
    8170 9B                 DEC
    8171 19A781             JPZ func_getSeconds     ;Function 01h  
    8174 9B                 DEC 
    8175 19B381             JPZ func_getMinutes     ;Function 02h         
    8178 9B                 DEC 
    8179 19C681             JPZ func_getHours       ;Function 03h 
    817C 9B                 DEC 
    817D 19D981             JPZ func_getDay         ;Function 04h   
    8180 9B                 DEC 
    8181 19EC81             JPZ func_getWeekday     ;Function 05h       
    8184 9B                 DEC 
    8185 19FF81             JPZ func_getMonth       ;Function 06h      
    8188 9B                 DEC 
    8189 191282             JPZ func_getYear        ;Function 07h 
    818C 9B                 DEC 
    818D 192582             JPZ func_getMeteoTime   ;Function 08h
    8190 9B                 DEC 
    8191 193382             JPZ func_getEntryPoint  ;Function 09h
    8194 9B                 DEC
    8195 193982             JPZ func_getROMPage     ;Function 0Ah
    8198 9B                 DEC
    8199 193F82             JPZ func_getDataStruct  ;Function 0Bh
    819C 9B                 DEC
    819D 194E82             JPZ func_setHandler     ;Function 0Ch
    81A0 9B                 DEC
    81A1 199182             JPZ func_tellROMPage    ;Function 0Dh
    81A4 109388             JMP _failRTS
                
                ;Function '01h' = Get seconds (OUTPUT = Accu), Carry = 0 if successfull
                func_getSeconds
    81A7 321080             LDAA FLG_synced
    81AA 189388             JNZ _failRTS
    81AD 321380             LDAA VAR_second
    81B0 109188             JMP _RTS
                
                ;Function '02h' = Get minutes (OUTPUT = Accu), Carry = 0 if successfull         
                func_getMinutes  
    81B3 321180             LDAA VAR_dataOK
    81B6 D001               AND #01h
    81B8 199388             JPZ _failRTS
    81BB 321480             LDAA VAR_minutes
    81BE 70FF               CMP #0FFh
    81C0 199388             JPZ _failRTS
    81C3 109188             JMP _RTS
                
                ;Function '03h' = Get hours (OUTPUT = Accu), Carry = 0 if successfull 
                func_getHours
    81C6 321180             LDAA VAR_dataOK
    81C9 D002               AND #02h
    81CB 199388             JPZ _failRTS
    81CE 321580             LDAA VAR_hours
    81D1 70FF               CMP #0FFh
    81D3 199388             JPZ _failRTS
    81D6 109188             JMP _RTS        
                
                ;Function '04h' = Get day (OUTPUT = Accu), Carry = 0 if successfull 
                func_getDay
    81D9 321180             LDAA VAR_dataOK
    81DC D004               AND #04h
    81DE 199388             JPZ _failRTS
    81E1 321680             LDAA VAR_day
    81E4 70FF               CMP #0FFh
    81E6 199388             JPZ _failRTS
    81E9 109188             JMP _RTS    
                
                ;Function '05h' = Get weekday (OUTPUT = Accu), Carry = 0 if successfull 
                ;1 = monday, 2 = tuesday, 3 = wednesday, 4 = thursday, 5 = friday, 6 = saturday, 7 = sunday
                func_getWeekday
    81EC 321180             LDAA VAR_dataOK
    81EF D004               AND #04h
    81F1 199388             JPZ _failRTS
    81F4 321780             LDAA VAR_weekday
    81F7 70FF               CMP #0FFh
    81F9 199388             JPZ _failRTS
    81FC 109188             JMP _RTS   
                
                ;Function '06h' = Get month (OUTPUT = Accu), Carry = 0 if successfull 
                func_getMonth
    81FF 321180             LDAA VAR_dataOK
    8202 D004               AND #04h
    8204 199388             JPZ _failRTS
    8207 321880             LDAA VAR_month
    820A 70FF               CMP #0FFh
    820C 199388             JPZ _failRTS
    820F 109188             JMP _RTS     
                
                ;Function '07h' = Get year (OUTPUT = Accu), Carry = 0 if successfull 
                func_getYear
    8212 321180             LDAA VAR_dataOK
    8215 D004               AND #04h
    8217 199388             JPZ _failRTS
    821A 321980             LDAA VAR_year
    821D 70FF               CMP #0FFh
    821F 199388             JPZ _failRTS
    8222 109188             JMP _RTS
                
                ;Function '08h' = Get encoded METEO Information (X/Y = Pointer to zero terminated string), Carry = 0 if successfull
                ;Bit 0-41 = meteotime (3 minutes)
                ;Bit 42-81 = time information (Minutes + Hours + Day + Month + Weekday + Year) without parity
                func_getMeteoTime
    8225 321180             LDAA VAR_dataOK
    8228 D008               AND #08h
    822A 199388             JPZ _failRTS
    822D 6DC280             LPTA VAR_meteoReadPTR
    8230 109188             JMP _RTS
                
                ;Function '09h' = Get entrypoint of library         
                func_getEntryPoint
    8233 6C7081             LPT #funcdispatch
    8236 109188             JMP _RTS
                
                ;Function '0Ah' = Get ROM-Page of library
                func_getROMPage
    8239 320039             LDAA REG_ROMPAGE
    823C 109188             JMP _RTS
                
                ;Function '0Bh' = Get data struct
                ;X/Y = Pointer to struct in RAM, Accu = RAMPAGE
                ;   Byte 0 = Sync flag -> 0 if synchron with dcf77
                ;   Byte 1 = Parity check -> Bit 1 = Minutes OK, Bit 2 = Hours OK, Bit 3 = Date OK, Bit 4 = Meteo OK
                ;   Byte 2 = Bit data 0 or 1 for current second
                ;   Byte 3 = Second
                ;   Byte 4 = Minute
                ;   Byte 5 = Hour
                ;   Byte 6 = Day
                ;   Byte 7 = Weekday
                ;   Byte 8 = Month
                ;   Byte 9 = Year
                ;   Byte 10 - 92 = Meteo data (Zero terminated bit string)
                func_getDataStruct
    823F 6DC480             LPTA VAR_dataStructPTR
    8242 29                 SAY
    8243 05                 SEC
    8244 9080               SBC #ROMPAGE_RAM0
    8246 29                 SAY
    8247 320039             LDAA REG_ROMPAGE
    824A 6B                 INC
    824B 109188             JMP _RTS
                
                ;Function '0Ch' = Set/Delete event handler (Triggered after every new bit)
                ;C(1) = Set new handler -> X/Y = Handler-Address, Accu = Return Handler-No.
                ;C(0) = Delete handler -> Handler-No. in X-Reg
                ;Return Carry = 0 if successfull
                ; -> Function '0Dh' = "Tell ROMPAGE" need to be called also!
                func_setHandler
    824E 168382             JNC _clrHDL0
    8251 6EF180             SPTA VAR_TEMP
                
                ;Set new handler
    8254 6DF180             LPTA VAR_TEMP
    8257 21                 TXA
    8258 2D                 CLX
    8259 08                 PHA
    825A 35E380 _setHDL1    LDA VAR_HDLbitmaskREG,X
    825D 196A82             JPZ _setHDL0
    8260 7B                 INX
    8261 6006               CPX #PAR_HDLMax
    8263 165A82             JNC _setHDL1 
    8266 0C                 PLA ;Dummy
    8267 109388             JMP _failRTS ;No free handler
                
    826A 21     _setHDL0    TXA
    826B 0D                 PLX ;Accu = Handl. Nr., X = Low-Address, Y = High-Address
    826C 08                 PHA
    826D CB                 SHL ;Double handler number (2 Bytes per handler)
    826E 28                 SAX
    826F 45D080             STA  VAR_tabHANDLER,X
    8272 5DD180             STY  VAR_tabHANDLER+1,X
    8275 0D                 PLX
    8276 3001               LDA #1
    8278 45E380             STA  VAR_HDLbitmaskREG,X
    827B 7DE280             INCA VAR_HDLCount
    827E 21                 TXA
    827F 6B                 INC ;Increment Handler number so it begins with 1
    8280 109188             JMP _RTS
                ;Delete handler            
    8283 2C     _clrHDL0    CLA
    8284 AB                 DEX ;Decrement handler number
    8285 45E980             STA VAR_HDLbitmaskEN, X ;Disable handler 
    8288 45E380             STA VAR_HDLbitmaskREG, X ;Delete handler 
    828B 8DE280             DECA VAR_HDLCount          
    828E 109188             JMP _RTS
                
                ;Function '0Dh' = Tell ROMPAGE to registered handler routine and enable handler
                ;Handler-No. in X-Register, ROMPAGE-No. in Y-Register
                ;Return Carry = 0 if successfull
                func_tellROMPage
    8291 23                 TYA
    8292 AB                 DEX
    8293 45DC80             STA  VAR_tabHDLROMPAGE,X
    8296 3001               LDA #1
    8298 45E980             STA  VAR_HDLbitmaskEN, X
    829B 109188             JMP _RTS
                
                ;--------------------------------------------------------- 
                ;Interrupt routines   
                ;---------------------------------------------------------       
                
                ;BEGIN - Receiver interrupt
                ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    
                int_dcf77
                            ;First start?
    829E 320880             LDAA FLG_firstStart
    82A1 19A882             JPZ _rInt0
    82A4 2F0880             STZA FLG_firstStart
    82A7 1F                 RTS
                
                            ;Check for interference
    82A8 320B80 _rInt0      LDAA VAR_bitCount
    82AB 7002               CMP #PARAM_IGNORE
    82AD 17B182             JPC _rInt6
                            ;Interference detected -> Ignore
                
                ;DEBUG print interference            
                
    82B0 1F                 RTS
                
    82B1 3001   _rInt6      LDA #1 
    82B3 420980             STAA FLG_dcfReceiver ;Flank detected -> Set flag (Pause timer count)
    82B6 7D0E80             INCA VAR_edgeCnt ;Count edges (For signal error detection)
    82B9 320B80             LDAA VAR_bitCount
    82BC 420C80             STAA VAR_bitCache ;Move bitCounter to cache
    82BF 2F0B80             STZA VAR_bitCount
    82C2 2F0980             STZA FLG_dcfReceiver ;Resume timer count
                
                            ;LDAA VAR_bitCache 
    82C5 7032               CMP #PARAM_SYNCPAUSE ;Synchronize with signal -> Detect syncpoint/-gap
    82C7 16D682             JNC _rInt2
                            ;Time >= PARAM_SYNCPAUSE -> Time longer than 1 second
                            ;Syncpoint reached
    82CA 2F1080             STZA FLG_synced
    82CD 2F1380             STZA VAR_second
    82D0 2F0E80             STZA VAR_edgeCnt
                
                
    82D3 10DE82             JMP _rInt5
                
                ;Time < PARAM_SYNCPAUSE          
    82D6 7014   _rInt2      CMP #PARAM_SECOND 
    82D8 16EF82             JNC _rInt3
    82DB 7D1380             INCA VAR_second ;Time >= PARAM_SECOND -> Next second
                
    82DE 9A12   _rInt5      PUSH ZP_dataStructPTR ;Save ZP to stack
    82E0 6DC480             LPTA VAR_dataStructPTR
    82E3 6F12               SPT ZP_dataStructPTR
    82E5 5003               LDX #03h
    82E7 321380             LDAA VAR_second
    82EA 4312               STA (ZP_dataStructPTR),X ;Add second to struct in RAM
    82EC AA12               POP ZP_dataStructPTR ;Restore ZP from stack
    82EE 1F                 RTS
                
                ;Time < PARAM_SECOND -> New bit
    82EF 320E80 _rInt3      LDAA VAR_edgeCnt ;First do signal checking -> Twice as many edges+1 as seconds?
    82F2 05                 SEC
    82F3 9001               SBC #1
    82F5 B002               DIV #2
    82F7 721380             CMPA VAR_second
    82FA 191383             JPZ _rInt4 ;Check successfull -> Go forward to bit checking
                
                ;No longer synchronized        
                deSync  
    82FD 3001               LDA #1 
    82FF 421080             STAA FLG_synced
    8302 3008               LDA #08
    8304 42CE80             STAA VAR_ledsDataOK
    8307 2F1180             STZA VAR_dataOK
    830A 2F1380             STZA VAR_second
    830D 2FC680             STZA VAR_meteoCount1
    8310 2FC780             STZA VAR_meteoCount2
                
                ;New bit -> Ready for decode   
    8313 3001   _rInt4      LDA #1
    8315 420A80             STAA FLG_dcfReceiver+1
                
    8318 1F                 RTS
                ;END - Receiver interrupt
                ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                
                ;BEGIN - Timer interrupt 30.51757813 times per second
                ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
                int_timer
                            ;Measure time between two edges
    8319 320980             LDAA FLG_dcfReceiver
    831C 189188             JNZ _RTS       
    831F 7D0B80             INCA VAR_bitCount
    8322 1F                 RTS
                ;END - Timer interrupt
                ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                
                ;BEGIN - Idle function (Bit decoding)
                ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
                int_idle
                
                ;New bit available?
    8323 320A80             LDAA FLG_dcfReceiver+1
    8326 199188             JPZ _RTS
    8329 2F0A80             STZA FLG_dcfReceiver+1 ;Get ready for new bit immediately
                
                ;New bit received
                ;---------------------------------------------------------
                ;Display synced status on I/O-Module LEDs
    832C 1ADF87         JSR syncDisp
                ;Display synced status on SCC-Board
                
                ;Add data to struct in RAM
    832F 9A12               PUSH ZP_dataStructPTR ;Save ZP to stack
    8331 6DC480             LPTA VAR_dataStructPTR
    8334 6F12               SPT ZP_dataStructPTR
    8336 5000               LDX #00h ;FLG_synced
    8338 321080             LDAA FLG_synced
    833B 4312               STA (ZP_dataStructPTR),X
                
                ;DEBUG print desynchronisation            
                
                ;Get bit information
    833D 1A5288             JSR getBit
    8340 421280             STAA VAR_bitData
                
                ;Add data to struct in RAM
    8343 194883             JPZ _tFill3
    8346 3001               LDA #1
    8348 5002   _tFill3     LDX #02h ;VAR_bitData
    834A 4312               STA (ZP_dataStructPTR),X
    834C AA12               POP ZP_dataStructPTR ;Restore ZP from stack
                
                ;If not synced -> Stop decoding
    834E 321080 _nBit0      LDAA FLG_synced
    8351 189987             JNZ hdlRTS
                
                ;DEBUG print time measurement and bit information
                
                ;Check which second/bit we have            
    8354 321380             LDAA VAR_second
    8357 18FB83             JNZ _nBit3
    835A 321280             LDAA VAR_bitData
    835D 18FD82             JNZ deSync ;If Bit 0 != 0 -> Not synchronized or incorrect signal
                
                ;Second/bit = 0 -> Take over data from last minute  
    8360 9A12               PUSH ZP_dataStructPTR ;Save ZP to stack
    8362 6DC480             LPTA VAR_dataStructPTR
    8365 6F12               SPT ZP_dataStructPTR  
    8367 321380             LDAA VAR_second
    836A 22                 TAY            
    836B 321180             LDAA VAR_dataOK
    836E D001               AND #01h
    8370 198283             JPZ _nBit1
    8373 32C880             LDAA VAR_tmpMinutes ;Take over 'minutes'
    8376 421480             STAA VAR_minutes
    8379 20                 TAX
    837A 09                 PHX
    837B 5004               LDX #04h
    837D 351080             LDA START_DATA_STRUCT,X
    8380 4312               STA (ZP_dataStructPTR),X ;Add minutes to data struct in RAM
    8382 321180 _nBit1      LDAA VAR_dataOK
    8385 D002               AND #02h
    8387 19AD83             JPZ _nBit2
    838A 32C980             LDAA VAR_tmpHours
    838D 421580             STAA VAR_hours ;Take over 'hours'
    8390 5005               LDX #05h
    8392 351080             LDA START_DATA_STRUCT,X
    8395 4312               STA (ZP_dataStructPTR),X ;Add hours to data struct in RAM
    8397 0D                 PLX
                            ;Set system time
    8398 08                 PHA
    8399 321180             LDAA VAR_dataOK
    839C D003               AND #03h
    839E 7003               CMP #03h
    83A0 18AD83             JNZ _nBit2
    83A3 0C                 PLA
    83A4 6400               CPY #0
    83A6 18AD83             JNZ _nBit2 ;Sync every minute at xx:xx:00
    83A9 05                 SEC
    83AA 1B9A02             JSR (KERN_GETSETTIME)
                
    83AD AA12   _nBit2      POP ZP_dataStructPTR ;Restore ZP from stack
    83AF 321180             LDAA VAR_dataOK
    83B2 D004               AND #04h
    83B4 199987             JPZ hdlRTS
    83B7 32CD80             LDAA VAR_tmpYear ;Take over 'year'
    83BA 421980             STAA VAR_year
    83BD 22                 TAY
    83BE 32CC80             LDAA VAR_tmpMonth ;Take over 'month'
    83C1 421880             STAA VAR_month
    83C4 20                 TAX
    83C5 32CB80             LDAA VAR_tmpWeekday ;Take over 'weekday'
    83C8 421780             STAA VAR_weekday
    83CB 32CA80             LDAA VAR_tmpDay ;Take over 'day'
    83CE 421680             STAA VAR_day
                            ;Set system datetime
    83D1 08                 PHA
    83D2 321380             LDAA VAR_second
    83D5 7000               CMP #0
    83D7 189987             JNZ hdlRTS ;Sync every minute at xx:xx:00
    83DA 0C                 PLA
    83DB 05                 SEC
    83DC 1B9C02             JSR (KERN_GETSETDATE)
                
                ;fill struct in RAM with date data
    83DF 9A12               PUSH ZP_dataStructPTR ;Save ZP to stack
    83E1 6DC480             LPTA VAR_dataStructPTR
    83E4 6F12               SPT ZP_dataStructPTR 
    83E6 5006               LDX #06h
    83E8 351080 _tFill0     LDA START_DATA_STRUCT,X
    83EB 4312               STA (ZP_dataStructPTR),X
    83ED 7B                 INX
    83EE 600A               CPX #0Ah
    83F0 17F683             JPC _tFill4
    83F3 10E883             JMP _tFill0
                
    83F6 AA12   _tFill4     POP ZP_dataStructPTR ;Restore ZP from stack
    83F8 109987             JMP hdlRTS
                
                ;Second > 0        
    83FB 7014   _nBit3      CMP #20
    83FD 180984             JNZ _nBit4
    8400 321280             LDAA VAR_bitData ;Second/bit = 20 -> Begin of time information always '1'
    8403 19FD82             JPZ deSync ;If Bit 20 != 1 -> Not synchronized or incorrect signal
    8406 109987             JMP hdlRTS
                
                ;Second != 20 - Get/decode data
    8409 321380 _nBit4      LDAA VAR_second
    840C 700F               CMP #15
    840E 164084             JNC getMeteo ;Go to meteo
                            ;Second >= 15
    8411 7015               CMP #21
    8413 169987             JNC hdlRTS ; Ignore bit 15-20
                            ;Second >= 21
    8416 701D               CMP #29
    8418 16D784             JNC getMinutes ;Go to minute decoding
                            ;Second >= 29
    841B 7024               CMP #36
    841D 166A85             JNC getHours ;Go to hour decoding
                            ;Second >= 36
    8420 702A               CMP #42
    8422 16F785             JNC getDay ;Go to day decoding
                            ;Second >= 42
    8425 702D               CMP #45
    8427 166686             JNC getWDay ;Go to weekday decoding
                            ;Second >= 45
    842A 7032               CMP #50
    842C 16C886             JNC getMonth ;Go to month decoding
                            ;Second >= 50
    842F 703B               CMP #59
    8431 162B87             JNC getYear ;Go to year decoding
                            ;Second >= 59
    8434 189987             JNZ hdlRTS
                            ;Second = 59 -> Leap second!
    8437 321280             LDAA VAR_bitData ;Always '0'
    843A 18FD82             JNZ deSync 
    843D 109987             JMP hdlRTS
                
                ;Get/decode meteotime
                ;---------------------------------------------------------
                getMeteo    
    8440 1AB381             JSR func_getMinutes
    8443 17A984             JPC _gMet12 ;No minute data available -> Skip meteo section
    8446 C003               MOD #3
    8448 19B284             JPZ _gMet10 ;//Check for start minute -> = 0, 3, 6, 9, ...
                            ;Minute -> n+1 or n+2
    844B 32C680             LDAA VAR_meteoCount1
    844E 700E               CMP #14
    8450 169987             JNC hdlRTS ;Previous data not complete
    8453 20                 TAX
    8454 9A10               PUSH ZP_meteoRW ;Save ZP to stack
    8456 09                 PHX
    8457 6DC080             LPTA VAR_meteoWritePTR
    845A 6F10               SPT ZP_meteoRW
    845C 0D                 PLX
    845D 1A5F88             JSR getBitChar
    8460 4310               STA (ZP_meteoRW),X
    8462 7DC680             INCA VAR_meteoCount1        
    8465 21                 TXA
    8466 7029               CMP #41
    8468 197084             JPZ _getMeteo0
    846B AA10               POP ZP_meteoRW ;Restore ZP from stack
    846D 109987             JMP hdlRTS
                
                            ;Last bit received
    8470 2C     _getMeteo0  CLA
    8471 5052               LDX #82
    8473 4310               STA (ZP_meteoRW),X ;Terminate String with 0
    8475 3008               LDA #08h
    8477 E21180             ORAA VAR_dataOK
    847A 421180             STAA VAR_dataOK
    847D 6DC080             LPTA VAR_meteoWritePTR ;Swap read and write register
    8480 7A                 PHR
    8481 6DC280             LPTA VAR_meteoReadPTR
    8484 6EC080             SPTA VAR_meteoWritePTR
    8487 8A                 PLR
    8488 6EC280             SPTA VAR_meteoReadPTR
                
                ;fill data struct with meteo data (Zero terminated string)
    848B 6F10               SPT ZP_meteoRW
    848D 9A12               PUSH ZP_dataStructPTR ;Save ZP to stack
    848F 6DC480             LPTA VAR_dataStructPTR
    8492 6F12               SPT ZP_dataStructPTR
    8494 500A               LDX #0Ah
    8496 2E                 CLY
    8497 3410   _tFill1     LDA (ZP_meteoRW),Y
    8499 4312               STA (ZP_dataStructPTR),X
    849B 7B                 INX
    849C 8B                 INY
    849D 605D               CPX #5Dh
    849F 17A584             JPC _tFill2
    84A2 109784             JMP _tFill1
                
                _tFill2
    84A5 AA12               POP ZP_dataStructPTR ;Restore ZP from stack
    84A7 AA10               POP ZP_meteoRW ;Restore ZP from stack
                
                ;DEBUG print meteo string
                
    84A9 2FC680 _gMet12     STZA VAR_meteoCount1 ;Reset bit counter
    84AC 2FC780             STZA VAR_meteoCount2 ;Reset bit counter            
    84AF 109987             JMP hdlRTS    
                
                ;Start minute (0, 3, 6, 9, ...)
    84B2 321380 _gMet10     LDAA VAR_second
    84B5 7001               CMP #1
    84B7 18C084             JNZ _gMet11 ;Bit > 1 -> Write to Array
    84BA 2FC680             STZA VAR_meteoCount1 ;First minute & first bit -> Reset bit counter
    84BD 2FC780             STZA VAR_meteoCount2 ;First minute & first bit -> Reset bit counter
    84C0 1A5F88 _gMet11     JSR getBitChar
    84C3 9A10               PUSH ZP_meteoRW ;Save ZP to stack
    84C5 6DC080             LPTA VAR_meteoWritePTR
    84C8 6F10               SPT ZP_meteoRW
    84CA 52C680             LDXA VAR_meteoCount1
    84CD 4310               STA (ZP_meteoRW),X
    84CF 7DC680             INCA VAR_meteoCount1
    84D2 AA10               POP ZP_meteoRW ;Restore ZP from stack
    84D4 109987             JMP hdlRTS       
                
                ;Get/decode minutes
                ;---------------------------------------------------------
                getMinutes   
    84D7 701C               CMP #28
    84D9 191A85             JPZ _gMet21 ;Last bit -> Check parity
    84DC 7015               CMP #21
    84DE 18F184             JNZ _gMet20
    84E1 2F0D80             STZA VAR_bitCache+1    ;First bit -> Clear data
    84E4 32C680             LDAA VAR_meteoCount1
    84E7 701C               CMP #28
    84E9 180D85             JNZ _gMin0 ;Previous meteo data not complete
    84EC 302A               LDA #42
    84EE 42C780             STAA VAR_meteoCount2
                
                ;*** Get meteo 1/2 ***
    84F1 32C680 _gMet20     LDAA VAR_meteoCount1
    84F4 701C               CMP #28
    84F6 180D85             JNZ _gMin0 ;Previous meteo data not complete
    84F9 1A5F88             JSR getBitChar
    84FC 9A10               PUSH ZP_meteoRW ;Save ZP to stack
    84FE 6DC080             LPTA VAR_meteoWritePTR
    8501 6F10               SPT ZP_meteoRW
    8503 52C780             LDXA VAR_meteoCount2
    8506 4310               STA (ZP_meteoRW),X
    8508 7DC780             INCA VAR_meteoCount2
    850B AA10               POP ZP_meteoRW ;Restore ZP from stack
                
                ;Get bit (minutes)
    850D 321280 _gMin0      LDAA VAR_bitData
    8510 E20D80             ORAA VAR_bitCache+1
    8513 DB                 SHR
    8514 420D80             STAA VAR_bitCache+1
    8517 109987             JMP hdlRTS
                
                ;*** Get meteo 2/2 ***
    851A 32C780 _gMet21     LDAA VAR_meteoCount2
    851D 7031               CMP #49
    851F 183385             JNZ parityMinutes ;Previous meteo data not complete
    8522 9A10               PUSH ZP_meteoRW ;Save ZP to stack
    8524 6DC080             LPTA VAR_meteoWritePTR
    8527 6F10               SPT ZP_meteoRW
    8529 20                 TAX
    852A 3030               LDA #'0'
    852C 4310               STA (ZP_meteoRW),X
    852E 7DC780             INCA VAR_meteoCount2
    8531 AA10               POP ZP_meteoRW ;Restore ZP from stack
                
                ;Last bit
                ;Check parity (minutes)        
                parityMinutes  
    8533 321280             LDAA VAR_bitData ;Get "Carry-Bit" and save it to stack for later use
    8536 08                 PHA
                            ;Determine if bitcount of data is even or odd
    8537 320D80             LDAA VAR_bitCache+1
    853A 5007               LDX #7
    853C 2E                 CLY
    853D 1A6D88             JSR bitCnt
    8540 175285             JPC _pMin0   
    8543 0C                 PLA ;Bit count = "odd"
    8544 185685             JNZ _pMinOK
                
    8547 300E   _pMinBAD    LDA #00Eh ;Parity n.OK
    8549 D21180             ANDA VAR_dataOK
    854C 421180             STAA VAR_dataOK
                
                ;DEBUG print minutes parity failure            
                
    854F 109987             JMP hdlRTS
                
    8552 0C     _pMin0      PLA ;Bit count = "even"
    8553 184785             JNZ _pMinBAD
                
    8556 320D80 _pMinOK     LDAA VAR_bitCache+1
    8559 1A8188             JSR bcdToDec
    855C 42C880             STAA VAR_tmpMinutes
    855F 3001               LDA #01h
    8561 E21180             ORAA VAR_dataOK
    8564 421180             STAA VAR_dataOK
                
                ;DEBUG print minutes
    8567 109987             JMP hdlRTS
                
                ;Get/decode hours
                ;---------------------------------------------------------
                getHours
    856A 7023               CMP #35
    856C 19A085             JPZ _gMet31 ;Last bit -> Check parity
    856F 701D               CMP #29
    8571 187785             JNZ _gMet30
    8574 2F0D80             STZA VAR_bitCache+1
                
                ;*** Get meteo 1/2 ***
    8577 32C680 _gMet30     LDAA VAR_meteoCount1
    857A 701C               CMP #28
    857C 189385             JNZ _gHrs0 ;Previous meteo data not complete
    857F 1A5F88             JSR getBitChar
    8582 9A10               PUSH ZP_meteoRW ;Save ZP to stack
    8584 6DC080             LPTA VAR_meteoWritePTR
    8587 6F10               SPT ZP_meteoRW
    8589 52C780             LDXA VAR_meteoCount2
    858C 4310               STA (ZP_meteoRW),X
    858E 7DC780             INCA VAR_meteoCount2
    8591 AA10               POP ZP_meteoRW ;Restore ZP from stack
                
                ;Get bit (hours)
    8593 321280 _gHrs0      LDAA VAR_bitData
    8596 E20D80             ORAA VAR_bitCache+1
    8599 DB                 SHR
    859A 420D80             STAA VAR_bitCache+1
    859D 109987             JMP hdlRTS
                
                ;*** Get meteo 2/2 ***
    85A0 32C780 _gMet31     LDAA VAR_meteoCount2
    85A3 7038               CMP #56
    85A5 18BD85             JNZ parityHours ;Previous meteo data not complete
    85A8 9A10               PUSH ZP_meteoRW ;Save ZP to stack
    85AA 6DC080             LPTA VAR_meteoWritePTR
    85AD 6F10               SPT ZP_meteoRW
    85AF 20                 TAX
    85B0 3030               LDA #'0'
    85B2 4310               STA (ZP_meteoRW),X ; 1. '0'
    85B4 7B                 INX
    85B5 4310               STA (ZP_meteoRW),X ; 2. '0'
    85B7 7B                 INX
    85B8 55C780             STXA VAR_meteoCount2
    85BB AA10               POP ZP_meteoRW ;Restore ZP from stack
                
                ;Last bit
                ;Check parity (hours)         
                parityHours       
    85BD BD0D80             SHRA VAR_bitCache+1
    85C0 321280             LDAA VAR_bitData ;Get "Carry-Bit" and save it to stack for later use
    85C3 08                 PHA
                            ;Determine if bitcount of data is even or odd
    85C4 320D80             LDAA VAR_bitCache+1
    85C7 5006               LDX #6
    85C9 2E                 CLY
    85CA 1A6D88             JSR bitCnt
    85CD 17DF85             JPC _pHrs0   
    85D0 0C                 PLA ;Bit count = "odd"
    85D1 18E385             JNZ _pHrsOK
                
    85D4 300D   _pHrsBAD    LDA #00Dh ;Parity n.OK
    85D6 D21180             ANDA VAR_dataOK
    85D9 421180             STAA VAR_dataOK
                
                ;DEBUG print hours parity failure            
                
    85DC 109987             JMP hdlRTS
                
    85DF 0C     _pHrs0      PLA ;Bit count = "even"
    85E0 18D485             JNZ _pHrsBAD
                
    85E3 320D80 _pHrsOK     LDAA VAR_bitCache+1
    85E6 1A8188             JSR bcdToDec
    85E9 42C980             STAA VAR_tmpHours
    85EC 3002               LDA #02h
    85EE E21180             ORAA VAR_dataOK
    85F1 421180             STAA VAR_dataOK
                
                ;DEBUG print hours
    85F4 109987             JMP hdlRTS
                
                ;Get/decode day
                ;---------------------------------------------------------
                getDay  
    85F7 7024               CMP #36 
    85F9 18FF85             JNZ _gMet40
    85FC 2F0D80             STZA VAR_bitCache+1
                
                ;*** Get meteo 1/2 ***
    85FF 32C680 _gMet40     LDAA VAR_meteoCount1
    8602 701C               CMP #28
    8604 181B86             JNZ _gDay0 ;Previous meteo data not complete
    8607 1A5F88             JSR getBitChar
    860A 9A10               PUSH ZP_meteoRW ;Save ZP to stack
    860C 6DC080             LPTA VAR_meteoWritePTR
    860F 6F10               SPT ZP_meteoRW
    8611 52C780             LDXA VAR_meteoCount2
    8614 4310               STA (ZP_meteoRW),X
    8616 7DC780             INCA VAR_meteoCount2
    8619 AA10               POP ZP_meteoRW ;Restore ZP from stack
                
                ;Get bit (day)      
    861B 321280 _gDay0      LDAA VAR_bitData
    861E E20D80             ORAA VAR_bitCache+1
    8621 DB                 SHR
    8622 420D80             STAA VAR_bitCache+1
                            ;Check for last bit
    8625 321380             LDAA VAR_second
    8628 7029               CMP #41       
    862A 189987             JNZ hdlRTS 
                
                ;*** Get meteo 2/2 ***
    862D 32C780             LDAA VAR_meteoCount2
    8630 7040               CMP #64
    8632 184B86             JNZ _gDay1 ;Previous meteo data not complete
    8635 9A10               PUSH ZP_meteoRW ;Save ZP to stack
    8637 6DC080             LPTA VAR_meteoWritePTR
    863A 6F10               SPT ZP_meteoRW
    863C 20                 TAX
    863D 3030               LDA #'0'
    863F 4310               STA (ZP_meteoRW),X ; 1. '0'
    8641 7B                 INX
    8642 4310               STA (ZP_meteoRW),X ; 2. '0'
    8644 3047               LDA #71
    8646 42C780             STAA VAR_meteoCount2  
    8649 AA10               POP ZP_meteoRW ;Restore ZP from stack
                
                ;Last bit
    864B BD0D80 _gDay1      SHRA VAR_bitCache+1
                            ;Count high bits and add it to "VAR_dateParity"
    864E 320D80             LDAA VAR_bitCache+1
    8651 5006               LDX #6
    8653 2E                 CLY
    8654 1A6D88             JSR bitCnt
    8657 420F80             STAA VAR_dateParity
                            ;Save day value
    865A 320D80             LDAA VAR_bitCache+1
    865D 1A8188             JSR bcdToDec
    8660 42CA80             STAA VAR_tmpDay
                
                ;DEBUG print day
    8663 109987             JMP hdlRTS      
                
                ;Get/decode weekday
                ;---------------------------------------------------------
                getWDay 
    8666 702A               CMP #42
    8668 186E86             JNZ _gMet50
    866B 2F0D80             STZA VAR_bitCache+1
                
                ;*** Get meteo 1/2 ***
    866E 32C680 _gMet50     LDAA VAR_meteoCount1
    8671 701C               CMP #28
    8673 188A86             JNZ _getWDay0 ;Previous meteo data not complete
    8676 1A5F88             JSR getBitChar
    8679 9A10               PUSH ZP_meteoRW ;Save ZP to stack
    867B 6DC080             LPTA VAR_meteoWritePTR
    867E 6F10               SPT ZP_meteoRW
    8680 52C780             LDXA VAR_meteoCount2
    8683 4310               STA (ZP_meteoRW),X
    8685 7DC780             INCA VAR_meteoCount2
    8688 AA10               POP ZP_meteoRW ;Restore ZP from stack
                
                ;Get bit (weekday)    
    868A 321280 _getWDay0   LDAA VAR_bitData
    868D E20D80             ORAA VAR_bitCache+1
    8690 DB                 SHR
    8691 420D80             STAA VAR_bitCache+1
                            ;Check for last bit
    8694 321380             LDAA VAR_second
    8697 702C               CMP #44       
    8699 189987             JNZ hdlRTS
                
                ;*** Get meteo 2/2 ***
    869C 32C780             LDAA VAR_meteoCount2
    869F 704A               CMP #74
    86A1 18A986             JNZ _getWDay1 ;Previous meteo data not complete
    86A4 3042               LDA #66
    86A6 42C780             STAA VAR_meteoCount2
                
                ;Last bit
                            ;Shift data right by 4
    86A9 320D80 _getWDay1   LDAA VAR_bitCache+1
    86AC B010               DIV #10h
    86AE 420D80             STAA VAR_bitCache+1
                
                            ;Count high bits and add it to "VAR_dateParity"
    86B1 5003               LDX #3
    86B3 590F80             LDYA VAR_dateParity
    86B6 1A6D88             JSR bitCnt
    86B9 420F80             STAA VAR_dateParity
                            ;Save weekday value
    86BC 320D80             LDAA VAR_bitCache+1
    86BF 1A8188             JSR bcdToDec
    86C2 42CB80             STAA VAR_tmpWeekday
                
                ;DEBUG print weekday
                
    86C5 109987             JMP hdlRTS 
                
                ;Get/decode month
                ;---------------------------------------------------------
                getMonth    
    86C8 702D               CMP #45
    86CA 18D086             JNZ _gMet60
    86CD 2F0D80             STZA VAR_bitCache+1
                
                ;*** Get meteo ***
    86D0 32C680 _gMet60     LDAA VAR_meteoCount1
    86D3 701C               CMP #28
    86D5 18EC86             JNZ _gMon0 ;Previous meteo data not complete
    86D8 1A5F88             JSR getBitChar
    86DB 9A10               PUSH ZP_meteoRW ;Save ZP to stack
    86DD 6DC080             LPTA VAR_meteoWritePTR
    86E0 6F10               SPT ZP_meteoRW
    86E2 52C780             LDXA VAR_meteoCount2
    86E5 4310               STA (ZP_meteoRW),X
    86E7 7DC780             INCA VAR_meteoCount2
    86EA AA10               POP ZP_meteoRW ;Restore ZP from stack
                
                ;Get bit (month)
    86EC 321280 _gMon0      LDAA VAR_bitData
    86EF E20D80             ORAA VAR_bitCache+1
    86F2 DB                 SHR
    86F3 420D80             STAA VAR_bitCache+1            
                            ;Check for last bit
    86F6 321380             LDAA VAR_second
    86F9 7031               CMP #49       
    86FB 189987             JNZ hdlRTS 
                
                ;*** Get meteo 2/2 ***
    86FE 32C780             LDAA VAR_meteoCount2
    8701 7047               CMP #71
    8703 180B87             JNZ _gMon1 ;Previous meteo data not complete
    8706 304A               LDA #74
    8708 42C780             STAA VAR_meteoCount2
                
                ;Last bit
                            ;Shift data right by 2
    870B BD0D80 _gMon1      SHRA VAR_bitCache+1
    870E BD0D80             SHRA VAR_bitCache+1
                
                            ;Count high bits and add it to "VAR_dateParity"
    8711 320D80             LDAA VAR_bitCache+1
    8714 5005               LDX #5
    8716 590F80             LDYA VAR_dateParity
    8719 1A6D88             JSR bitCnt
    871C 420F80             STAA VAR_dateParity
                            ;Save month value
    871F 320D80             LDAA VAR_bitCache+1
    8722 1A8188             JSR bcdToDec
    8725 42CC80             STAA VAR_tmpMonth
                
                ;DEBUG print month
                
    8728 109987             JMP hdlRTS
                
                ;Get/decode year
                ;---------------------------------------------------------
                getYear     
    872B 703A               CMP #58
    872D 196387             JPZ parityDate ;Last bit -> Check parity
    8730 7032               CMP #50
    8732 183887             JNZ _gMet70
    8735 2F0D80             STZA VAR_bitCache+1
                
                ;*** Get meteo ***
    8738 32C680 _gMet70     LDAA VAR_meteoCount1
    873B 701C               CMP #28
    873D 185487             JNZ _gYear0 ;Previous data not complete
    8740 9A10               PUSH ZP_meteoRW ;Save ZP to stack
    8742 6DC080             LPTA VAR_meteoWritePTR
    8745 6F10               SPT ZP_meteoRW
    8747 1A5F88             JSR getBitChar
    874A 52C780             LDXA VAR_meteoCount2
    874D 4310               STA (ZP_meteoRW),X
    874F 7DC780             INCA VAR_meteoCount2
    8752 AA10               POP ZP_meteoRW ;Restore ZP from stack
                
                ;Get bit (year)
    8754 BD0D80 _gYear0     SHRA VAR_bitCache+1
    8757 321280             LDAA VAR_bitData
    875A E20D80             ORAA VAR_bitCache+1
    875D 420D80             STAA VAR_bitCache+1
    8760 109987             JMP hdlRTS
                
                ;Last bit
                ;Check parity for whole date (Day, weekday, month, year)         
                parityDate
    8763 321280             LDAA VAR_bitData ;Get "Carry-Bit" and save it to stack for later use
    8766 08                 PHA
                            ;Count high bits and add it to "VAR_dateParity"
                            ;Determine if bitcount of "VAR_dateParity" is even or odd
    8767 320D80             LDAA VAR_bitCache+1
    876A 5008               LDX #8
    876C 590F80             LDYA VAR_dateParity
    876F 1A6D88             JSR bitCnt
    8772 178487             JPC _pDat0
    8775 0C                 PLA ;Bit count = "odd" 
    8776 188887             JNZ _pDateOK
                
    8779 300B   _pDateBAD   LDA #00Bh ;Partity n.OK
    877B D21180             ANDA VAR_dataOK
    877E 421180             STAA VAR_dataOK
                
                ;DEBUG print hours parity failure            
                
    8781 109987             JMP hdlRTS
                
    8784 0C     _pDat0      PLA ;Bit count = "even"
    8785 187987             JNZ _pDateBAD
                
    8788 320D80 _pDateOK    LDAA VAR_bitCache+1
    878B 1A8188             JSR bcdToDec
    878E 42CD80             STAA VAR_tmpYear ;Save year value
    8791 3004               LDA #04h
    8793 E21180             ORAA VAR_dataOK
    8796 421180             STAA VAR_dataOK
                
                ;DEBUG print year
                
                ;Add data to struct in RAM
    8799 9A12   hdlRTS      PUSH ZP_dataStructPTR ;Save ZP to stack
    879B 6DC480             LPTA VAR_dataStructPTR
    879E 6F12               SPT ZP_dataStructPTR
    87A0 5001               LDX #01h ;VAR_dataOK
    87A2 351080             LDA START_DATA_STRUCT,X
    87A5 4312               STA (ZP_dataStructPTR),X 
    87A7 AA12               POP ZP_dataStructPTR
                
                ;Start application handler chain
    87A9 32E280             LDAA VAR_HDLCount
    87AC 199188             JPZ _RTS ;No handler registered
                
    87AF 2D                 CLX
    87B0 35E980 _hdl0       LDA VAR_HDLbitmaskEN,X
    87B3 18BF87             JNZ _hdl1
    87B6 7B     _hdl2       INX
    87B7 6006               CPX #PAR_HDLMax
    87B9 179188             JPC _RTS ;End of handler chain
    87BC 10B087             JMP _hdl0
                
    87BF 21     _hdl1       TXA
    87C0 42EF80             STAA VAR_HDLPTR ;Current active handler No.
    87C3 CB                 SHL
    87C4 20                 TAX
                
                ;call handler-routines in ROM
    87C5 59EF80             LDYA VAR_HDLPTR
    87C8 36DC80             LDA VAR_tabHDLROMPAGE,Y
    87CB 08                 PHA
    87CC 35D180             LDA VAR_tabHANDLER+1,X
    87CF 08                 PHA
    87D0 35D080             LDA VAR_tabHANDLER,X
    87D3 08                 PHA
                
    87D4 1BB802             JSR (KERN_CALLFROMROM)
                
    87D7 32EF80 _exitint    LDAA VAR_HDLPTR
    87DA 20                 TAX
    87DB 10B687             JMP _hdl2 ;Next handler
                
    87DE 1F                 RTS
                
                ;END - Idle function
                ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on Multi-I/O LEDs   
                ;---------------------------------------------------------
                syncDisp
                ;Display synced status           
    87DF 321080             LDAA FLG_synced
    87E2 19F087             JPZ _syncD0
    87E5 3008               LDA #08h 
    87E7 F2CE80             EORA VAR_ledsDataOK
    87EA 42CE80             STAA VAR_ledsDataOK
    87ED 104888             JMP _syncD4
    87F0 3008   _syncD0     LDA #08h 
    87F2 E2CE80             ORAA VAR_ledsDataOK
    87F5 42CE80             STAA VAR_ledsDataOK
                
    87F8 321380             LDAA VAR_second
    87FB 7015               CMP #21
    87FD 164888             JNC _syncD4 ;Second <21 -> No time information fetching
    8800 701D               CMP #29
    8802 161288             JNC _syncD1 ;Second >= 21 & <29 -> Fetching minutes
    8805 7024               CMP #36
    8807 162588             JNC _syncD2 ;Second >= 29 & < 36 -> Fetching hours
    880A 703B               CMP #59
    880C 163888             JNC _syncD3 ;Second >= 36 & < 59 -> Fetching date
    880F 104888             JMP _syncD4
                
                ;Fetching minutes
    8812 321180 _syncD1     LDAA VAR_dataOK
    8815 D001               AND #01h
    8817 184888             JNZ _syncD4
    881A 3001               LDA #01h 
    881C F2CE80             EORA VAR_ledsDataOK
    881F 42CE80             STAA VAR_ledsDataOK
    8822 104888             JMP _syncD4
                
                ;Fetching hours
    8825 321180 _syncD2     LDAA VAR_dataOK
    8828 D002               AND #02h
    882A 184888             JNZ _syncD4
    882D 3002               LDA #02h 
    882F F2CE80             EORA VAR_ledsDataOK
    8832 42CE80             STAA VAR_ledsDataOK
    8835 104888             JMP _syncD4
                
                ;Fetching date 
    8838 321180 _syncD3     LDAA VAR_dataOK
    883B D004               AND #04h
    883D 184888             JNZ _syncD4
    8840 3004               LDA #04h 
    8842 F2CE80             EORA VAR_ledsDataOK
    8845 42CE80             STAA VAR_ledsDataOK
                
    8848 321180 _syncD4     LDAA VAR_dataOK
    884B E2CE80             ORAA VAR_ledsDataOK
    884E 1B0603             JSR (KERN_IOCHANGELED)
    8851 1F                 RTS
                
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on SCC-Board   
                ;---------------------------------------------------------
                
                ;--------------------------------------------------------- 
                ;Helper functions   
                ;---------------------------------------------------------
                
                ;Get bit information from second (Output: A = High(80h), Low(00h))        
                getBit      
    8852 320C80             LDAA VAR_bitCache
    8855 7005               CMP #PARAM_LOWHIGH
    8857 165D88             JNC _gBit0
                            ;Time >= PARAM_LOWHIGH -> Bit = 1
    885A 3080               LDA #80h
    885C 4D                 SKA
    885D 2C     _gBit0      CLA ;Time < PARAM_LOWHIGH -> Bit = 0
    885E 1F                 RTS
                
                ;Get bit information from second as Char (Output: A = Char)        
                getBitChar      
    885F 320C80             LDAA VAR_bitCache
    8862 7005               CMP #PARAM_LOWHIGH
    8864 166A88             JNC _gBitC0
                            ;Time >= PARAM_LOWHIGH -> Bit = 1
    8867 3031               LDA #'1'
    8869 4E                 SKB
    886A 3030   _gBitC0     LDA #'0' ;Time < PARAM_LOWHIGH -> Bit = 0
    886C 1F                 RTS
                
                ;Count high bits
                ;Input: A = Byte, X = Number of bits, Y = Counter offset
                ;Output: A = Counter value, Carry = 0 -> odd, Carry = 1 -> even
                bitCnt
    886D DB     _bCnt0      SHR
    886E 167288             JNC _bCnt1
    8871 8B                 INY
    8872 496D88 _bCnt1      DXJP _bCnt0
    8875 29                 SAY
    8876 08                 PHA
    8877 C002               MOD #2
    8879 197E88             JPZ _bCnt2
    887C 04                 CLC ;Counter value "odd"
    887D 4D                 SKA
    887E 05     _bCnt2      SEC ;Counter value "even"
    887F 0C                 PLA
    8880 1F                 RTS
                
                ;Convert BCD to decimal (Input: A = BCD value) (Output: A = decimal vlaue)      
                bcdToDec
    8881 08                 PHA
    8882 B010               DIV #10h
    8884 A00A               MUL #00Ah
    8886 420D80             STAA VAR_bitCache+1
    8889 0C                 PLA
    888A D00F               AND #00Fh
    888C 04                 CLC
    888D 820D80             ADCA VAR_bitCache+1
    8890 1F                 RTS
                
                _RTS    
    8891 04                 CLC
    8892 1F                 RTS
                
                _failRTS
    8893 2C                 CLA
    8894 05                 SEC
    8895 1F                 RTS
                
                


Segment Table:
**************
Segment Name                 Startaddr  Endaddr     Size  Type
=========================================================================
default                           8000     8895      896  CODE  fixed
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

No errors found.
