                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                ;~~  [MyCA] Macro Cross Assembler V1.10 for MyCPU, (c) 2023 by Dennis Kuschel  ~~
                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                ;[File: sl60dcf77_meteo.asm]
                ;[ASCII]
                ;******************************************
                ;***********  DCF77 Library  **************
                ;******************************************
                ;***** by Robin TÃ¶nniges (2016-2024) ******
                ;******************************************
                
                ;[File: C:\Program Files (x86)\myca\include\sys.hsm]
                ;[ASCII]
                
                KERN_WARMSTART      EQU 0220h
                KERN_FILEINPUT      EQU 027Ah
                KERN_GETINFO        EQU 02A2h
                KERN_REGFILEDEVICE  EQU 0264h
                KERN_FSREGISTER     EQU 02AEh
                KERN_FSUNREGISTER   EQU 02B0h
                KERN_GETCHECKSUM16  EQU 02B2h
                KERN_SETMEMBORDERS  EQU 029Eh
                KERN_SETIDLEFUNC    EQU 02EAh
                KERN_IDLE           EQU 02ECh
                KERN_TESTVERSION    EQU 030Ch
                KERN_CONFIGBYTE     EQU 030Ah
                KERN_IDEDRIVER      EQU 030Eh
                KERN_MULTIPLEX      EQU 0312h
                KERN_PRGMOVE        EQU 032Ah
                
                ;[File: sl60dcf77_meteo.asm]
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                ;[ASCII]
                
                ;[File: C:\Program Files (x86)\myca\include\code.hsm]
                ;[ASCII]
                
                KERN_ADAPTOPCODES   EQU 02C4h
                KERN_EXECUTEFILE    EQU 02BEh
                KERN_EXITTSR        EQU 02C2h
                KERN_KILLPROGRAM    EQU 02C0h
                KERN_KILLPROGEX     EQU 0328h
                KERN_SPECROMCALL    EQU 02B6h
                KERN_CALLFROMROM    EQU 02B8h
                KERN_CALLROM        EQU 02BAh
                KERN_LIBCALL        EQU 02CAh
                KERN_LIBSELECT      EQU 02CCh
                KERN_LIBDESELECT    EQU 02CEh
                KERN_LIBUNLOAD      EQU 02D0h
                KERN_ISLOADED       EQU 02D2h
                KERN_ASSERT         EQU 0326h
                
                REG_ROMPAGE  SET 3900h
                
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                
                ORG 8000h
    8000 0280    DW 8002h
    8002 C980    DW disp__func
    8004 1581    DW termfunc
    8006 C980    DW codestart
                
                ;[File: sl60dcf77_meteo.asm]
                ;[File: C:\Program Files (x86)\myca\include\code.hsm]
                ;[ASCII]
                ;[File: sl60dcf77_meteo.asm]
                ;[File: C:\Program Files (x86)\myca\include\interrupt.hsm]
                ;[ASCII]
                
                KERN_IC_ENABLEINT   EQU 0222h
                KERN_IC_DISABLEINT  EQU 0224h
                KERN_IC_GETVECTOR   EQU 0226h
                KERN_IC_SETVECTOR   EQU 0228h
                KERN_IC_REGISTERBH  EQU 022Ah
                KERN_SPINLOCK       EQU 02A8h
                KERN_INTVECT        EQU 0332h
                
                KERN_INSDELTIMER    EQU 02AAh
                
                ;[File: sl60dcf77_meteo.asm]
                ;Comment this line out if you dont want synced status on Multi-I/O-LEDs
                ;Comment this line in if you use the SCC-Rack-Extension
                ;#DEFINE SCC_BOARD 
                ;Comment this line in if you want debug output
                ;#DEFINE DEBUG
                
                ;Debug Message
                ;Second[MeteoCount1|MeteoCount2]: BitLevel(PulseTime) {Additional comments}
                ;Example: 28[28|49]: H(6) Minute: 32
                
                
                ;-------------------------------------;
                ; declare variables
                
                ;Addresses
                HDW_INT             EQU 7       ;IRQ7
                
                
                KERN_IOCHANGELED    EQU 0306h   ;Kernel routine for changing the Multi-I/O-LEDs
                
                ;Decoding parameter
                ;Low        = 100ms         is theoretically 3
                ;High       = 200ms         is theoretically 6
                ;Syncpause  = 1800-1900ms   is theoretically 54-57
                ;New second = 800-900ms     is theoretically 24-27
                PARAM_LOWHIGH       SET 5       ;Edge time < PARAM_LOWHIGH      = 0(Low),           >= PARAM_LOWHIGH    = 1(High)
                PARAM_SYNCPAUSE     SET 50      ;Edge time < PARAM_SYNCPAUSE    = New second/bit,   >= PARAM_SYNCPAUSE  = Syncpoint
                PARAM_SECOND        SET 20      ;Edge time < PARAM_SECOND       = New bit,          >= PARAM_SECOND     = New second
                PARAM_IGNORE        SET 2       ;Edge time < PARAM_IGNORE       = Signal interference (ignore)
                
                ;Variables
    8008 01     FLG_firstStart      DB  1   ;This flag indicates first start of library -> Ignore first edge
    8009 0000   FLG_dcfReceiver     DW  0   ;This flag is set to 1 if new input (rising edge) comes from the DCF77-Receiver
                                            ;FLG_dcfReceiver+1 is set to 1 if bit is ready for decoding
    800B 01     FLG_synced          DB  1   ;Sync flag -> 0 if synchron with dcf77
    800C 00     VAR_bitCount        DB  0   ;Timer Interrupt Counter
    800D 0000   VAR_bitCache        DW  0   ;Byte 0 = time value, Byte 1 = temp value
    800F 00     VAR_edgeCnt         DB  0   ;Edge counter
    8010 00     VAR_dataOK          DB  0   ;Parity check -> Bit 1 = Minutes OK, Bit 2 = Hours OK, Bit 3 = Date OK, Bit 4 = Meteo OK
                
                ;VAR_pSecond         DB  0   ;Pseudo second to bridge desynchronization
    8011 00     VAR_second          DB  0   ;DCF77-Second/Bit counter
                
                ;Time variables initialized with FFh to "lock" Get-functions until 2nd synchronization point reached
    8012 FF     VAR_minutes         DB  0FFh
    8013 FF     VAR_hours           DB  0FFh
                
    8014 FF     VAR_day             DB  0FFh
    8015 FF     VAR_weekday         DB  0FFh
    8016 FF     VAR_month           DB  0FFh
    8017 FF     VAR_year            DB  0FFh
                
    8018 00     VAR_dateParity      DB  0
                
                ;2x 82 Bit + 0 (Little endian)
    8019 000000 VAR_meteo1          DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ;Weather bits n
    801C 000000 
    801F 000000 
    8022 000000 
    8025 0000   
    8027 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ;Weather bits n+1
    802A 000000 
    802D 000000 
    8030 000000 
    8033 0000   
                                        ;******* Minute *******|********* Hour *********|********* Day **********|**** Month ****|*** WD **|******** Year *********|
    8035 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0
    8038 000000 
    803B 000000 
    803E 000000 
    8041 000000 
    8044 000000 
    8047 000000 
    804A 000000 
    804D 000000 
    8050 000000 
    8053 000000 
    8056 000000 
    8059 000000 
    805C 00     
    805D 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ;Weather bits n+2
    8060 000000 
    8063 000000 
    8066 000000 
    8069 000000 
                
    806C 000000 VAR_meteo2          DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    806F 000000 
    8072 000000 
    8075 000000 
    8078 0000   
    807A 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    807D 000000 
    8080 000000 
    8083 000000 
    8086 0000   
    8088 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0
    808B 000000 
    808E 000000 
    8091 000000 
    8094 000000 
    8097 000000 
    809A 000000 
    809D 000000 
    80A0 000000 
    80A3 000000 
    80A6 000000 
    80A9 000000 
    80AC 000000 
    80AF 00     
    80B0 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    80B3 000000 
    80B6 000000 
    80B9 000000 
    80BC 000000 
                
                ZP_meteoWrite       EQU 20h ;Write pointer for meteo data
                ZP_meteoRead        EQU 22h ;Read pointer for meteo data
    80BF 00     VAR_meteoCount1     DB  0 ;Weather bit counter (0-41)
    80C0 00     VAR_meteoCount2     DB  0 ;Time bit counter (42-81)
                
    80C1 00     VAR_tmpMinutes      DB  0
    80C2 00     VAR_tmpHours        DB  0
    80C3 00     VAR_tmpDay          DB  0
    80C4 00     VAR_tmpWeekday      DB  0
    80C5 00     VAR_tmpMonth        DB  0
    80C6 00     VAR_tmpYear         DB  0
    80C7 00     VAR_ledsDataOK      DB  0
                
    80C8 00     VAR_timerhandle     DB  0   ;Address of timer interrupt handle
                
                ;-------------------------------------;
                ; begin of assembly code
                
                codestart
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                ;[ASCII]
                
                disp__func
    80C9 E000      ORA #0
    80CB 183381    JNZ funcdispatch
    80CE 04        CLC
    80CF 1BD202    JSR (KERN_ISLOADED)
    80D2 2C        CLA
    80D3 17E080    JPC exit_lib
    80D6 1AE180    JSR initfunc
    80D9 20        TAX
    80DA 18E080    JNZ exit_lib
    80DD 11C202    JMP (KERN_EXITTSR)
                exit_lib
    80E0 1F        RTS
                
                ;[File: sl60dcf77_meteo.asm]
                ;--------------------------------------------------------- 
                ;Library handling  
                ;---------------------------------------------------------  
                
                ;Library initialization
                ;---------------------------------------------------------   
                initfunc
                
                ;Initialize Zeropointer
    80E1 3C20               FLG ZP_meteoWrite
    80E3 3C21               FLG ZP_meteoWrite+1
    80E5 3C22               FLG ZP_meteoRead
    80E7 3C23               FLG ZP_meteoRead+1
                
    80E9 6C1980             LPT #VAR_meteo1
    80EC 6F22               SPT ZP_meteoRead
    80EE 6C6C80             LPT #VAR_meteo2
    80F1 6F20               SPT ZP_meteoWrite
                
                ;Enable hardware interrupt (IRQ7)
    80F3 3007               LDA #HDW_INT
    80F5 6CEB81             LPT #int_dcf77
    80F8 1B2802             JSR (KERN_IC_SETVECTOR)
    80FB 1B2202             JSR (KERN_IC_ENABLEINT)
                
                ;Enable timer interrupt
    80FE 2C                 CLA    
    80FF 6C6182             LPT #int_timer
    8102 1B1203             JSR (KERN_MULTIPLEX)
    8105 42C880             STAA VAR_timerhandle  ;Save adress of timerhandle 
                
                ;Register idle function
    8108 05                 SEC
    8109 6C6B82             LPT #int_idle
    810C 1BEA02             JSR (KERN_SETIDLEFUNC)
                
                ;If sync display enabled clear LEDs 
    810F 2C                 CLA
    8110 1B0603             JSR (KERN_IOCHANGELED)
    8113 2C                 CLA
    8114 1F                 RTS
                
                ;Termination function
                ;---------------------------------------------------------                  
                termfunc  
                            ;Disable timer-interrupt
    8115 3001               LDA  #1
    8117 52C880             LDXA VAR_timerhandle      
    811A 1B1203             JSR (KERN_MULTIPLEX)
                            ;Disable hardware-interrupt
    811D 3007               LDA #HDW_INT
    811F 1B2402             JSR (KERN_IC_DISABLEINT)
                            ;Disable spinlock
    8122 04                 CLC
    8123 1BA802             JSR (KERN_SPINLOCK)
                            ;Disable idle function
    8126 04                 CLC
    8127 6C6B82             LPT #int_idle
    812A 1BEA02             JSR (KERN_SETIDLEFUNC)
                
                            ;Set LEDs to default
    812D 30FF               LDA #0FFh
    812F 1B0603             JSR (KERN_IOCHANGELED)
                
    8132 1F                 RTS
                
                ;Functiondispatch
                ;---------------------------------------------------------     
                funcdispatch
    8133 9B                 DEC
    8134 195A81             JPZ func_getSeconds     ;Function 01h  
    8137 9B                 DEC 
    8138 196681             JPZ func_getMinutes     ;Function 02h         
    813B 9B                 DEC 
    813C 197981             JPZ func_getHours       ;Function 03h 
    813F 9B                 DEC 
    8140 198C81             JPZ func_getDay         ;Function 04h   
    8143 9B                 DEC 
    8144 199F81             JPZ func_getWeekday     ;Function 05h       
    8147 9B                 DEC 
    8148 19B281             JPZ func_getMonth       ;Function 06h      
    814B 9B                 DEC 
    814C 19C581             JPZ func_getYear        ;Function 07h 
    814F 9B                 DEC 
    8150 19D881             JPZ func_getMeteoTime   ;Function 08h
    8153 9B                 DEC 
    8154 19E581             JPZ func_getEntryPoint  ;Function 09h
    8157 109586             JMP _failRTS
                
                ;Function '01h' = Get seconds (OUTPUT = Accu), Carry = 0 if successfull
                func_getSeconds
    815A 320B80             LDAA FLG_synced
    815D 189586             JNZ _failRTS
    8160 321180             LDAA VAR_second
    8163 109386             JMP _RTS
                
                ;Function '02h' = Get minutes (OUTPUT = Accu), Carry = 0 if successfull         
                func_getMinutes  
    8166 321080             LDAA VAR_dataOK
    8169 D001               AND #01h
    816B 199586             JPZ _failRTS
    816E 321280             LDAA VAR_minutes
    8171 70FF               CMP #0FFh
    8173 199586             JPZ _failRTS
    8176 109386             JMP _RTS
                
                ;Function '03h' = Get hours (OUTPUT = Accu), Carry = 0 if successfull 
                func_getHours
    8179 321080             LDAA VAR_dataOK
    817C D002               AND #02h
    817E 199586             JPZ _failRTS
    8181 321380             LDAA VAR_hours
    8184 70FF               CMP #0FFh
    8186 199586             JPZ _failRTS
    8189 109386             JMP _RTS        
                
                ;Function '04h' = Get day (OUTPUT = Accu), Carry = 0 if successfull 
                func_getDay
    818C 321080             LDAA VAR_dataOK
    818F D004               AND #04h
    8191 199586             JPZ _failRTS
    8194 321480             LDAA VAR_day
    8197 70FF               CMP #0FFh
    8199 199586             JPZ _failRTS
    819C 109386             JMP _RTS    
                
                ;Function '05h' = Get weekday (OUTPUT = Accu), Carry = 0 if successfull 
                ;1 = monday, 2 = tuesday, 3 = wednesday, 4 = thursday, 5 = friday, 6 = saturday, 7 = sunday
                func_getWeekday
    819F 321080             LDAA VAR_dataOK
    81A2 D004               AND #04h
    81A4 199586             JPZ _failRTS
    81A7 321580             LDAA VAR_weekday
    81AA 70FF               CMP #0FFh
    81AC 199586             JPZ _failRTS
    81AF 109386             JMP _RTS   
                
                ;Function '06h' = Get month (OUTPUT = Accu), Carry = 0 if successfull 
                func_getMonth
    81B2 321080             LDAA VAR_dataOK
    81B5 D004               AND #04h
    81B7 199586             JPZ _failRTS
    81BA 321680             LDAA VAR_month
    81BD 70FF               CMP #0FFh
    81BF 199586             JPZ _failRTS
    81C2 109386             JMP _RTS     
                
                ;Function '07h' = Get year (OUTPUT = Accu), Carry = 0 if successfull 
                func_getYear
    81C5 321080             LDAA VAR_dataOK
    81C8 D004               AND #04h
    81CA 199586             JPZ _failRTS
    81CD 321780             LDAA VAR_year
    81D0 70FF               CMP #0FFh
    81D2 199586             JPZ _failRTS
    81D5 109386             JMP _RTS
                
                ;Function '08h' = Get encoded METEO Information (X/Y = Pointer to string), Carry = 0 if successfull
                ;Bit 0-41 = meteotime (3 minutes)
                ;Bit 42-81 = time information (Minutes + Hours + Day + Month + Weekday + Year) without parity
                func_getMeteoTime
    81D8 321080             LDAA VAR_dataOK
    81DB D008               AND #08h
    81DD 199586             JPZ _failRTS
    81E0 5F22               LPT ZP_meteoRead
    81E2 109386             JMP _RTS
                
                ;Function '09h' = Get entrypoint of library         
                func_getEntryPoint
    81E5 6C3381             LPT #funcdispatch
    81E8 109386             JMP _RTS
                
                ;--------------------------------------------------------- 
                ;Interrupt routines   
                ;---------------------------------------------------------       
                
                ;BEGIN - Receiver interrupt
                ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    
                int_dcf77
                            ;First start?
    81EB 320880             LDAA FLG_firstStart
    81EE 19F581             JPZ _rInt0
    81F1 2F0880             STZA FLG_firstStart
    81F4 1F                 RTS
                
    81F5 3001   _rInt0      LDA #1 
    81F7 420980             STAA FLG_dcfReceiver ;Flank detected -> Set flag (Pause timer count)
    81FA 7D0F80             INCA VAR_edgeCnt ;Count edges (For signal error detection)
    81FD 320C80             LDAA VAR_bitCount
    8200 420D80 			STAA VAR_bitCache ;Move bitCounter to cache
    8203 2F0C80 			STZA VAR_bitCount
    8206 2F0980 			STZA FLG_dcfReceiver ;Resume timer count
                
    8209 320D80             LDAA VAR_bitCache ;Synchronize with signal -> Detect syncpoint/-gap
    820C 7032               CMP #PARAM_SYNCPAUSE  
    820E 161B82             JNC _rInt1
                            ;Time >= PARAM_SYNCPAUSE -> Time longer than 1 second
                            ;Syncpoint reached
    8211 2F0B80             STZA FLG_synced
    8214 2F1180             STZA VAR_second
    8217 2F0F80             STZA VAR_edgeCnt
                
                
    821A 1F     			RTS
                
                            ;Time < PARAM_SYNCPAUSE -> New second or bit information     
                            ;Count seconds, Check signal for errors   
    821B 320D80 _rInt1      LDAA VAR_bitCache
    821E 7002               CMP #PARAM_IGNORE
    8220 172782             JPC _rInt2
                            ;Interference detected
    8223 8D0F80             DECA VAR_edgeCnt
                
                ;DEBUG print interference            
                
    8226 1F     			RTS
                
                ;Time >= PARAM_IGNORE          
    8227 7014   _rInt2      CMP #PARAM_SECOND 
    8229 163082             JNC _rInt3
    822C 7D1180             INCA VAR_second ;Time >= PARAM_SECOND -> Next second
    822F 1F                 RTS
                
                ;Time < PARAM_SECOND -> New bit
    8230 320F80 _rInt3      LDAA VAR_edgeCnt ;First do signal checking -> Twice as many edges+1 as seconds?
    8233 05                 SEC
    8234 9001               SBC #1
    8236 B002               DIV #2
    8238 721180             CMPA VAR_second
    823B 195482             JPZ _rInt4 ;Check successfull -> Go forward to bit checking
                
                ;No longer synchronized        
                deSync  
    823E 3001               LDA #1 
    8240 420B80             STAA FLG_synced
    8243 2F1080             STZA VAR_dataOK
    8246 3008               LDA #08
    8248 42C780             STAA VAR_ledsDataOK
    824B 2F1180             STZA VAR_second
    824E 2FBF80             STZA VAR_meteoCount1
    8251 2FC080             STZA VAR_meteoCount2
                
                ;New bit -> Ready for decode   
    8254 320B80 _rInt4      LDAA FLG_synced
    8257 195B82             JPZ _rInt5 ;Only continue if synchronized		
                
                ;DEBUG print desynchronisation            
                
    825A 1F                 RTS
                
    825B 3001   _rInt5      LDA #1
    825D 420A80             STAA FLG_dcfReceiver+1
    8260 1F                 RTS
                
                ;END - Receiver interrupt
                ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                
                ;BEGIN - Timer interrupt 30.51757813 times per second
                ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
                int_timer
                            ;Measure time between two edges
    8261 320980             LDAA FLG_dcfReceiver
    8264 189386             JNZ _RTS       
    8267 7D0C80             INCA VAR_bitCount
    826A 1F                 RTS
                ;END - Timer interrupt
                ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                
                ;BEGIN - Idle function (Bit decoding)
                ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
                int_idle
    826B 320A80             LDAA FLG_dcfReceiver+1
    826E 199386             JPZ _RTS
    8271 2F0A80             STZA FLG_dcfReceiver+1 ;Get ready for new bit immediately
                ;--------------------------------------------------------- 
                ;DCF77 decoding   
                ;---------------------------------------------------------
                
                ;From this point no interrupt should break the programm
                            ;SEC
                            ;JSR (KERN_SPINLOCK) ;"You shall not pass"                       
                
                ;New bit received
                ;---------------------------------------------------------
                ;Display synced status on I/O-Module LEDs
    8274 1AE185             JSR syncDisp
                ;Display synced status on SCC-Board
                
                ;DEBUG print time measurement and bit information
                
    8277 321180 _nBit5      LDAA VAR_second
    827A 18C282             JNZ _nBit3
    827D 1A5486             JSR getBit
    8280 183E82             JNZ deSync ;If Bit 0 != 0 -> Not synchronized or incorrect signal
                
                ;Second/bit = 0 -> Take over data from last minute            
    8283 321080             LDAA VAR_dataOK
    8286 D001               AND #01h
    8288 199182             JPZ _nBit1
    828B 32C180             LDAA VAR_tmpMinutes ;Take over 'minutes'
    828E 421280             STAA VAR_minutes
    8291 321080 _nBit1      LDAA VAR_dataOK
    8294 D002               AND #02h
    8296 199F82             JPZ _nBit2
    8299 32C280             LDAA VAR_tmpHours ;Take over 'hours'
    829C 421380             STAA VAR_hours
    829F 321080 _nBit2      LDAA VAR_dataOK
    82A2 D004               AND #04h
    82A4 19D985             JPZ _decEnd
    82A7 32C480             LDAA VAR_tmpWeekday ;Take over 'weekday'
    82AA 421580             STAA VAR_weekday
    82AD 32C380             LDAA VAR_tmpDay ;Take over 'day'
    82B0 421480             STAA VAR_day
    82B3 32C580             LDAA VAR_tmpMonth ;Take over 'month'
    82B6 421680             STAA VAR_month
    82B9 32C680             LDAA VAR_tmpYear ;Take over 'year'
    82BC 421780             STAA VAR_year
    82BF 10D985             JMP _decEnd
                
                ;Bit > 0        
    82C2 7014   _nBit3      CMP #20
    82C4 18D082             JNZ _nBit4
    82C7 1A5486             JSR getBit ;Second/bit = 20 -> Begin of time information always '1'
    82CA 193E82             JPZ deSync ;If Bit 20 != 1 -> Not synchronized or incorrect signal
    82CD 10D985             JMP _decEnd
                
                ;Bit != 20 - Get/decode data
    82D0 321180 _nBit4      LDAA VAR_second
    82D3 700F               CMP #15
    82D5 160783             JNC getMeteo ;Go to meteo
                            ;Second >= 15
    82D8 7015               CMP #21
    82DA 16D985             JNC _decEnd ; Ignore bit 15-20
                            ;Second >= 21
    82DD 701D               CMP #29
    82DF 166583             JNC getMinutes ;Go to minute decoding
                            ;Second >= 29
    82E2 7024               CMP #36
    82E4 16E683             JNC getHours ;Go to hour decoding
                            ;Second >= 36
    82E7 702A               CMP #42
    82E9 166184             JNC getDay ;Go to day decoding
                            ;Second >= 42
    82EC 702D               CMP #45
    82EE 16BE84             JNC getWDay ;Go to weekday decoding
                            ;Second >= 45
    82F1 7032               CMP #50
    82F3 161785             JNC getMonth ;Go to month decoding
                            ;Second >= 50
    82F6 703B               CMP #59
    82F8 167185             JNC getYear ;Go to year decoding
                            ;Second >= 59
    82FB 18D985             JNZ _decEnd
                            ;Second = 59 -> Leap second!
    82FE 1A5486             JSR getBit ;Always '0'
    8301 183E82             JNZ deSync 
    8304 10D985             JMP _decEnd
                
                ;Get/decode meteotime
                ;---------------------------------------------------------
                getMeteo    
    8307 1A6681             JSR func_getMinutes
    830A 174083             JPC _gMet12 ;No minute data available -> Skip meteo section
    830D C003               MOD #3
    830F 194983             JPZ _gMet10 ;//Check for start minute -> = 0, 3, 6, 9, ...
                            ;Minute -> n+1 or n+2
    8312 32BF80             LDAA VAR_meteoCount1
    8315 700E               CMP #14
    8317 16D985             JNC _decEnd ;Previous data not complete
    831A 20     			TAX
    831B 1A6186             JSR getBitChar
    831E 4320               STA (ZP_meteoWrite),X
    8320 7DBF80             INCA VAR_meteoCount1        
    8323 21                 TXA
    8324 7029               CMP #41
    8326 18D985             JNZ _decEnd
                            ;Last bit received
    8329 2C                 CLA
    832A 5052               LDX #82
    832C 4320               STA (ZP_meteoWrite),X ;Terminate String with 0
    832E 3008               LDA #08h
    8330 E21080             ORAA VAR_dataOK
    8333 421080             STAA VAR_dataOK
    8336 5F22               LPT ZP_meteoRead ;Swap read and write register
    8338 7A                 PHR
    8339 5F20               LPT ZP_meteoWrite
    833B 6F22               SPT ZP_meteoRead
    833D 8A                 PLR
    833E 6F20               SPT ZP_meteoWrite
                
                ;DEBUG print meteo string
                
    8340 2FBF80 _gMet12     STZA VAR_meteoCount1 ;Reset bit counter
    8343 2FC080             STZA VAR_meteoCount2 ;Reset bit counter            
    8346 10D985             JMP _decEnd    
                
    8349 321180 _gMet10     LDAA VAR_second ;Start minute (0, 3, 6, 9, ...)
    834C 7001               CMP #1
    834E 185783             JNZ _gMet11 ;Bit > 1 -> Write to Array
    8351 2FBF80             STZA VAR_meteoCount1 ;First minute & first bit -> Reset bit counter
    8354 2FC080             STZA VAR_meteoCount2 ;First minute & first bit -> Reset bit counter
    8357 1A6186 _gMet11     JSR getBitChar
    835A 52BF80             LDXA VAR_meteoCount1
    835D 4320               STA (ZP_meteoWrite),X
    835F 7DBF80             INCA VAR_meteoCount1
    8362 10D985             JMP _decEnd        
                
                ;Get/decode minutes
                ;---------------------------------------------------------
                getMinutes   
    8365 701C               CMP #28
    8367 199F83             JPZ _gMet21 ;Last bit -> Check parity
    836A 7015               CMP #21
    836C 187F83             JNZ _gMet20
    836F 2F0E80             STZA VAR_bitCache+1    ;First bit -> Clear data
    8372 32BF80             LDAA VAR_meteoCount1
    8375 701C               CMP #28
    8377 189283             JNZ _gMin0 ;Previous meteo data not complete
    837A 302A               LDA #42
    837C 42C080             STAA VAR_meteoCount2
                
                ;*** Get meteo 1/2 ***
    837F 32BF80 _gMet20     LDAA VAR_meteoCount1
    8382 701C               CMP #28
    8384 189283             JNZ _gMin0 ;Previous meteo data not complete
    8387 1A6186             JSR getBitChar
    838A 52C080             LDXA VAR_meteoCount2
    838D 4320               STA (ZP_meteoWrite),X
    838F 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (minutes)
    8392 1A5486 _gMin0      JSR getBit
    8395 E20E80             ORAA VAR_bitCache+1
    8398 DB                 SHR
    8399 420E80             STAA VAR_bitCache+1
    839C 10D985             JMP _decEnd
                
                ;*** Get meteo 2/2 ***
    839F 32C080 _gMet21     LDAA VAR_meteoCount2
    83A2 7031               CMP #49
    83A4 18AF83             JNZ parityMinutes ;Previous meteo data not complete
    83A7 20     			TAX
    83A8 3030               LDA #'0'
    83AA 4320               STA (ZP_meteoWrite),X
    83AC 7DC080             INCA VAR_meteoCount2
                
                ;Last bit
                ;Check parity (minutes)        
                parityMinutes  
    83AF 1A5486             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    83B2 08                 PHA
                            ;Determine if bitcount of data is even or odd
    83B3 320E80             LDAA VAR_bitCache+1
    83B6 5007               LDX #7
    83B8 2E                 CLY
    83B9 1A6F86             JSR bitCnt
    83BC 17CE83             JPC _pMin0   
    83BF 0C                 PLA ;Bit count = "odd"
    83C0 18D283             JNZ _pMinOK
                
    83C3 300E   _pMinBAD    LDA #00Eh ;Parity n.OK
    83C5 D21080             ANDA VAR_dataOK
    83C8 421080             STAA VAR_dataOK
                
                ;DEBUG print minutes parity failure            
                
    83CB 10D985             JMP _decEnd
                
    83CE 0C     _pMin0      PLA ;Bit count = "even"
    83CF 18C383             JNZ _pMinBAD
                
    83D2 320E80 _pMinOK     LDAA VAR_bitCache+1
    83D5 1A8386             JSR bcdToDec
    83D8 42C180             STAA VAR_tmpMinutes
    83DB 3001               LDA #01h
    83DD E21080             ORAA VAR_dataOK
    83E0 421080             STAA VAR_dataOK
                
                ;DEBUG print minutes
    83E3 10D985             JMP _decEnd
                
                ;Get/decode hours
                ;---------------------------------------------------------
                getHours
    83E6 7023               CMP #35
    83E8 191384             JPZ _gMet31 ;Last bit -> Check parity
    83EB 701D               CMP #29
    83ED 18F383             JNZ _gMet30
    83F0 2F0E80             STZA VAR_bitCache+1
                
                ;*** Get meteo 1/2 ***
    83F3 32BF80 _gMet30     LDAA VAR_meteoCount1
    83F6 701C               CMP #28
    83F8 180684             JNZ _gHrs0 ;Previous meteo data not complete
    83FB 1A6186             JSR getBitChar
    83FE 52C080             LDXA VAR_meteoCount2
    8401 4320               STA (ZP_meteoWrite),X
    8403 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (hours)
    8406 1A5486 _gHrs0      JSR getBit
    8409 E20E80             ORAA VAR_bitCache+1
    840C DB                 SHR
    840D 420E80             STAA VAR_bitCache+1
    8410 10D985             JMP _decEnd
                
                ;*** Get meteo 2/2 ***
    8413 32C080 _gMet31     LDAA VAR_meteoCount2
    8416 7038               CMP #56
    8418 182784             JNZ parityHours ;Previous meteo data not complete
    841B 20     			TAX
    841C 3030               LDA #'0'
    841E 4320               STA (ZP_meteoWrite),X ; 1. '0'
    8420 7B                 INX
    8421 4320               STA (ZP_meteoWrite),X ; 2. '0'
    8423 7B     			INX
    8424 55C080             STXA VAR_meteoCount2
                
                ;Last bit
                ;Check parity (hours)         
                parityHours       
    8427 BD0E80             SHRA VAR_bitCache+1
    842A 1A5486             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    842D 08                 PHA
                            ;Determine if bitcount of data is even or odd
    842E 320E80             LDAA VAR_bitCache+1
    8431 5006               LDX #6
    8433 2E                 CLY
    8434 1A6F86             JSR bitCnt
    8437 174984             JPC _pHrs0   
    843A 0C                 PLA ;Bit count = "odd"
    843B 184D84             JNZ _pHrsOK
                
    843E 300D   _pHrsBAD    LDA #00Dh ;Parity n.OK
    8440 D21080             ANDA VAR_dataOK
    8443 421080             STAA VAR_dataOK
                
                ;DEBUG print hours parity failure            
                
    8446 10D985             JMP _decEnd
                
    8449 0C     _pHrs0      PLA ;Bit count = "even"
    844A 183E84             JNZ _pHrsBAD
                
    844D 320E80 _pHrsOK     LDAA VAR_bitCache+1
    8450 1A8386             JSR bcdToDec
    8453 42C280             STAA VAR_tmpHours
    8456 3002               LDA #02h
    8458 E21080             ORAA VAR_dataOK
    845B 421080             STAA VAR_dataOK
                
                ;DEBUG print hours
    845E 10D985             JMP _decEnd
                
                ;Get/decode day
                ;---------------------------------------------------------
                getDay  
    8461 7024               CMP #36 
    8463 186984             JNZ _gMet40
    8466 2F0E80             STZA VAR_bitCache+1
                
                ;*** Get meteo 1/2 ***
    8469 32BF80 _gMet40     LDAA VAR_meteoCount1
    846C 701C               CMP #28
    846E 187C84             JNZ _gDay0 ;Previous meteo data not complete
    8471 1A6186             JSR getBitChar
    8474 52C080             LDXA VAR_meteoCount2
    8477 4320               STA (ZP_meteoWrite),X
    8479 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (day)      
    847C 1A5486 _gDay0      JSR getBit
    847F E20E80             ORAA VAR_bitCache+1
    8482 DB                 SHR
    8483 420E80             STAA VAR_bitCache+1
                            ;Check for last bit
    8486 321180             LDAA VAR_second
    8489 7029               CMP #41       
    848B 18D985             JNZ _decEnd 
                
                ;*** Get meteo 2/2 ***
    848E 32C080             LDAA VAR_meteoCount2
    8491 7040               CMP #64
    8493 18A384             JNZ _gDay1 ;Previous meteo data not complete
    8496 20     			TAX
    8497 3030               LDA #'0'
    8499 4320               STA (ZP_meteoWrite),X ; 1. '0'
    849B 7B                 INX
    849C 4320               STA (ZP_meteoWrite),X ; 2. '0'
    849E 3047               LDA #71
    84A0 42C080             STAA VAR_meteoCount2          
                
                ;Last bit
    84A3 BD0E80 _gDay1      SHRA VAR_bitCache+1
                            ;Count high bits and add it to "VAR_dateParity"
    84A6 320E80             LDAA VAR_bitCache+1
    84A9 5006               LDX #6
    84AB 2E                 CLY
    84AC 1A6F86             JSR bitCnt
    84AF 421880             STAA VAR_dateParity
                            ;Save day value
    84B2 320E80             LDAA VAR_bitCache+1
    84B5 1A8386             JSR bcdToDec
    84B8 42C380             STAA VAR_tmpDay
                
                ;DEBUG print day
    84BB 10D985             JMP _decEnd        
                
                ;Get/decode weekday
                ;---------------------------------------------------------
                getWDay 
    84BE 702A               CMP #42
    84C0 18C684             JNZ _gMet50
    84C3 2F0E80             STZA VAR_bitCache+1
                
                ;*** Get meteo 1/2 ***
    84C6 32BF80 _gMet50     LDAA VAR_meteoCount1
    84C9 701C               CMP #28
    84CB 18D984             JNZ _getWDay0 ;Previous meteo data not complete
    84CE 1A6186             JSR getBitChar
    84D1 52C080             LDXA VAR_meteoCount2
    84D4 4320               STA (ZP_meteoWrite),X
    84D6 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (weekday)    
    84D9 1A5486 _getWDay0   JSR getBit
    84DC E20E80             ORAA VAR_bitCache+1
    84DF DB                 SHR
    84E0 420E80             STAA VAR_bitCache+1
                            ;Check for last bit
    84E3 321180             LDAA VAR_second
    84E6 702C               CMP #44       
    84E8 18D985             JNZ _decEnd
                
                ;*** Get meteo 2/2 ***
    84EB 32C080             LDAA VAR_meteoCount2
    84EE 704A               CMP #74
    84F0 18F884             JNZ _getWDay1 ;Previous meteo data not complete
    84F3 3042               LDA #66
    84F5 42C080             STAA VAR_meteoCount2
                
                ;Last bit
                            ;Shift data right by 4
    84F8 320E80 _getWDay1   LDAA VAR_bitCache+1
    84FB B010               DIV #10h
    84FD 420E80             STAA VAR_bitCache+1
                
                            ;Count high bits and add it to "VAR_dateParity"
    8500 5003               LDX #3
    8502 591880             LDYA VAR_dateParity
    8505 1A6F86             JSR bitCnt
    8508 421880             STAA VAR_dateParity
                            ;Save weekday value
    850B 320E80             LDAA VAR_bitCache+1
    850E 1A8386             JSR bcdToDec
    8511 42C480             STAA VAR_tmpWeekday
                
                ;DEBUG print weekday
                
    8514 10D985             JMP _decEnd  
                
                ;Get/decode month
                ;---------------------------------------------------------
                getMonth    
    8517 702D               CMP #45
    8519 181F85             JNZ _gMet60
    851C 2F0E80             STZA VAR_bitCache+1
                
                ;*** Get meteo ***
    851F 32BF80 _gMet60     LDAA VAR_meteoCount1
    8522 701C               CMP #28
    8524 183285             JNZ _gMon0 ;Previous meteo data not complete
    8527 1A6186             JSR getBitChar
    852A 52C080             LDXA VAR_meteoCount2
    852D 4320               STA (ZP_meteoWrite),X
    852F 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (month)
    8532 1A5486 _gMon0      JSR getBit
    8535 E20E80             ORAA VAR_bitCache+1
    8538 DB                 SHR
    8539 420E80             STAA VAR_bitCache+1            
                            ;Check for last bit
    853C 321180             LDAA VAR_second
    853F 7031               CMP #49       
    8541 18D985             JNZ _decEnd 
                
                ;*** Get meteo 2/2 ***
    8544 32C080             LDAA VAR_meteoCount2
    8547 7047               CMP #71
    8549 185185             JNZ _gMon1 ;Previous meteo data not complete
    854C 304A               LDA #74
    854E 42C080             STAA VAR_meteoCount2
                
                ;Last bit
                            ;Shift data right by 2
    8551 BD0E80 _gMon1      SHRA VAR_bitCache+1
    8554 BD0E80             SHRA VAR_bitCache+1
                
                            ;Count high bits and add it to "VAR_dateParity"
    8557 320E80             LDAA VAR_bitCache+1
    855A 5005               LDX #5
    855C 591880             LDYA VAR_dateParity
    855F 1A6F86             JSR bitCnt
    8562 421880             STAA VAR_dateParity
                            ;Save month value
    8565 320E80             LDAA VAR_bitCache+1
    8568 1A8386             JSR bcdToDec
    856B 42C580             STAA VAR_tmpMonth
                
                ;DEBUG print month
                
    856E 10D985             JMP _decEnd 
                
                ;Get/decode year
                ;---------------------------------------------------------
                getYear     
    8571 703A               CMP #58
    8573 19A085             JPZ parityDate ;Last bit -> Check parity
    8576 7032               CMP #50
    8578 187E85             JNZ _gMet70
    857B 2F0E80             STZA VAR_bitCache+1
                
                ;*** Get meteo ***
    857E 32BF80 _gMet70     LDAA VAR_meteoCount1
    8581 701C               CMP #28
    8583 189185             JNZ _gYear0 ;Previous data not complete
    8586 1A6186             JSR getBitChar
    8589 52C080             LDXA VAR_meteoCount2
    858C 4320               STA (ZP_meteoWrite),X
    858E 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (year)
    8591 BD0E80 _gYear0     SHRA VAR_bitCache+1
    8594 1A5486             JSR getBit
    8597 E20E80             ORAA VAR_bitCache+1
    859A 420E80             STAA VAR_bitCache+1
    859D 10D985             JMP _decEnd
                
                ;Last bit
                ;Check parity for whole date (Day, weekday, month, year)         
                parityDate
    85A0 1A5486             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    85A3 08                 PHA
                            ;Count high bits and add it to "VAR_dateParity"
                            ;Determine if bitcount of "VAR_dateParity" is even or odd
    85A4 320E80             LDAA VAR_bitCache+1
    85A7 5008               LDX #8
    85A9 591880             LDYA VAR_dateParity
    85AC 1A6F86             JSR bitCnt
    85AF 17C185             JPC _pDat0
    85B2 0C                 PLA ;Bit count = "odd" 
    85B3 18C585             JNZ _pDateOK
                
    85B6 300B   _pDateBAD   LDA #00Bh ;Partity n.OK
    85B8 D21080             ANDA VAR_dataOK
    85BB 421080             STAA VAR_dataOK
                
                ;DEBUG print hours parity failure            
                
    85BE 10D985             JMP _decEnd
                
    85C1 0C     _pDat0      PLA ;Bit count = "even"
    85C2 18B685             JNZ _pDateBAD
                
    85C5 320E80 _pDateOK    LDAA VAR_bitCache+1
    85C8 1A8386             JSR bcdToDec
    85CB 42C680             STAA VAR_tmpYear ;Save year value
    85CE 3004               LDA #04h
    85D0 E21080             ORAA VAR_dataOK
    85D3 421080             STAA VAR_dataOK
                
                ;DEBUG print year
                
    85D6 10D985             JMP _decEnd
                
                ;Decoding end
                ;---------------------------------------------------------
                ;Ready for next bit
    85D9 2F0D80 _decEnd     STZA VAR_bitCache
                            ;CLC
                            ;JSR (KERN_SPINLOCK) ;Enable the interrupts again
    85DC 1F                 RTS
                
                ;Interference detected -> continue            
    85DD 8D0F80 _decIgnore  DECA VAR_edgeCnt
                            ;CLC
                            ;JSR (KERN_SPINLOCK) ;Enable the interrupts again
                
                ;DEBUG print interference sign
    85E0 1F                 RTS
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on Multi-I/O LEDs   
                ;---------------------------------------------------------
                syncDisp
                ;Display synced status           
    85E1 320B80             LDAA FLG_synced
    85E4 19F285             JPZ _syncD0
    85E7 3008               LDA #08h 
    85E9 F2C780             EORA VAR_ledsDataOK
    85EC 42C780             STAA VAR_ledsDataOK
    85EF 104A86             JMP _syncD4
    85F2 3008   _syncD0     LDA #08h 
    85F4 E2C780             ORAA VAR_ledsDataOK
    85F7 42C780             STAA VAR_ledsDataOK
                
    85FA 321180             LDAA VAR_second
    85FD 7015               CMP #21
    85FF 164A86             JNC _syncD4 ;Second <21 -> No time information fetching
    8602 701D               CMP #29
    8604 161486             JNC _syncD1 ;Second >= 21 & <29 -> Fetching minutes
    8607 7024               CMP #36
    8609 162786             JNC _syncD2 ;Second >= 29 & < 36 -> Fetching hours
    860C 703B               CMP #59
    860E 163A86             JNC _syncD3 ;Second >= 36 & < 59 -> Fetching date
    8611 104A86             JMP _syncD4
                
                ;Fetching minutes
    8614 321080 _syncD1     LDAA VAR_dataOK
    8617 D001               AND #01h
    8619 184A86             JNZ _syncD4
    861C 3001               LDA #01h 
    861E F2C780             EORA VAR_ledsDataOK
    8621 42C780             STAA VAR_ledsDataOK
    8624 104A86             JMP _syncD4
                
                ;Fetching hours
    8627 321080 _syncD2     LDAA VAR_dataOK
    862A D002               AND #02h
    862C 184A86             JNZ _syncD4
    862F 3002               LDA #02h 
    8631 F2C780             EORA VAR_ledsDataOK
    8634 42C780             STAA VAR_ledsDataOK
    8637 104A86             JMP _syncD4
                
                ;Fetching date 
    863A 321080 _syncD3     LDAA VAR_dataOK
    863D D004               AND #04h
    863F 184A86             JNZ _syncD4
    8642 3004               LDA #04h 
    8644 F2C780             EORA VAR_ledsDataOK
    8647 42C780             STAA VAR_ledsDataOK
                
    864A 321080 _syncD4     LDAA VAR_dataOK
    864D E2C780             ORAA VAR_ledsDataOK
    8650 1B0603             JSR (KERN_IOCHANGELED)
    8653 1F                 RTS
                
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on SCC-Board   
                ;---------------------------------------------------------
                
                ;--------------------------------------------------------- 
                ;Helper functions   
                ;---------------------------------------------------------
                
                ;Get bit information from Time (Output: A = High(80h), Low(00h))        
                getBit      
    8654 320D80             LDAA VAR_bitCache
    8657 7005               CMP #PARAM_LOWHIGH
    8659 165F86             JNC _gBit0
                            ;Time >= PARAM_LOWHIGH -> Bit = 1
    865C 3080               LDA #80h
    865E 4D                 SKA
    865F 2C     _gBit0      CLA ;Time < PARAM_LOWHIGH -> Bit = 0
    8660 1F                 RTS
                
                ;Get bit information from Time as Char (Output: A = Char)        
                getBitChar      
    8661 320D80             LDAA VAR_bitCache
    8664 7005               CMP #PARAM_LOWHIGH
    8666 166C86             JNC _gBitC0
                            ;Time >= PARAM_LOWHIGH -> Bit = 1
    8669 3031               LDA #'1'
    866B 4E                 SKB
    866C 3030   _gBitC0     LDA #'0' ;Time < PARAM_LOWHIGH -> Bit = 0
    866E 1F                 RTS
                
                ;Count high bits
                ;Input: A = Byte, X = Number of bits, Y = Counter offset
                ;Output: A = Counter value, Carry = 0 -> odd, Carry = 1 -> even
                bitCnt
    866F DB     _bCnt0      SHR
    8670 167486             JNC _bCnt1
    8673 8B                 INY
    8674 496F86 _bCnt1      DXJP _bCnt0
    8677 29                 SAY
    8678 08                 PHA
    8679 C002               MOD #2
    867B 198086             JPZ _bCnt2
    867E 04                 CLC ;Counter value "odd"
    867F 4D                 SKA
    8680 05     _bCnt2      SEC ;Counter value "even"
    8681 0C                 PLA
    8682 1F                 RTS
                
                ;Convert BCD to decimal (Input: A = BCD value) (Output: A = decimal vlaue)      
                bcdToDec
    8683 08                 PHA
    8684 B010               DIV #10h
    8686 A00A               MUL #00Ah
    8688 420E80             STAA VAR_bitCache+1
    868B 0C                 PLA
    868C D00F               AND #00Fh
    868E 04                 CLC
    868F 820E80             ADCA VAR_bitCache+1
    8692 1F                 RTS
                
                _RTS    
    8693 04                 CLC
    8694 1F                 RTS
                
                _failRTS
    8695 2C                 CLA
    8696 05                 SEC
    8697 1F                 RTS
                
                


Segment Table:
**************
Segment Name                 Startaddr  Endaddr     Size  Type
=========================================================================
default                           8000     8697      698  CODE  fixed
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

No errors found.
