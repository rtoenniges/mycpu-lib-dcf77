                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                ;~~  [MyCA] Macro Cross Assembler V1.10 for MyCPU, (c) 2023 by Dennis Kuschel  ~~
                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                ;[File: sl60dcf77_meteo.asm]
                ;[ASCII]
                ;******************************************
                ;***********  DCF77 Library  **************
                ;******************************************
                ;***** by Robin TÃ¶nniges (2016-2024) ******
                ;******************************************
                
                ;[File: C:\Program Files (x86)\myca\include\sys.hsm]
                ;[ASCII]
                
                KERN_WARMSTART      EQU 0220h
                KERN_FILEINPUT      EQU 027Ah
                KERN_GETINFO        EQU 02A2h
                KERN_REGFILEDEVICE  EQU 0264h
                KERN_FSREGISTER     EQU 02AEh
                KERN_FSUNREGISTER   EQU 02B0h
                KERN_GETCHECKSUM16  EQU 02B2h
                KERN_SETMEMBORDERS  EQU 029Eh
                KERN_SETIDLEFUNC    EQU 02EAh
                KERN_IDLE           EQU 02ECh
                KERN_TESTVERSION    EQU 030Ch
                KERN_CONFIGBYTE     EQU 030Ah
                KERN_IDEDRIVER      EQU 030Eh
                KERN_MULTIPLEX      EQU 0312h
                KERN_PRGMOVE        EQU 032Ah
                
                ;[File: sl60dcf77_meteo.asm]
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                ;[ASCII]
                
                ;[File: C:\Program Files (x86)\myca\include\code.hsm]
                ;[ASCII]
                
                KERN_ADAPTOPCODES   EQU 02C4h
                KERN_EXECUTEFILE    EQU 02BEh
                KERN_EXITTSR        EQU 02C2h
                KERN_KILLPROGRAM    EQU 02C0h
                KERN_KILLPROGEX     EQU 0328h
                KERN_SPECROMCALL    EQU 02B6h
                KERN_CALLFROMROM    EQU 02B8h
                KERN_CALLROM        EQU 02BAh
                KERN_LIBCALL        EQU 02CAh
                KERN_LIBSELECT      EQU 02CCh
                KERN_LIBDESELECT    EQU 02CEh
                KERN_LIBUNLOAD      EQU 02D0h
                KERN_ISLOADED       EQU 02D2h
                KERN_ASSERT         EQU 0326h
                
                REG_ROMPAGE  SET 3900h
                
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                
                ORG 8000h
    8000 0280    DW 8002h
    8002 C780    DW disp__func
    8004 1381    DW termfunc
    8006 C780    DW codestart
                
                ;[File: sl60dcf77_meteo.asm]
                ;[File: C:\Program Files (x86)\myca\include\code.hsm]
                ;[ASCII]
                ;[File: sl60dcf77_meteo.asm]
                ;[File: C:\Program Files (x86)\myca\include\interrupt.hsm]
                ;[ASCII]
                
                KERN_IC_ENABLEINT   EQU 0222h
                KERN_IC_DISABLEINT  EQU 0224h
                KERN_IC_GETVECTOR   EQU 0226h
                KERN_IC_SETVECTOR   EQU 0228h
                KERN_IC_REGISTERBH  EQU 022Ah
                KERN_SPINLOCK       EQU 02A8h
                KERN_INTVECT        EQU 0332h
                
                KERN_INSDELTIMER    EQU 02AAh
                
                ;[File: sl60dcf77_meteo.asm]
                ;Comment this line out if you dont want synced status on Multi-I/O-LEDs
                ;Comment this line in if you use the SCC-Rack-Extension
                ;#DEFINE SCC_BOARD 
                ;Comment this line in if you want debug output
                ;#DEFINE DEBUG
                
                ;Debug Message
                ;Second[MeteoCount1|MeteoCount2]: BitLevel(PulseTime) {Additional comments}
                ;Example: 28[28|49]: H(6) Minute: 32
                
                
                ;-------------------------------------;
                ; declare variables
                
                ;Addresses
                HDW_INT             EQU 7       ;IRQ7
                
                
                KERN_IOCHANGELED    EQU 0306h   ;Kernel routine for changing the Multi-I/O-LEDs
                
                ;Decoding parameter
                ;Low        = 100ms         is theoretically 3
                ;High       = 200ms         is theoretically 6
                ;Syncpause  = 1800-1900ms   is theoretically 54-57
                ;New second = 800-900ms     is theoretically 24-27
                PARAM_LOWHIGH       SET 5       ;Edge time < PARAM_LOWHIGH      = 0(Low),           >= PARAM_LOWHIGH    = 1(High)
                PARAM_SYNCPAUSE     SET 50      ;Edge time < PARAM_SYNCPAUSE    = New second/bit,   >= PARAM_SYNCPAUSE  = Syncpoint
                PARAM_SECOND        SET 20      ;Edge time < PARAM_SECOND       = New bit,          >= PARAM_SECOND     = New second
                PARAM_IGNORE        SET 2       ;Edge time < PARAM_IGNORE       = Signal interference (ignore)
                
                ;Variables
    8008 01     FLG_firstStart      DB  1   ;This flag indicates first start of library -> Ignore first edge
    8009 00     FLG_dcfReceiver     DB  0   ;This flag is set to 1 if new input (rising edge) comes from the DCF77-Receiver
    800A 01     FLG_synced          DB  1   ;Sync flag -> 0 if synchron with dcf77
    800B 0000   VAR_bitData         DW  0   ;Byte 0 = time value, Byte 1 = temp value
    800D 00     VAR_edgeCnt         DB  0   ;Edge counter
    800E 00     VAR_dataOK          DB  0   ;Parity check -> Bit 1 = Minutes OK, Bit 2 = Hours OK, Bit 3 = Date OK, Bit 4 = Meteo OK
                
                ;VAR_pSecond         DB  0   ;Pseudo second to bridge desynchronization
    800F 00     VAR_second          DB  0   ;DCF77-Second/Bit counter
                
                ;Time variables initialized with FFh to "lock" Get-functions until 2nd synchronization point reached
    8010 FF     VAR_minutes         DB  0FFh
    8011 FF     VAR_hours           DB  0FFh
                
    8012 FF     VAR_day             DB  0FFh
    8013 FF     VAR_weekday         DB  0FFh
    8014 FF     VAR_month           DB  0FFh
    8015 FF     VAR_year            DB  0FFh
                
    8016 00     VAR_dateParity      DB  0
                
                ;2x 82 Bit + 0 (Little endian)
    8017 000000 VAR_meteo1          DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ;Weather bits n
    801A 000000 
    801D 000000 
    8020 000000 
    8023 0000   
    8025 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ;Weather bits n+1
    8028 000000 
    802B 000000 
    802E 000000 
    8031 0000   
                                        ;****** Minutes *******|******** Hours *********|********* Day **********|*** Month ****|*** WD **|******** Year *********|
    8033 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0
    8036 000000 
    8039 000000 
    803C 000000 
    803F 000000 
    8042 000000 
    8045 000000 
    8048 000000 
    804B 000000 
    804E 000000 
    8051 000000 
    8054 000000 
    8057 000000 
    805A 00     
    805B 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ;Weather bits n+2
    805E 000000 
    8061 000000 
    8064 000000 
    8067 000000 
                
    806A 000000 VAR_meteo2          DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    806D 000000 
    8070 000000 
    8073 000000 
    8076 0000   
    8078 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    807B 000000 
    807E 000000 
    8081 000000 
    8084 0000   
    8086 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0
    8089 000000 
    808C 000000 
    808F 000000 
    8092 000000 
    8095 000000 
    8098 000000 
    809B 000000 
    809E 000000 
    80A1 000000 
    80A4 000000 
    80A7 000000 
    80AA 000000 
    80AD 00     
    80AE 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    80B1 000000 
    80B4 000000 
    80B7 000000 
    80BA 000000 
                
                ZP_meteoWrite       EQU 20h ;Write pointer for meteo data
                ZP_meteoRead        EQU 22h ;Read pointer for meteo data
    80BD 00     VAR_meteoCount1     DB  0 ;Weather bit counter (0-41)
    80BE 00     VAR_meteoCount2     DB  0 ;Time bit counter (42-81)
                
    80BF 00     VAR_tmpMinutes      DB  0
    80C0 00     VAR_tmpHours        DB  0
    80C1 00     VAR_tmpDay          DB  0
    80C2 00     VAR_tmpWeekday      DB  0
    80C3 00     VAR_tmpMonth        DB  0
    80C4 00     VAR_tmpYear         DB  0
    80C5 00     VAR_ledsDataOK      DB  0
                
    80C6 00     VAR_timerhandle     DB  0   ;Address of timer interrupt handle
                
                ;-------------------------------------;
                ; begin of assembly code
                
                codestart
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                ;[ASCII]
                
                disp__func
    80C7 E000      ORA #0
    80C9 183181    JNZ funcdispatch
    80CC 04        CLC
    80CD 1BD202    JSR (KERN_ISLOADED)
    80D0 2C        CLA
    80D1 17DE80    JPC exit_lib
    80D4 1ADF80    JSR initfunc
    80D7 20        TAX
    80D8 18DE80    JNZ exit_lib
    80DB 11C202    JMP (KERN_EXITTSR)
                exit_lib
    80DE 1F        RTS
                
                ;[File: sl60dcf77_meteo.asm]
                ;--------------------------------------------------------- 
                ;Library handling  
                ;---------------------------------------------------------  
                
                ;Library initialization
                ;---------------------------------------------------------   
                initfunc
                
                ;Initialize Zeropointer
    80DF 3C20               FLG ZP_meteoWrite
    80E1 3C21               FLG ZP_meteoWrite+1
    80E3 3C22               FLG ZP_meteoRead
    80E5 3C23               FLG ZP_meteoRead+1
                
    80E7 6C1780             LPT #VAR_meteo1
    80EA 6F22               SPT ZP_meteoRead
    80EC 6C6A80             LPT #VAR_meteo2
    80EF 6F20               SPT ZP_meteoWrite
                
                ;Enable hardware interrupt (IRQ7)
    80F1 3007               LDA #HDW_INT
    80F3 6CE981             LPT #int_dcf77
    80F6 1B2802             JSR (KERN_IC_SETVECTOR)
    80F9 1B2202             JSR (KERN_IC_ENABLEINT)
                
                ;Enable timer interrupt
    80FC 2C                 CLA    
    80FD 6CF281             LPT #int_timer
    8100 1B1203             JSR (KERN_MULTIPLEX)
    8103 42C680             STAA VAR_timerhandle  ;Save adress of timerhandle 
                
                ;Register idle function
    8106 05                 SEC
    8107 6CFC81             LPT #int_idle
    810A 1BEA02             JSR (KERN_SETIDLEFUNC)
                
                ;If sync display enabled clear LEDs 
    810D 2C                 CLA
    810E 1B0603             JSR (KERN_IOCHANGELED)
    8111 2C                 CLA
    8112 1F                 RTS
                
                ;Termination function
                ;---------------------------------------------------------                  
                termfunc  
                            ;Disable timer-interrupt
    8113 3001               LDA  #1
    8115 52C680             LDXA VAR_timerhandle      
    8118 1B1203             JSR (KERN_MULTIPLEX)
                            ;Disable hardware-interrupt
    811B 3007               LDA #HDW_INT
    811D 1B2402             JSR (KERN_IC_DISABLEINT)
                            ;Disable spinlock
    8120 04                 CLC
    8121 1BA802             JSR (KERN_SPINLOCK)
                            ;Disable idle function
    8124 04                 CLC
    8125 6CFC81             LPT #int_idle
    8128 1BEA02             JSR (KERN_SETIDLEFUNC)
                
                            ;Set LEDs to default
    812B 30FF               LDA #0FFh
    812D 1B0603             JSR (KERN_IOCHANGELED)
                
    8130 1F                 RTS
                
                ;Functiondispatch
                ;---------------------------------------------------------     
                funcdispatch
    8131 9B                 DEC
    8132 195881             JPZ func_getSeconds     ;Function 01h  
    8135 9B                 DEC 
    8136 196481             JPZ func_getMinutes     ;Function 02h         
    8139 9B                 DEC 
    813A 197781             JPZ func_getHours       ;Function 03h 
    813D 9B                 DEC 
    813E 198A81             JPZ func_getDay         ;Function 04h   
    8141 9B                 DEC 
    8142 199D81             JPZ func_getWeekday     ;Function 05h       
    8145 9B                 DEC 
    8146 19B081             JPZ func_getMonth       ;Function 06h      
    8149 9B                 DEC 
    814A 19C381             JPZ func_getYear        ;Function 07h 
    814D 9B                 DEC 
    814E 19D681             JPZ func_getMeteoTime   ;Function 08h
    8151 9B                 DEC 
    8152 19E381             JPZ func_getEntryPoint  ;Function 09h
    8155 109886             JMP _failRTS
                
                ;Function '01h' = Get seconds (OUTPUT = Accu), Carry = 0 if successfull
                func_getSeconds
    8158 320A80             LDAA FLG_synced
    815B 189886             JNZ _failRTS
    815E 320F80             LDAA VAR_second
    8161 109686             JMP _RTS
                
                ;Function '02h' = Get minutes (OUTPUT = Accu), Carry = 0 if successfull         
                func_getMinutes  
    8164 320E80             LDAA VAR_dataOK
    8167 D001               AND #01h
    8169 199886             JPZ _failRTS
    816C 321080             LDAA VAR_minutes
    816F 70FF               CMP #0FFh
    8171 199886             JPZ _failRTS
    8174 109686             JMP _RTS
                
                ;Function '03h' = Get hours (OUTPUT = Accu), Carry = 0 if successfull 
                func_getHours
    8177 320E80             LDAA VAR_dataOK
    817A D002               AND #02h
    817C 199886             JPZ _failRTS
    817F 321180             LDAA VAR_hours
    8182 70FF               CMP #0FFh
    8184 199886             JPZ _failRTS
    8187 109686             JMP _RTS        
                
                ;Function '04h' = Get day (OUTPUT = Accu), Carry = 0 if successfull 
                func_getDay
    818A 320E80             LDAA VAR_dataOK
    818D D004               AND #04h
    818F 199886             JPZ _failRTS
    8192 321280             LDAA VAR_day
    8195 70FF               CMP #0FFh
    8197 199886             JPZ _failRTS
    819A 109686             JMP _RTS    
                
                ;Function '05h' = Get weekday (OUTPUT = Accu), Carry = 0 if successfull 
                ;1 = monday, 2 = tuesday, 3 = wednesday, 4 = thursday, 5 = friday, 6 = saturday, 7 = sunday
                func_getWeekday
    819D 320E80             LDAA VAR_dataOK
    81A0 D004               AND #04h
    81A2 199886             JPZ _failRTS
    81A5 321380             LDAA VAR_weekday
    81A8 70FF               CMP #0FFh
    81AA 199886             JPZ _failRTS
    81AD 109686             JMP _RTS   
                
                ;Function '06h' = Get month (OUTPUT = Accu), Carry = 0 if successfull 
                func_getMonth
    81B0 320E80             LDAA VAR_dataOK
    81B3 D004               AND #04h
    81B5 199886             JPZ _failRTS
    81B8 321480             LDAA VAR_month
    81BB 70FF               CMP #0FFh
    81BD 199886             JPZ _failRTS
    81C0 109686             JMP _RTS     
                
                ;Function '07h' = Get year (OUTPUT = Accu), Carry = 0 if successfull 
                func_getYear
    81C3 320E80             LDAA VAR_dataOK
    81C6 D004               AND #04h
    81C8 199886             JPZ _failRTS
    81CB 321580             LDAA VAR_year
    81CE 70FF               CMP #0FFh
    81D0 199886             JPZ _failRTS
    81D3 109686             JMP _RTS
                
                ;Function '08h' = Get encoded METEO Information (X/Y = Pointer to string), Carry = 0 if successfull
                ;Bit 0-41 = meteotime (3 minutes)
                ;Bit 42-81 = time information (Minutes + Hours + Day + Month + Weekday + Year) without parity
                func_getMeteoTime
    81D6 320E80             LDAA VAR_dataOK
    81D9 D008               AND #08h
    81DB 199886             JPZ _failRTS
    81DE 5F22               LPT ZP_meteoRead
    81E0 109686             JMP _RTS
                
                ;Function '09h' = Get entrypoint of library         
                func_getEntryPoint
    81E3 6C3181             LPT #funcdispatch
    81E6 109686             JMP _RTS
                
                ;--------------------------------------------------------- 
                ;Interrupt routines   
                ;---------------------------------------------------------       
                
                ;Receiver interrupt        
                int_dcf77
    81E9 3001               LDA #1 
    81EB 420980             STAA FLG_dcfReceiver ;Flank detected -> Set flag
    81EE 7D0D80             INCA VAR_edgeCnt ;Count edges (For signal error detection)
    81F1 1F                 RTS       
                
                ;Timer interrupt 30.51757813 times per second
                int_timer
                            ;Measure time between two edges
    81F2 320980             LDAA FLG_dcfReceiver
    81F5 189686             JNZ _RTS       
    81F8 7D0B80             INCA VAR_bitData
    81FB 1F                 RTS
                
                ;Idle function
                int_idle
    81FC 320980             LDAA FLG_dcfReceiver
    81FF 199686             JPZ _RTS            
                
                ;--------------------------------------------------------- 
                ;DCF77 decoding   
                ;---------------------------------------------------------
                
                ;From this point no interrupt should break the programm
    8202 05                 SEC
    8203 1BA802             JSR (KERN_SPINLOCK) ;"You shall not pass"           
                
                ;First start?
    8206 320880             LDAA FLG_firstStart
    8209 191582             JPZ _dec0
    820C 8D0D80             DECA VAR_edgeCnt
    820F 2F0880             STZA FLG_firstStart
    8212 10CE85             JMP _decEnd
                
                ;Synchronize with signal -> Detect syncpoint/-gap
    8215 320B80 _dec0       LDAA VAR_bitData
    8218 7032               CMP #PARAM_SYNCPAUSE  
    821A 162982             JNC _dec1
                ;Time >= PARAM_SYNCPAUSE -> Time longer than 1 second
                ;Syncpoint reached
    821D 2F0A80             STZA FLG_synced
    8220 2F0F80             STZA VAR_second
    8223 2F0D80             STZA VAR_edgeCnt
                
    8226 10CE85             JMP _decEnd
                
                ;Time < PARAM_SYNCPAUSE -> New second or bit information     
                ;Count seconds, Check signal for errors   
    8229 7002   _dec1       CMP #PARAM_IGNORE
    822B 173182             JPC _dec2
                            ;Interference detected
    822E 10D985             JMP _decIgnore
                
    8231 7014   _dec2       CMP #PARAM_SECOND 
    8233 163C82             JNC newBit
    8236 7D0F80             INCA VAR_second ;Time >= PARAM_SECOND -> Next second
    8239 10CE85             JMP _decEnd
                
                ;New bit received
                ;---------------------------------------------------------
                newBit ;Time < PARAM_SECOND -> New bit 
                
                ;Display synced status on I/O-Module LEDs
    823C 1AE485             JSR syncDisp
                ;Display synced status on SCC-Board
                
                ;DEBUG print time measurement and bit information
                
                ;First do signal checking -> Twice as many edges+1 as seconds?
    823F 320D80             LDAA VAR_edgeCnt
    8242 05                 SEC
    8243 9001               SBC #1
    8245 B002               DIV #2
    8247 720F80             CMPA VAR_second
    824A 196382             JPZ _nBit0 ;Check successfull -> Go forward to bit checking
                
                ;No longer synchronized        
                deSync  
    824D 3001               LDA #1 
    824F 420A80             STAA FLG_synced
    8252 2F0E80             STZ VAR_dataOK
    8255 3008               LDA #08
    8257 42C580             STAA VAR_ledsDataOK
    825A 2F0F80             STZA VAR_second
    825D 2FBD80             STZA VAR_meteoCount1
    8260 2FBE80             STZA VAR_meteoCount2
                            ;JMP _decEnd
                
                ;Decode bit     
    8263 320A80 _nBit0      LDAA FLG_synced
    8266 196C82             JPZ _nBit5 ;Only continue if synchronized
                
                ;DEBUG print desynchronisation            
                
    8269 10CE85             JMP _decEnd
                
    826C 320F80 _nBit5      LDAA VAR_second
    826F 18B782             JNZ _nBit3
    8272 1A5786             JSR getBit
    8275 184D82             JNZ deSync ;If Bit 0 != 0 -> Not synchronized or incorrect signal
                
                ;Second/bit = 0 -> Take over data from last minute            
    8278 320E80             LDAA VAR_dataOK
    827B D001               AND #01h
    827D 198682             JPZ _nBit1
    8280 32BF80             LDAA VAR_tmpMinutes ;Take over 'minutes'
    8283 421080             STAA VAR_minutes
    8286 320E80 _nBit1      LDAA VAR_dataOK
    8289 D002               AND #02h
    828B 199482             JPZ _nBit2
    828E 32C080             LDAA VAR_tmpHours ;Take over 'hours'
    8291 421180             STAA VAR_hours
    8294 320E80 _nBit2      LDAA VAR_dataOK
    8297 D004               AND #04h
    8299 19CE85             JPZ _decEnd
    829C 32C280             LDAA VAR_tmpWeekday ;Take over 'weekday'
    829F 421380             STAA VAR_weekday
    82A2 32C180             LDAA VAR_tmpDay ;Take over 'day'
    82A5 421280             STAA VAR_day
    82A8 32C380             LDAA VAR_tmpMonth ;Take over 'month'
    82AB 421480             STAA VAR_month
    82AE 32C480             LDAA VAR_tmpYear ;Take over 'year'
    82B1 421580             STAA VAR_year
    82B4 10CE85             JMP _decEnd
                
                ;Bit > 0        
    82B7 7014   _nBit3      CMP #20
    82B9 18C582             JNZ _nBit4
    82BC 1A5786             JSR getBit ;Second/bit = 20 -> Begin of time information always '1'
    82BF 194D82             JPZ deSync ;If Bit 20 != 1 -> Not synchronized or incorrect signal
    82C2 10CE85             JMP _decEnd
                
                ;Bit != 20 - Get/decode data
    82C5 320F80 _nBit4      LDAA VAR_second
    82C8 700F               CMP #15
    82CA 16FC82             JNC getMeteo ;Go to meteo
                            ;Second >= 15
    82CD 7015               CMP #21
    82CF 16CE85             JNC _decEnd ; Ignore bit 15-20
                            ;Second >= 21
    82D2 701D               CMP #29
    82D4 165A83             JNC getMinutes ;Go to minute decoding
                            ;Second >= 29
    82D7 7024               CMP #36
    82D9 16DB83             JNC getHours ;Go to hour decoding
                            ;Second >= 36
    82DC 702A               CMP #42
    82DE 165684             JNC getDay ;Go to day decoding
                            ;Second >= 42
    82E1 702D               CMP #45
    82E3 16B384             JNC getWDay ;Go to weekday decoding
                            ;Second >= 45
    82E6 7032               CMP #50
    82E8 160C85             JNC getMonth ;Go to month decoding
                            ;Second >= 50
    82EB 703B               CMP #59
    82ED 166685             JNC getYear ;Go to year decoding
                            ;Second >= 59
    82F0 18CE85             JNZ _decEnd
                            ;Second = 59 -> Leap second!
    82F3 1A5786             JSR getBit ;Always '0'
    82F6 184D82             JNZ deSync 
    82F9 10CE85             JMP _decEnd
                
                ;Get/decode meteotime
                ;---------------------------------------------------------
                getMeteo    
    82FC 1A6481             JSR func_getMinutes
    82FF 173583             JPC _gMet12 ;No minute data available -> Skip meteo section
    8302 C003               MOD #3
    8304 193E83             JPZ _gMet10 ;//Check for start minute -> = 0, 3, 6, 9, ...
                            ;Minute -> n+1 or n+2
    8307 32BD80             LDAA VAR_meteoCount1
    830A 700E               CMP #14
    830C 16CE85             JNC _decEnd ;Previous data not complete
    830F 20     			TAX
    8310 1A6486             JSR getBitChar
    8313 4320               STA (ZP_meteoWrite),X
    8315 7DBD80             INCA VAR_meteoCount1        
    8318 21                 TXA
    8319 7029               CMP #41
    831B 18CE85             JNZ _decEnd
                            ;Last bit received
    831E 2C                 CLA
    831F 5052               LDX #82
    8321 4320               STA (ZP_meteoWrite),X ;Terminate String with 0
    8323 3008               LDA #08h
    8325 E20E80             ORAA VAR_dataOK
    8328 420E80             STAA VAR_dataOK
    832B 5F22               LPT ZP_meteoRead ;Swap read and write register
    832D 7A                 PHR
    832E 5F20               LPT ZP_meteoWrite
    8330 6F22               SPT ZP_meteoRead
    8332 8A                 PLR
    8333 6F20               SPT ZP_meteoWrite
                
                ;DEBUG print meteo string
                
    8335 2FBD80 _gMet12     STZA VAR_meteoCount1 ;Reset bit counter
    8338 2FBE80             STZA VAR_meteoCount2 ;Reset bit counter            
    833B 10CE85             JMP _decEnd    
                
    833E 320F80 _gMet10     LDAA VAR_second ;Start minute (0, 3, 6, 9, ...)
    8341 7001               CMP #1
    8343 184C83             JNZ _gMet11 ;Bit > 1 -> Write to Array
    8346 2FBD80             STZA VAR_meteoCount1 ;First minute & first bit -> Reset bit counter
    8349 2FBE80             STZA VAR_meteoCount2 ;First minute & first bit -> Reset bit counter
    834C 1A6486 _gMet11     JSR getBitChar
    834F 52BD80             LDXA VAR_meteoCount1
    8352 4320               STA (ZP_meteoWrite),X
    8354 7DBD80             INCA VAR_meteoCount1
    8357 10CE85             JMP _decEnd        
                
                ;Get/decode minutes
                ;---------------------------------------------------------
                getMinutes   
    835A 701C               CMP #28
    835C 199483             JPZ _gMet21 ;Last bit -> Check parity
    835F 7015               CMP #21
    8361 187483             JNZ _gMet20
    8364 2F0C80             STZA VAR_bitData+1    ;First bit -> Clear data
    8367 32BD80             LDAA VAR_meteoCount1
    836A 701C               CMP #28
    836C 188783             JNZ _gMin0 ;Previous meteo data not complete
    836F 302A               LDA #42
    8371 42BE80             STAA VAR_meteoCount2
                
                ;*** Get meteo 1/2 ***
    8374 32BD80 _gMet20     LDAA VAR_meteoCount1
    8377 701C               CMP #28
    8379 188783             JNZ _gMin0 ;Previous meteo data not complete
    837C 1A6486             JSR getBitChar
    837F 52BE80             LDXA VAR_meteoCount2
    8382 4320               STA (ZP_meteoWrite),X
    8384 7DBE80             INCA VAR_meteoCount2
                
                ;Get bit (minutes)
    8387 1A5786 _gMin0      JSR getBit
    838A E20C80             ORAA VAR_bitData+1
    838D DB                 SHR
    838E 420C80             STAA VAR_bitData+1
    8391 10CE85             JMP _decEnd
                
                ;*** Get meteo 2/2 ***
    8394 32BE80 _gMet21     LDAA VAR_meteoCount2
    8397 7031               CMP #49
    8399 18A483             JNZ parityMinutes ;Previous meteo data not complete
    839C 20     			TAX
    839D 3030               LDA #'0'
    839F 4320               STA (ZP_meteoWrite),X
    83A1 7DBE80             INCA VAR_meteoCount2
                
                ;Last bit
                ;Check parity (minutes)        
                parityMinutes  
    83A4 1A5786             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    83A7 08                 PHA
                            ;Determine if bitcount of data is even or odd
    83A8 320C80             LDAA VAR_bitData+1
    83AB 5007               LDX #7
    83AD 2E                 CLY
    83AE 1A7286             JSR bitCnt
    83B1 17C383             JPC _pMin0   
    83B4 0C                 PLA ;Bit count = "odd"
    83B5 18C783             JNZ _pMinOK
                
    83B8 300E   _pMinBAD    LDA #00Eh ;Parity n.OK
    83BA D20E80             ANDA VAR_dataOK
    83BD 420E80             STAA VAR_dataOK
                
                ;DEBUG print minutes parity failure            
                
    83C0 10CE85             JMP _decEnd
                
    83C3 0C     _pMin0      PLA ;Bit count = "even"
    83C4 18B883             JNZ _pMinBAD
                
    83C7 320C80 _pMinOK     LDAA VAR_bitData+1
    83CA 1A8686             JSR bcdToDec
    83CD 42BF80             STAA VAR_tmpMinutes
    83D0 3001               LDA #01h
    83D2 E20E80             ORAA VAR_dataOK
    83D5 420E80             STAA VAR_dataOK
                
                ;DEBUG print minutes
    83D8 10CE85             JMP _decEnd
                
                ;Get/decode hours
                ;---------------------------------------------------------
                getHours
    83DB 7023               CMP #35
    83DD 190884             JPZ _gMet31 ;Last bit -> Check parity
    83E0 701D               CMP #29
    83E2 18E883             JNZ _gMet30
    83E5 2F0C80             STZA VAR_bitData+1
                
                ;*** Get meteo 1/2 ***
    83E8 32BD80 _gMet30     LDAA VAR_meteoCount1
    83EB 701C               CMP #28
    83ED 18FB83             JNZ _gHrs0 ;Previous meteo data not complete
    83F0 1A6486             JSR getBitChar
    83F3 52BE80             LDXA VAR_meteoCount2
    83F6 4320               STA (ZP_meteoWrite),X
    83F8 7DBE80             INCA VAR_meteoCount2
                
                ;Get bit (hours)
    83FB 1A5786 _gHrs0      JSR getBit
    83FE E20C80             ORAA VAR_bitData+1
    8401 DB                 SHR
    8402 420C80             STAA VAR_bitData+1
    8405 10CE85             JMP _decEnd
                
                ;*** Get meteo 2/2 ***
    8408 32BE80 _gMet31     LDAA VAR_meteoCount2
    840B 7038               CMP #56
    840D 181C84             JNZ parityHours ;Previous meteo data not complete
    8410 20     			TAX
    8411 3030               LDA #'0'
    8413 4320               STA (ZP_meteoWrite),X ; 1. '0'
    8415 7B                 INX
    8416 4320               STA (ZP_meteoWrite),X ; 2. '0'
    8418 7B     			INX
    8419 55BE80             STXA VAR_meteoCount2
                
                ;Last bit
                ;Check parity (hours)         
                parityHours       
    841C BD0C80             SHRA VAR_bitData+1
    841F 1A5786             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    8422 08                 PHA
                            ;Determine if bitcount of data is even or odd
    8423 320C80             LDAA VAR_bitData+1
    8426 5006               LDX #6
    8428 2E                 CLY
    8429 1A7286             JSR bitCnt
    842C 173E84             JPC _pHrs0   
    842F 0C                 PLA ;Bit count = "odd"
    8430 184284             JNZ _pHrsOK
                
    8433 300D   _pHrsBAD    LDA #00Dh ;Parity n.OK
    8435 D20E80             ANDA VAR_dataOK
    8438 420E80             STAA VAR_dataOK
                
                ;DEBUG print hours parity failure            
                
    843B 10CE85             JMP _decEnd
                
    843E 0C     _pHrs0      PLA ;Bit count = "even"
    843F 183384             JNZ _pHrsBAD
                
    8442 320C80 _pHrsOK     LDAA VAR_bitData+1
    8445 1A8686             JSR bcdToDec
    8448 42C080             STAA VAR_tmpHours
    844B 3002               LDA #02h
    844D E20E80             ORAA VAR_dataOK
    8450 420E80             STAA VAR_dataOK
                
                ;DEBUG print hours
    8453 10CE85             JMP _decEnd
                
                ;Get/decode day
                ;---------------------------------------------------------
                getDay  
    8456 7024               CMP #36 
    8458 185E84             JNZ _gMet40
    845B 2F0C80             STZA VAR_bitData+1
                
                ;*** Get meteo 1/2 ***
    845E 32BD80 _gMet40     LDAA VAR_meteoCount1
    8461 701C               CMP #28
    8463 187184             JNZ _gDay0 ;Previous meteo data not complete
    8466 1A6486             JSR getBitChar
    8469 52BE80             LDXA VAR_meteoCount2
    846C 4320               STA (ZP_meteoWrite),X
    846E 7DBE80             INCA VAR_meteoCount2
                
                ;Get bit (day)      
    8471 1A5786 _gDay0      JSR getBit
    8474 E20C80             ORAA VAR_bitData+1
    8477 DB                 SHR
    8478 420C80             STAA VAR_bitData+1
                            ;Check for last bit
    847B 320F80             LDAA VAR_second
    847E 7029               CMP #41       
    8480 18CE85             JNZ _decEnd 
                
                ;*** Get meteo 2/2 ***
    8483 32BE80             LDAA VAR_meteoCount2
    8486 7040               CMP #64
    8488 189884             JNZ _gDay1 ;Previous meteo data not complete
    848B 20     			TAX
    848C 3030               LDA #'0'
    848E 4320               STA (ZP_meteoWrite),X ; 1. '0'
    8490 7B                 INX
    8491 4320               STA (ZP_meteoWrite),X ; 2. '0'
    8493 3047               LDA #71
    8495 42BE80             STAA VAR_meteoCount2          
                
                ;Last bit
    8498 BD0C80 _gDay1      SHRA VAR_bitData+1
                            ;Count high bits and add it to "VAR_dateParity"
    849B 320C80             LDAA VAR_bitData+1
    849E 5006               LDX #6
    84A0 2E                 CLY
    84A1 1A7286             JSR bitCnt
    84A4 421680             STAA VAR_dateParity
                            ;Save day value
    84A7 320C80             LDAA VAR_bitData+1
    84AA 1A8686             JSR bcdToDec
    84AD 42C180             STAA VAR_tmpDay
                
                ;DEBUG print day
    84B0 10CE85             JMP _decEnd        
                
                ;Get/decode weekday
                ;---------------------------------------------------------
                getWDay 
    84B3 702A               CMP #42
    84B5 18BB84             JNZ _gMet50
    84B8 2F0C80             STZA VAR_bitData+1
                
                ;*** Get meteo 1/2 ***
    84BB 32BD80 _gMet50     LDAA VAR_meteoCount1
    84BE 701C               CMP #28
    84C0 18CE84             JNZ _getWDay0 ;Previous meteo data not complete
    84C3 1A6486             JSR getBitChar
    84C6 52BE80             LDXA VAR_meteoCount2
    84C9 4320               STA (ZP_meteoWrite),X
    84CB 7DBE80             INCA VAR_meteoCount2
                
                ;Get bit (weekday)    
    84CE 1A5786 _getWDay0   JSR getBit
    84D1 E20C80             ORAA VAR_bitData+1
    84D4 DB                 SHR
    84D5 420C80             STAA VAR_bitData+1
                            ;Check for last bit
    84D8 320F80             LDAA VAR_second
    84DB 702C               CMP #44       
    84DD 18CE85             JNZ _decEnd
                
                ;*** Get meteo 2/2 ***
    84E0 32BE80             LDAA VAR_meteoCount2
    84E3 704A               CMP #74
    84E5 18ED84             JNZ _getWDay1 ;Previous meteo data not complete
    84E8 3042               LDA #66
    84EA 42BE80             STAA VAR_meteoCount2
                
                ;Last bit
                            ;Shift data right by 4
    84ED 320C80 _getWDay1   LDAA VAR_bitData+1
    84F0 B010               DIV #10h
    84F2 420C80             STAA VAR_bitData+1
                
                            ;Count high bits and add it to "VAR_dateParity"
    84F5 5003               LDX #3
    84F7 591680             LDYA VAR_dateParity
    84FA 1A7286             JSR bitCnt
    84FD 421680             STAA VAR_dateParity
                            ;Save weekday value
    8500 320C80             LDAA VAR_bitData+1
    8503 1A8686             JSR bcdToDec
    8506 42C280             STAA VAR_tmpWeekday
                
                ;DEBUG print weekday
                
    8509 10CE85             JMP _decEnd  
                
                ;Get/decode month
                ;---------------------------------------------------------
                getMonth    
    850C 702D               CMP #45
    850E 181485             JNZ _gMet60
    8511 2F0C80             STZA VAR_bitData+1
                
                ;*** Get meteo ***
    8514 32BD80 _gMet60     LDAA VAR_meteoCount1
    8517 701C               CMP #28
    8519 182785             JNZ _gMon0 ;Previous meteo data not complete
    851C 1A6486             JSR getBitChar
    851F 52BE80             LDXA VAR_meteoCount2
    8522 4320               STA (ZP_meteoWrite),X
    8524 7DBE80             INCA VAR_meteoCount2
                
                ;Get bit (month)
    8527 1A5786 _gMon0      JSR getBit
    852A E20C80             ORAA VAR_bitData+1
    852D DB                 SHR
    852E 420C80             STAA VAR_bitData+1            
                            ;Check for last bit
    8531 320F80             LDAA VAR_second
    8534 7031               CMP #49       
    8536 18CE85             JNZ _decEnd 
                
                ;*** Get meteo 2/2 ***
    8539 32BE80             LDAA VAR_meteoCount2
    853C 7047               CMP #71
    853E 184685             JNZ _gMon1 ;Previous meteo data not complete
    8541 304A               LDA #74
    8543 42BE80             STAA VAR_meteoCount2
                
                ;Last bit
                            ;Shift data right by 2
    8546 BD0C80 _gMon1      SHRA VAR_bitData+1
    8549 BD0C80             SHRA VAR_bitData+1
                
                            ;Count high bits and add it to "VAR_dateParity"
    854C 320C80             LDAA VAR_bitData+1
    854F 5005               LDX #5
    8551 591680             LDYA VAR_dateParity
    8554 1A7286             JSR bitCnt
    8557 421680             STAA VAR_dateParity
                            ;Save month value
    855A 320C80             LDAA VAR_bitData+1
    855D 1A8686             JSR bcdToDec
    8560 42C380             STAA VAR_tmpMonth
                
                ;DEBUG print month
                
    8563 10CE85             JMP _decEnd 
                
                ;Get/decode year
                ;---------------------------------------------------------
                getYear     
    8566 703A               CMP #58
    8568 199585             JPZ parityDate ;Last bit -> Check parity
    856B 7032               CMP #50
    856D 187385             JNZ _gMet70
    8570 2F0C80             STZA VAR_bitData+1
                
                ;*** Get meteo ***
    8573 32BD80 _gMet70     LDAA VAR_meteoCount1
    8576 701C               CMP #28
    8578 188685             JNZ _gYear0 ;Previous data not complete
    857B 1A6486             JSR getBitChar
    857E 52BE80             LDXA VAR_meteoCount2
    8581 4320               STA (ZP_meteoWrite),X
    8583 7DBE80             INCA VAR_meteoCount2
                
                ;Get bit (year)
    8586 BD0C80 _gYear0     SHRA VAR_bitData+1
    8589 1A5786             JSR getBit
    858C E20C80             ORAA VAR_bitData+1
    858F 420C80             STAA VAR_bitData+1
    8592 10CE85             JMP _decEnd
                
                ;Last bit
                ;Check parity for whole date (Day, weekday, month, year)         
                parityDate
    8595 1A5786             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    8598 08                 PHA
                            ;Count high bits and add it to "VAR_dateParity"
                            ;Determine if bitcount of "VAR_dateParity" is even or odd
    8599 320C80             LDAA VAR_bitData+1
    859C 5008               LDX #8
    859E 591680             LDYA VAR_dateParity
    85A1 1A7286             JSR bitCnt
    85A4 17B685             JPC _pDat0
    85A7 0C                 PLA ;Bit count = "odd" 
    85A8 18BA85             JNZ _pDateOK
                
    85AB 300B   _pDateBAD   LDA #00Bh ;Partity n.OK
    85AD D20E80             ANDA VAR_dataOK
    85B0 420E80             STAA VAR_dataOK
                
                ;DEBUG print hours parity failure            
                
    85B3 10CE85             JMP _decEnd
                
    85B6 0C     _pDat0      PLA ;Bit count = "even"
    85B7 18AB85             JNZ _pDateBAD
                
    85BA 320C80 _pDateOK    LDAA VAR_bitData+1
    85BD 1A8686             JSR bcdToDec
    85C0 42C480             STAA VAR_tmpYear ;Save year value
    85C3 3004               LDA #04h
    85C5 E20E80             ORAA VAR_dataOK
    85C8 420E80             STAA VAR_dataOK
                
                ;DEBUG print year
                
    85CB 10CE85             JMP _decEnd
                
                ;Decoding end
                ;---------------------------------------------------------
                ;Ready for next bit
    85CE 2F0980 _decEnd     STZA FLG_dcfReceiver ;Reset dcf77 interrupt flag 
    85D1 2F0B80             STZA VAR_bitData
    85D4 04                 CLC
    85D5 1BA802             JSR (KERN_SPINLOCK) ;Enable the interrupts again
    85D8 1F                 RTS
                
                ;Interference detected -> continue            
    85D9 2F0980 _decIgnore  STZA FLG_dcfReceiver ;Reset dcf77 interrupt flag
    85DC 8D0D80             DECA VAR_edgeCnt
    85DF 04                 CLC
    85E0 1BA802             JSR (KERN_SPINLOCK) ;Enable the interrupts again
                
                ;DEBUG print interference sign
    85E3 1F                 RTS
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on Multi-I/O LEDs   
                ;---------------------------------------------------------
                syncDisp
                ;Display synced status           
    85E4 320A80             LDAA FLG_synced
    85E7 19F585             JPZ _syncD0
    85EA 3008               LDA #08h 
    85EC F2C580             EORA VAR_ledsDataOK
    85EF 42C580             STAA VAR_ledsDataOK
    85F2 104D86             JMP _syncD4
    85F5 3008   _syncD0     LDA #08h 
    85F7 E2C580             ORAA VAR_ledsDataOK
    85FA 42C580             STAA VAR_ledsDataOK
                
    85FD 320F80             LDAA VAR_second
    8600 7015               CMP #21
    8602 164D86             JNC _syncD4 ;Second <21 -> No time information fetching
    8605 701D               CMP #29
    8607 161786             JNC _syncD1 ;Second >= 21 & <29 -> Fetching minutes
    860A 7024               CMP #36
    860C 162A86             JNC _syncD2 ;Second >= 29 & < 36 -> Fetching hours
    860F 703B               CMP #59
    8611 163D86             JNC _syncD3 ;Second >= 36 & < 59 -> Fetching date
    8614 104D86             JMP _syncD4
                
                ;Fetching minutes
    8617 320E80 _syncD1     LDAA VAR_dataOK
    861A D001               AND #01h
    861C 184D86             JNZ _syncD4
    861F 3001               LDA #01h 
    8621 F2C580             EORA VAR_ledsDataOK
    8624 42C580             STAA VAR_ledsDataOK
    8627 104D86             JMP _syncD4
                
                ;Fetching hours
    862A 320E80 _syncD2     LDAA VAR_dataOK
    862D D002               AND #02h
    862F 184D86             JNZ _syncD4
    8632 3002               LDA #02h 
    8634 F2C580             EORA VAR_ledsDataOK
    8637 42C580             STAA VAR_ledsDataOK
    863A 104D86             JMP _syncD4
                
                ;Fetching date 
    863D 320E80 _syncD3     LDAA VAR_dataOK
    8640 D004               AND #04h
    8642 184D86             JNZ _syncD4
    8645 3004               LDA #04h 
    8647 F2C580             EORA VAR_ledsDataOK
    864A 42C580             STAA VAR_ledsDataOK
                
    864D 320E80 _syncD4     LDAA VAR_dataOK
    8650 E2C580             ORAA VAR_ledsDataOK
    8653 1B0603             JSR (KERN_IOCHANGELED)
    8656 1F                 RTS
                
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on SCC-Board   
                ;---------------------------------------------------------
                
                ;--------------------------------------------------------- 
                ;Helper functions   
                ;---------------------------------------------------------
                
                ;Get bit information from Time (Output: A = High(80h), Low(00h))        
                getBit      
    8657 320B80             LDAA VAR_bitData
    865A 7005               CMP #PARAM_LOWHIGH
    865C 166286             JNC _gBit0
                            ;Time >= PARAM_LOWHIGH -> Bit = 1
    865F 3080               LDA #80h
    8661 4D                 SKA
    8662 2C     _gBit0      CLA ;Time < PARAM_LOWHIGH -> Bit = 0
    8663 1F                 RTS
                
                ;Get bit information from Time as Char (Output: A = Char)        
                getBitChar      
    8664 320B80             LDAA VAR_bitData
    8667 7005               CMP #PARAM_LOWHIGH
    8669 166F86             JNC _gBitC0
                            ;Time >= PARAM_LOWHIGH -> Bit = 1
    866C 3031               LDA #'1'
    866E 4E                 SKB
    866F 3030   _gBitC0     LDA #'0' ;Time < PARAM_LOWHIGH -> Bit = 0
    8671 1F                 RTS
                
                ;Count high bits
                ;Input: A = Byte, X = Number of bits, Y = Counter offset
                ;Output: A = Counter value, Carry = 0 -> odd, Carry = 1 -> even
                bitCnt
    8672 DB     _bCnt0      SHR
    8673 167786             JNC _bCnt1
    8676 8B                 INY
    8677 497286 _bCnt1      DXJP _bCnt0
    867A 29                 SAY
    867B 08                 PHA
    867C C002               MOD #2
    867E 198386             JPZ _bCnt2
    8681 04                 CLC ;Counter value "odd"
    8682 4D                 SKA
    8683 05     _bCnt2      SEC ;Counter value "even"
    8684 0C                 PLA
    8685 1F                 RTS
                
                ;Convert BCD to decimal (Input: A = BCD value) (Output: A = decimal vlaue)      
                bcdToDec
    8686 08                 PHA
    8687 B010               DIV #10h
    8689 A00A               MUL #00Ah
    868B 420C80             STAA VAR_bitData+1
    868E 0C                 PLA
    868F D00F               AND #00Fh
    8691 04                 CLC
    8692 820C80             ADCA VAR_bitData+1
    8695 1F                 RTS
                
                _RTS    
    8696 04                 CLC
    8697 1F                 RTS
                
                _failRTS
    8698 2C                 CLA
    8699 05                 SEC
    869A 1F                 RTS
                
                


Segment Table:
**************
Segment Name                 Startaddr  Endaddr     Size  Type
=========================================================================
default                           8000     869A      69B  CODE  fixed
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

No errors found.
