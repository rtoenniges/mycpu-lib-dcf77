                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                ;~~  [MyCA] Macro Cross Assembler V1.10 for MyCPU, (c) 2023 by Dennis Kuschel  ~~
                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                ;[File: sl60dcf77_meteo.asm]
                ;[ASCII]
                ;******************************************
                ;***********  DCF77 Library  **************
                ;******************************************
                ;***** by Robin TÃ¶nniges (2016-2024) ******
                ;******************************************
                
                ;[File: C:\Program Files (x86)\myca\include\sys.hsm]
                ;[ASCII]
                
                KERN_WARMSTART      EQU 0220h
                KERN_FILEINPUT      EQU 027Ah
                KERN_GETINFO        EQU 02A2h
                KERN_REGFILEDEVICE  EQU 0264h
                KERN_FSREGISTER     EQU 02AEh
                KERN_FSUNREGISTER   EQU 02B0h
                KERN_GETCHECKSUM16  EQU 02B2h
                KERN_SETMEMBORDERS  EQU 029Eh
                KERN_SETIDLEFUNC    EQU 02EAh
                KERN_IDLE           EQU 02ECh
                KERN_TESTVERSION    EQU 030Ch
                KERN_CONFIGBYTE     EQU 030Ah
                KERN_IDEDRIVER      EQU 030Eh
                KERN_MULTIPLEX      EQU 0312h
                KERN_PRGMOVE        EQU 032Ah
                
                ;[File: sl60dcf77_meteo.asm]
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                ;[ASCII]
                
                ;[File: C:\Program Files (x86)\myca\include\code.hsm]
                ;[ASCII]
                
                KERN_ADAPTOPCODES   EQU 02C4h
                KERN_EXECUTEFILE    EQU 02BEh
                KERN_EXITTSR        EQU 02C2h
                KERN_KILLPROGRAM    EQU 02C0h
                KERN_KILLPROGEX     EQU 0328h
                KERN_SPECROMCALL    EQU 02B6h
                KERN_CALLFROMROM    EQU 02B8h
                KERN_CALLROM        EQU 02BAh
                KERN_LIBCALL        EQU 02CAh
                KERN_LIBSELECT      EQU 02CCh
                KERN_LIBDESELECT    EQU 02CEh
                KERN_LIBUNLOAD      EQU 02D0h
                KERN_ISLOADED       EQU 02D2h
                KERN_ASSERT         EQU 0326h
                
                REG_ROMPAGE  SET 3900h
                
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                
                ORG 8000h
    8000 0280    DW 8002h
    8002 C980    DW disp__func
    8004 1581    DW termfunc
    8006 C980    DW codestart
                
                ;[File: sl60dcf77_meteo.asm]
                ;[File: C:\Program Files (x86)\myca\include\interrupt.hsm]
                ;[ASCII]
                
                KERN_IC_ENABLEINT   EQU 0222h
                KERN_IC_DISABLEINT  EQU 0224h
                KERN_IC_GETVECTOR   EQU 0226h
                KERN_IC_SETVECTOR   EQU 0228h
                KERN_IC_REGISTERBH  EQU 022Ah
                KERN_SPINLOCK       EQU 02A8h
                KERN_INTVECT        EQU 0332h
                
                KERN_INSDELTIMER    EQU 02AAh
                
                ;[File: sl60dcf77_meteo.asm]
                ;[File: C:\Program Files (x86)\myca\include\time.hsm]
                ;[ASCII]
                
                KERN_GETSETTIME     EQU 029Ah
                KERN_GETSETDATE     EQU 029Ch
                
                
                ;[File: sl60dcf77_meteo.asm]
                ;[File: C:\Program Files (x86)\myca\include\mem.hsm]
                ;[ASCII]
                
                KERN_MALLOCFREE     EQU 02C8h
                KERN_ALLOCFREERAMP  EQU 02ACh
                KERN_ALLOCDBUF      EQU 031Ah
                KERN_FREEDBUF       EQU 031Ch
                KERN_ALLOCFREEZSP   EQU 02F4h
                
                REG_RAMPAGE         SET 3800h
                ADR_RAMPAGE_START   SET 4000h
                
                ;[File: sl60dcf77_meteo.asm]
                ;Comment this line out if you dont want synced status on Multi-I/O-LEDs
                ;Comment this line in if you use the SCC-Rack-Extension
                ;#DEFINE SCC_BOARD 
                ;Comment this line in if you want debug output
                ;#DEFINE DEBUG
                
                ;Debug Message
                ;Second[MeteoCount1|MeteoCount2]: BitLevel(PulseTime) {Additional comments}
                ;Example: 28[28|49]: H(6) Minute: 32
                
                
                ;-------------------------------------;
                ; declare variables
                
                ;Addresses
                HDW_INT             EQU 7       ;IRQ7
                
                
                KERN_IOCHANGELED    EQU 0306h   ;Kernel routine for changing the Multi-I/O-LEDs
                
                ;Decoding parameter
                ;Low        = 100ms         is theoretically 3
                ;High       = 200ms         is theoretically 6
                ;Syncpause  = 1800-1900ms   is theoretically 54-57
                ;New second = 800-900ms     is theoretically 24-27
                PARAM_LOWHIGH       SET 5       ;Edge time < PARAM_LOWHIGH      = 0(Low),           >= PARAM_LOWHIGH    = 1(High)
                PARAM_SYNCPAUSE     SET 50      ;Edge time < PARAM_SYNCPAUSE    = New second/bit,   >= PARAM_SYNCPAUSE  = Syncpoint
                PARAM_SECOND        SET 20      ;Edge time < PARAM_SECOND       = New bit,          >= PARAM_SECOND     = New second
                PARAM_IGNORE        SET 2       ;Edge time < PARAM_IGNORE       = Signal interference (ignore)
                
                ;Variables
    8008 01     FLG_firstStart      DB  1   ;This flag indicates first start of library -> Ignore first edge
    8009 0000   FLG_dcfReceiver     DW  0   ;This flag is set to 1 if new input (rising edge) comes from the DCF77-Receiver
                                            ;FLG_dcfReceiver+1 is set to 1 if bit is ready for decoding
    800B 01     FLG_synced          DB  1   ;Sync flag -> 0 if synchron with dcf77
    800C 00     VAR_bitCount        DB  0   ;Timer Interrupt Counter
    800D 0000   VAR_bitCache        DW  0   ;Byte 0 = time value, Byte 1 = temp value
    800F 00     VAR_edgeCnt         DB  0   ;Edge counter
    8010 00     VAR_dataOK          DB  0   ;Parity check -> Bit 1 = Minutes OK, Bit 2 = Hours OK, Bit 3 = Date OK, Bit 4 = Meteo OK
                
                ;VAR_pSecond         DB  0   ;Pseudo second to bridge desynchronization
    8011 00     VAR_second          DB  0   ;DCF77-Second/Bit counter
                
                ;Time variables initialized with FFh to "lock" Get-functions until 2nd synchronization point reached
    8012 FF     VAR_minutes         DB  0FFh
    8013 FF     VAR_hours           DB  0FFh
                
    8014 FF     VAR_day             DB  0FFh
    8015 FF     VAR_weekday         DB  0FFh
    8016 FF     VAR_month           DB  0FFh
    8017 FF     VAR_year            DB  0FFh
                
    8018 00     VAR_dateParity      DB  0
                
                ;2x 82 Bit + 0 (Little endian)
    8019 000000 VAR_meteo1          DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ;Weather bits n
    801C 000000 
    801F 000000 
    8022 000000 
    8025 0000   
    8027 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ;Weather bits n+1
    802A 000000 
    802D 000000 
    8030 000000 
    8033 0000   
                                        ;******* Minute *******|********* Hour *********|********* Day **********|**** Month ****|*** WD **|******** Year *********|
    8035 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0
    8038 000000 
    803B 000000 
    803E 000000 
    8041 000000 
    8044 000000 
    8047 000000 
    804A 000000 
    804D 000000 
    8050 000000 
    8053 000000 
    8056 000000 
    8059 000000 
    805C 00     
    805D 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ;Weather bits n+2
    8060 000000 
    8063 000000 
    8066 000000 
    8069 000000 
                
    806C 000000 VAR_meteo2          DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    806F 000000 
    8072 000000 
    8075 000000 
    8078 0000   
    807A 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    807D 000000 
    8080 000000 
    8083 000000 
    8086 0000   
    8088 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0
    808B 000000 
    808E 000000 
    8091 000000 
    8094 000000 
    8097 000000 
    809A 000000 
    809D 000000 
    80A0 000000 
    80A3 000000 
    80A6 000000 
    80A9 000000 
    80AC 000000 
    80AF 00     
    80B0 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    80B3 000000 
    80B6 000000 
    80B9 000000 
    80BC 000000 
                
                ZP_meteoWrite       EQU 20h ;Write pointer for meteo data
                ZP_meteoRead        EQU 22h ;Read pointer for meteo data
    80BF 00     VAR_meteoCount1     DB  0 ;Weather bit counter (0-41)
    80C0 00     VAR_meteoCount2     DB  0 ;Time bit counter (42-81)
                
    80C1 00     VAR_tmpMinutes      DB  0
    80C2 00     VAR_tmpHours        DB  0
    80C3 00     VAR_tmpDay          DB  0
    80C4 00     VAR_tmpWeekday      DB  0
    80C5 00     VAR_tmpMonth        DB  0
    80C6 00     VAR_tmpYear         DB  0
    80C7 00     VAR_ledsDataOK      DB  0
                
    80C8 00     VAR_timerhandle     DB  0   ;Address of timer interrupt handle
                
                ;-------------------------------------;
                ; begin of assembly code
                
                codestart
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                ;[ASCII]
                
                disp__func
    80C9 E000      ORA #0
    80CB 183381    JNZ funcdispatch
    80CE 04        CLC
    80CF 1BD202    JSR (KERN_ISLOADED)
    80D2 2C        CLA
    80D3 17E080    JPC exit_lib
    80D6 1AE180    JSR initfunc
    80D9 20        TAX
    80DA 18E080    JNZ exit_lib
    80DD 11C202    JMP (KERN_EXITTSR)
                exit_lib
    80E0 1F        RTS
                
                ;[File: sl60dcf77_meteo.asm]
                ;--------------------------------------------------------- 
                ;Library handling  
                ;---------------------------------------------------------  
                
                ;Library initialization
                ;---------------------------------------------------------   
                initfunc
                
                ;Initialize Zeropointer
    80E1 3C20               FLG ZP_meteoWrite
    80E3 3C21               FLG ZP_meteoWrite+1
    80E5 3C22               FLG ZP_meteoRead
    80E7 3C23               FLG ZP_meteoRead+1
                
    80E9 6C1980             LPT #VAR_meteo1
    80EC 6F22               SPT ZP_meteoRead
    80EE 6C6C80             LPT #VAR_meteo2
    80F1 6F20               SPT ZP_meteoWrite
                
                ;Enable hardware interrupt (IRQ7)
    80F3 3007               LDA #HDW_INT
    80F5 6CEB81             LPT #int_dcf77
    80F8 1B2802             JSR (KERN_IC_SETVECTOR)
    80FB 1B2202             JSR (KERN_IC_ENABLEINT)
                
                ;Enable timer interrupt
    80FE 2C                 CLA    
    80FF 6C5482             LPT #int_timer
    8102 1B1203             JSR (KERN_MULTIPLEX)
    8105 42C880             STAA VAR_timerhandle  ;Save adress of timerhandle 
                
                ;Register idle function
    8108 05                 SEC
    8109 6C5E82             LPT #int_idle
    810C 1BEA02             JSR (KERN_SETIDLEFUNC)
                
                ;If sync display enabled clear LEDs 
    810F 2C                 CLA
    8110 1B0603             JSR (KERN_IOCHANGELED)
    8113 2C                 CLA
    8114 1F                 RTS
                
                ;Termination function
                ;---------------------------------------------------------                  
                termfunc  
                            ;Disable timer-interrupt
    8115 3001               LDA  #1
    8117 52C880             LDXA VAR_timerhandle      
    811A 1B1203             JSR (KERN_MULTIPLEX)
                            ;Disable hardware-interrupt
    811D 3007               LDA #HDW_INT
    811F 1B2402             JSR (KERN_IC_DISABLEINT)
                            ;Disable spinlock
    8122 04                 CLC
    8123 1BA802             JSR (KERN_SPINLOCK)
                            ;Disable idle function
    8126 04                 CLC
    8127 6C5E82             LPT #int_idle
    812A 1BEA02             JSR (KERN_SETIDLEFUNC)
                
                            ;Set LEDs to default
    812D 30FF               LDA #0FFh
    812F 1B0603             JSR (KERN_IOCHANGELED)
                
    8132 1F                 RTS
                
                ;Functiondispatch
                ;---------------------------------------------------------     
                funcdispatch
    8133 9B                 DEC
    8134 195A81             JPZ func_getSeconds     ;Function 01h  
    8137 9B                 DEC 
    8138 196681             JPZ func_getMinutes     ;Function 02h         
    813B 9B                 DEC 
    813C 197981             JPZ func_getHours       ;Function 03h 
    813F 9B                 DEC 
    8140 198C81             JPZ func_getDay         ;Function 04h   
    8143 9B                 DEC 
    8144 199F81             JPZ func_getWeekday     ;Function 05h       
    8147 9B                 DEC 
    8148 19B281             JPZ func_getMonth       ;Function 06h      
    814B 9B                 DEC 
    814C 19C581             JPZ func_getYear        ;Function 07h 
    814F 9B                 DEC 
    8150 19D881             JPZ func_getMeteoTime   ;Function 08h
    8153 9B                 DEC 
    8154 19E581             JPZ func_getEntryPoint  ;Function 09h
    8157 10B786             JMP _failRTS
                
                ;Function '01h' = Get seconds (OUTPUT = Accu), Carry = 0 if successfull
                func_getSeconds
    815A 320B80             LDAA FLG_synced
    815D 18B786             JNZ _failRTS
    8160 321180             LDAA VAR_second
    8163 10B586             JMP _RTS
                
                ;Function '02h' = Get minutes (OUTPUT = Accu), Carry = 0 if successfull         
                func_getMinutes  
    8166 321080             LDAA VAR_dataOK
    8169 D001               AND #01h
    816B 19B786             JPZ _failRTS
    816E 321280             LDAA VAR_minutes
    8171 70FF               CMP #0FFh
    8173 19B786             JPZ _failRTS
    8176 10B586             JMP _RTS
                
                ;Function '03h' = Get hours (OUTPUT = Accu), Carry = 0 if successfull 
                func_getHours
    8179 321080             LDAA VAR_dataOK
    817C D002               AND #02h
    817E 19B786             JPZ _failRTS
    8181 321380             LDAA VAR_hours
    8184 70FF               CMP #0FFh
    8186 19B786             JPZ _failRTS
    8189 10B586             JMP _RTS        
                
                ;Function '04h' = Get day (OUTPUT = Accu), Carry = 0 if successfull 
                func_getDay
    818C 321080             LDAA VAR_dataOK
    818F D004               AND #04h
    8191 19B786             JPZ _failRTS
    8194 321480             LDAA VAR_day
    8197 70FF               CMP #0FFh
    8199 19B786             JPZ _failRTS
    819C 10B586             JMP _RTS    
                
                ;Function '05h' = Get weekday (OUTPUT = Accu), Carry = 0 if successfull 
                ;1 = monday, 2 = tuesday, 3 = wednesday, 4 = thursday, 5 = friday, 6 = saturday, 7 = sunday
                func_getWeekday
    819F 321080             LDAA VAR_dataOK
    81A2 D004               AND #04h
    81A4 19B786             JPZ _failRTS
    81A7 321580             LDAA VAR_weekday
    81AA 70FF               CMP #0FFh
    81AC 19B786             JPZ _failRTS
    81AF 10B586             JMP _RTS   
                
                ;Function '06h' = Get month (OUTPUT = Accu), Carry = 0 if successfull 
                func_getMonth
    81B2 321080             LDAA VAR_dataOK
    81B5 D004               AND #04h
    81B7 19B786             JPZ _failRTS
    81BA 321680             LDAA VAR_month
    81BD 70FF               CMP #0FFh
    81BF 19B786             JPZ _failRTS
    81C2 10B586             JMP _RTS     
                
                ;Function '07h' = Get year (OUTPUT = Accu), Carry = 0 if successfull 
                func_getYear
    81C5 321080             LDAA VAR_dataOK
    81C8 D004               AND #04h
    81CA 19B786             JPZ _failRTS
    81CD 321780             LDAA VAR_year
    81D0 70FF               CMP #0FFh
    81D2 19B786             JPZ _failRTS
    81D5 10B586             JMP _RTS
                
                ;Function '08h' = Get encoded METEO Information (X/Y = Pointer to string), Carry = 0 if successfull
                ;Bit 0-41 = meteotime (3 minutes)
                ;Bit 42-81 = time information (Minutes + Hours + Day + Month + Weekday + Year) without parity
                func_getMeteoTime
    81D8 321080             LDAA VAR_dataOK
    81DB D008               AND #08h
    81DD 19B786             JPZ _failRTS
    81E0 5F22               LPT ZP_meteoRead
    81E2 10B586             JMP _RTS
                
                ;Function '09h' = Get entrypoint of library         
                func_getEntryPoint
    81E5 6C3381             LPT #funcdispatch
    81E8 10B586             JMP _RTS
                
                ;--------------------------------------------------------- 
                ;Interrupt routines   
                ;---------------------------------------------------------       
                
                ;BEGIN - Receiver interrupt
                ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    
                int_dcf77
                            ;First start?
    81EB 320880             LDAA FLG_firstStart
    81EE 19FE81             JPZ _rInt0
    81F1 2F0880             STZA FLG_firstStart
    81F4 1F                 RTS
                
                            ;Check for interference
    81F5 320C80             LDAA VAR_bitCount
    81F8 7002               CMP #PARAM_IGNORE
    81FA 17FE81             JPC _rInt0
                            ;Interference detected -> Ignore
                
                ;DEBUG print interference            
                
    81FD 1F                 RTS
                
    81FE 3001   _rInt0      LDA #1 
    8200 420980             STAA FLG_dcfReceiver ;Flank detected -> Set flag (Pause timer count)
    8203 7D0F80             INCA VAR_edgeCnt ;Count edges (For signal error detection)
    8206 320C80             LDAA VAR_bitCount
    8209 420D80 			STAA VAR_bitCache ;Move bitCounter to cache
    820C 2F0C80 			STZA VAR_bitCount
    820F 2F0980 			STZA FLG_dcfReceiver ;Resume timer count
                
                            ;LDAA VAR_bitCache 
    8212 7032               CMP #PARAM_SYNCPAUSE ;Synchronize with signal -> Detect syncpoint/-gap
    8214 162182             JNC _rInt2
                            ;Time >= PARAM_SYNCPAUSE -> Time longer than 1 second
                            ;Syncpoint reached
    8217 2F0B80             STZA FLG_synced
    821A 2F1180             STZA VAR_second
    821D 2F0F80             STZA VAR_edgeCnt
                
                
    8220 1F     			RTS
                
                ;Time < PARAM_SYNCPAUSE          
    8221 7014   _rInt2      CMP #PARAM_SECOND 
    8223 162A82             JNC _rInt3
    8226 7D1180             INCA VAR_second ;Time >= PARAM_SECOND -> Next second
    8229 1F                 RTS
                
                ;Time < PARAM_SECOND -> New bit
    822A 320F80 _rInt3      LDAA VAR_edgeCnt ;First do signal checking -> Twice as many edges+1 as seconds?
    822D 05                 SEC
    822E 9001               SBC #1
    8230 B002               DIV #2
    8232 721180             CMPA VAR_second
    8235 194E82             JPZ _rInt4 ;Check successfull -> Go forward to bit checking
                
                ;No longer synchronized        
                deSync  
    8238 3001               LDA #1 
    823A 420B80             STAA FLG_synced
    823D 2F1080             STZA VAR_dataOK
    8240 3008               LDA #08
    8242 42C780             STAA VAR_ledsDataOK
    8245 2F1180             STZA VAR_second
    8248 2FBF80             STZA VAR_meteoCount1
    824B 2FC080             STZA VAR_meteoCount2
                
                ;New bit -> Ready for decode   
    824E 3001   _rInt4      LDA #1
    8250 420A80             STAA FLG_dcfReceiver+1
                
                ;DEBUG print desynchronisation            
                
    8253 1F                 RTS
                
                ;END - Receiver interrupt
                ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                
                ;BEGIN - Timer interrupt 30.51757813 times per second
                ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
                int_timer
                            ;Measure time between two edges
    8254 320980             LDAA FLG_dcfReceiver
    8257 18B586             JNZ _RTS       
    825A 7D0C80             INCA VAR_bitCount
    825D 1F                 RTS
                ;END - Timer interrupt
                ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                
                ;BEGIN - Idle function (Bit decoding)
                ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
                int_idle
    825E 320A80             LDAA FLG_dcfReceiver+1
    8261 19B586             JPZ _RTS
    8264 2F0A80             STZA FLG_dcfReceiver+1 ;Get ready for new bit immediately
                ;--------------------------------------------------------- 
                ;DCF77 decoding   
                ;---------------------------------------------------------
                
                ;From this point no interrupt should break the programm
                            ;SEC
                            ;JSR (KERN_SPINLOCK) ;"You shall not pass"                       
                
                ;New bit received
                ;---------------------------------------------------------
                ;Display synced status on I/O-Module LEDs
    8267 1A0386         JSR syncDisp
                ;Display synced status on SCC-Board
                
    826A 320B80             LDAA FLG_synced
    826D 18B586             JNZ _RTS
                
                ;DEBUG print time measurement and bit information
                
    8270 321180             LDAA VAR_second
    8273 18EB82             JNZ _nBit3
    8276 1A7686             JSR getBit
    8279 183882             JNZ deSync ;If Bit 0 != 0 -> Not synchronized or incorrect signal
                
                ;Second/bit = 0 -> Take over data from last minute    
    827C 320B80             LDAA FLG_synced
    827F 18B586             JNZ _RTS
    8282 321180             LDAA VAR_second
    8285 22                 TAY			
    8286 321080 _nBit0      LDAA VAR_dataOK
    8289 D001               AND #01h
    828B 199582             JPZ _nBit1
    828E 32C180             LDAA VAR_tmpMinutes ;Take over 'minutes'
    8291 421280             STAA VAR_minutes
    8294 20     			TAX
    8295 321080 _nBit1      LDAA VAR_dataOK
    8298 D002               AND #02h
    829A 19B882             JPZ _nBit2
    829D 32C280             LDAA VAR_tmpHours ;Take over 'hours'
    82A0 421380             STAA VAR_hours
                			;Set system time
    82A3 08     			PHA
    82A4 321080             LDAA VAR_dataOK
    82A7 D003               AND #03h
    82A9 7003   			CMP #03h
    82AB 18B586 			JNZ _RTS
    82AE 0C     			PLA
    82AF 6400   			CPY #0
    82B1 18B882 			JNZ _nBit2 ;Sync every minute at xx:xx:00
    82B4 05                 SEC
    82B5 1B9A02             JSR (KERN_GETSETTIME)
                
    82B8 321080 _nBit2      LDAA VAR_dataOK
    82BB D004               AND #04h
    82BD 19B586             JPZ _RTS
    82C0 32C680             LDAA VAR_tmpYear ;Take over 'year'
    82C3 421780             STAA VAR_year
    82C6 22     			TAY
    82C7 32C580             LDAA VAR_tmpMonth ;Take over 'month'
    82CA 421680             STAA VAR_month
    82CD 20     			TAX
    82CE 32C480             LDAA VAR_tmpWeekday ;Take over 'weekday'
    82D1 421580             STAA VAR_weekday
    82D4 32C380             LDAA VAR_tmpDay ;Take over 'day'
    82D7 421480             STAA VAR_day
                            ;Set system date
    82DA 08     			PHA
    82DB 321180 			LDAA VAR_second
    82DE 7000   			CMP #0
    82E0 18B586 			JNZ _RTS ;Sync every minute at xx:xx:00
    82E3 0C     			PLA
    82E4 05                 SEC
    82E5 1B9C02             JSR (KERN_GETSETDATE)
                
    82E8 10B586             JMP _RTS
                
                ;Bit > 0        
    82EB 7014   _nBit3      CMP #20
    82ED 18F982             JNZ _nBit4
    82F0 1A7686             JSR getBit ;Second/bit = 20 -> Begin of time information always '1'
    82F3 193882             JPZ deSync ;If Bit 20 != 1 -> Not synchronized or incorrect signal
    82F6 10B586             JMP _RTS
                
                ;Bit != 20 - Get/decode data
    82F9 321180 _nBit4      LDAA VAR_second
    82FC 700F               CMP #15
    82FE 163083             JNC getMeteo ;Go to meteo
                            ;Second >= 15
    8301 7015               CMP #21
    8303 16B586             JNC _RTS ; Ignore bit 15-20
                            ;Second >= 21
    8306 701D               CMP #29
    8308 168E83             JNC getMinutes ;Go to minute decoding
                            ;Second >= 29
    830B 7024               CMP #36
    830D 160F84             JNC getHours ;Go to hour decoding
                            ;Second >= 36
    8310 702A               CMP #42
    8312 168A84             JNC getDay ;Go to day decoding
                            ;Second >= 42
    8315 702D               CMP #45
    8317 16E784             JNC getWDay ;Go to weekday decoding
                            ;Second >= 45
    831A 7032               CMP #50
    831C 164085             JNC getMonth ;Go to month decoding
                            ;Second >= 50
    831F 703B               CMP #59
    8321 169A85             JNC getYear ;Go to year decoding
                            ;Second >= 59
    8324 18B586             JNZ _RTS
                            ;Second = 59 -> Leap second!
    8327 1A7686             JSR getBit ;Always '0'
    832A 183882             JNZ deSync 
    832D 10B586             JMP _RTS
                
                ;Get/decode meteotime
                ;---------------------------------------------------------
                getMeteo    
    8330 1A6681             JSR func_getMinutes
    8333 176983             JPC _gMet12 ;No minute data available -> Skip meteo section
    8336 C003               MOD #3
    8338 197283             JPZ _gMet10 ;//Check for start minute -> = 0, 3, 6, 9, ...
                            ;Minute -> n+1 or n+2
    833B 32BF80             LDAA VAR_meteoCount1
    833E 700E               CMP #14
    8340 16B586             JNC _RTS ;Previous data not complete
    8343 20     			TAX
    8344 1A8386             JSR getBitChar
    8347 4320               STA (ZP_meteoWrite),X
    8349 7DBF80             INCA VAR_meteoCount1        
    834C 21                 TXA
    834D 7029               CMP #41
    834F 18B586             JNZ _RTS
                            ;Last bit received
    8352 2C                 CLA
    8353 5052               LDX #82
    8355 4320               STA (ZP_meteoWrite),X ;Terminate String with 0
    8357 3008               LDA #08h
    8359 E21080             ORAA VAR_dataOK
    835C 421080             STAA VAR_dataOK
    835F 5F22               LPT ZP_meteoRead ;Swap read and write register
    8361 7A                 PHR
    8362 5F20               LPT ZP_meteoWrite
    8364 6F22               SPT ZP_meteoRead
    8366 8A                 PLR
    8367 6F20               SPT ZP_meteoWrite
                
                ;DEBUG print meteo string
                
    8369 2FBF80 _gMet12     STZA VAR_meteoCount1 ;Reset bit counter
    836C 2FC080             STZA VAR_meteoCount2 ;Reset bit counter            
    836F 10B586             JMP _RTS    
                
    8372 321180 _gMet10     LDAA VAR_second ;Start minute (0, 3, 6, 9, ...)
    8375 7001               CMP #1
    8377 188083             JNZ _gMet11 ;Bit > 1 -> Write to Array
    837A 2FBF80             STZA VAR_meteoCount1 ;First minute & first bit -> Reset bit counter
    837D 2FC080             STZA VAR_meteoCount2 ;First minute & first bit -> Reset bit counter
    8380 1A8386 _gMet11     JSR getBitChar
    8383 52BF80             LDXA VAR_meteoCount1
    8386 4320               STA (ZP_meteoWrite),X
    8388 7DBF80             INCA VAR_meteoCount1
    838B 10B586             JMP _RTS        
                
                ;Get/decode minutes
                ;---------------------------------------------------------
                getMinutes   
    838E 701C               CMP #28
    8390 19C883             JPZ _gMet21 ;Last bit -> Check parity
    8393 7015               CMP #21
    8395 18A883             JNZ _gMet20
    8398 2F0E80             STZA VAR_bitCache+1    ;First bit -> Clear data
    839B 32BF80             LDAA VAR_meteoCount1
    839E 701C               CMP #28
    83A0 18BB83             JNZ _gMin0 ;Previous meteo data not complete
    83A3 302A               LDA #42
    83A5 42C080             STAA VAR_meteoCount2
                
                ;*** Get meteo 1/2 ***
    83A8 32BF80 _gMet20     LDAA VAR_meteoCount1
    83AB 701C               CMP #28
    83AD 18BB83             JNZ _gMin0 ;Previous meteo data not complete
    83B0 1A8386             JSR getBitChar
    83B3 52C080             LDXA VAR_meteoCount2
    83B6 4320               STA (ZP_meteoWrite),X
    83B8 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (minutes)
    83BB 1A7686 _gMin0      JSR getBit
    83BE E20E80             ORAA VAR_bitCache+1
    83C1 DB                 SHR
    83C2 420E80             STAA VAR_bitCache+1
    83C5 10B586             JMP _RTS
                
                ;*** Get meteo 2/2 ***
    83C8 32C080 _gMet21     LDAA VAR_meteoCount2
    83CB 7031               CMP #49
    83CD 18D883             JNZ parityMinutes ;Previous meteo data not complete
    83D0 20     			TAX
    83D1 3030               LDA #'0'
    83D3 4320               STA (ZP_meteoWrite),X
    83D5 7DC080             INCA VAR_meteoCount2
                
                ;Last bit
                ;Check parity (minutes)        
                parityMinutes  
    83D8 1A7686             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    83DB 08                 PHA
                            ;Determine if bitcount of data is even or odd
    83DC 320E80             LDAA VAR_bitCache+1
    83DF 5007               LDX #7
    83E1 2E                 CLY
    83E2 1A9186             JSR bitCnt
    83E5 17F783             JPC _pMin0   
    83E8 0C                 PLA ;Bit count = "odd"
    83E9 18FB83             JNZ _pMinOK
                
    83EC 300E   _pMinBAD    LDA #00Eh ;Parity n.OK
    83EE D21080             ANDA VAR_dataOK
    83F1 421080             STAA VAR_dataOK
                
                ;DEBUG print minutes parity failure            
                
    83F4 10B586             JMP _RTS
                
    83F7 0C     _pMin0      PLA ;Bit count = "even"
    83F8 18EC83             JNZ _pMinBAD
                
    83FB 320E80 _pMinOK     LDAA VAR_bitCache+1
    83FE 1AA586             JSR bcdToDec
    8401 42C180             STAA VAR_tmpMinutes
    8404 3001               LDA #01h
    8406 E21080             ORAA VAR_dataOK
    8409 421080             STAA VAR_dataOK
                
                ;DEBUG print minutes
    840C 10B586             JMP _RTS
                
                ;Get/decode hours
                ;---------------------------------------------------------
                getHours
    840F 7023               CMP #35
    8411 193C84             JPZ _gMet31 ;Last bit -> Check parity
    8414 701D               CMP #29
    8416 181C84             JNZ _gMet30
    8419 2F0E80             STZA VAR_bitCache+1
                
                ;*** Get meteo 1/2 ***
    841C 32BF80 _gMet30     LDAA VAR_meteoCount1
    841F 701C               CMP #28
    8421 182F84             JNZ _gHrs0 ;Previous meteo data not complete
    8424 1A8386             JSR getBitChar
    8427 52C080             LDXA VAR_meteoCount2
    842A 4320               STA (ZP_meteoWrite),X
    842C 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (hours)
    842F 1A7686 _gHrs0      JSR getBit
    8432 E20E80             ORAA VAR_bitCache+1
    8435 DB                 SHR
    8436 420E80             STAA VAR_bitCache+1
    8439 10B586             JMP _RTS
                
                ;*** Get meteo 2/2 ***
    843C 32C080 _gMet31     LDAA VAR_meteoCount2
    843F 7038               CMP #56
    8441 185084             JNZ parityHours ;Previous meteo data not complete
    8444 20     			TAX
    8445 3030               LDA #'0'
    8447 4320               STA (ZP_meteoWrite),X ; 1. '0'
    8449 7B                 INX
    844A 4320               STA (ZP_meteoWrite),X ; 2. '0'
    844C 7B     			INX
    844D 55C080             STXA VAR_meteoCount2
                
                ;Last bit
                ;Check parity (hours)         
                parityHours       
    8450 BD0E80             SHRA VAR_bitCache+1
    8453 1A7686             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    8456 08                 PHA
                            ;Determine if bitcount of data is even or odd
    8457 320E80             LDAA VAR_bitCache+1
    845A 5006               LDX #6
    845C 2E                 CLY
    845D 1A9186             JSR bitCnt
    8460 177284             JPC _pHrs0   
    8463 0C                 PLA ;Bit count = "odd"
    8464 187684             JNZ _pHrsOK
                
    8467 300D   _pHrsBAD    LDA #00Dh ;Parity n.OK
    8469 D21080             ANDA VAR_dataOK
    846C 421080             STAA VAR_dataOK
                
                ;DEBUG print hours parity failure            
                
    846F 10B586             JMP _RTS
                
    8472 0C     _pHrs0      PLA ;Bit count = "even"
    8473 186784             JNZ _pHrsBAD
                
    8476 320E80 _pHrsOK     LDAA VAR_bitCache+1
    8479 1AA586             JSR bcdToDec
    847C 42C280             STAA VAR_tmpHours
    847F 3002               LDA #02h
    8481 E21080             ORAA VAR_dataOK
    8484 421080             STAA VAR_dataOK
                
                ;DEBUG print hours
    8487 10B586             JMP _RTS
                
                ;Get/decode day
                ;---------------------------------------------------------
                getDay  
    848A 7024               CMP #36 
    848C 189284             JNZ _gMet40
    848F 2F0E80             STZA VAR_bitCache+1
                
                ;*** Get meteo 1/2 ***
    8492 32BF80 _gMet40     LDAA VAR_meteoCount1
    8495 701C               CMP #28
    8497 18A584             JNZ _gDay0 ;Previous meteo data not complete
    849A 1A8386             JSR getBitChar
    849D 52C080             LDXA VAR_meteoCount2
    84A0 4320               STA (ZP_meteoWrite),X
    84A2 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (day)      
    84A5 1A7686 _gDay0      JSR getBit
    84A8 E20E80             ORAA VAR_bitCache+1
    84AB DB                 SHR
    84AC 420E80             STAA VAR_bitCache+1
                            ;Check for last bit
    84AF 321180             LDAA VAR_second
    84B2 7029               CMP #41       
    84B4 18B586             JNZ _RTS 
                
                ;*** Get meteo 2/2 ***
    84B7 32C080             LDAA VAR_meteoCount2
    84BA 7040               CMP #64
    84BC 18CC84             JNZ _gDay1 ;Previous meteo data not complete
    84BF 20     			TAX
    84C0 3030               LDA #'0'
    84C2 4320               STA (ZP_meteoWrite),X ; 1. '0'
    84C4 7B                 INX
    84C5 4320               STA (ZP_meteoWrite),X ; 2. '0'
    84C7 3047               LDA #71
    84C9 42C080             STAA VAR_meteoCount2          
                
                ;Last bit
    84CC BD0E80 _gDay1      SHRA VAR_bitCache+1
                            ;Count high bits and add it to "VAR_dateParity"
    84CF 320E80             LDAA VAR_bitCache+1
    84D2 5006               LDX #6
    84D4 2E                 CLY
    84D5 1A9186             JSR bitCnt
    84D8 421880             STAA VAR_dateParity
                            ;Save day value
    84DB 320E80             LDAA VAR_bitCache+1
    84DE 1AA586             JSR bcdToDec
    84E1 42C380             STAA VAR_tmpDay
                
                ;DEBUG print day
    84E4 10B586             JMP _RTS        
                
                ;Get/decode weekday
                ;---------------------------------------------------------
                getWDay 
    84E7 702A               CMP #42
    84E9 18EF84             JNZ _gMet50
    84EC 2F0E80             STZA VAR_bitCache+1
                
                ;*** Get meteo 1/2 ***
    84EF 32BF80 _gMet50     LDAA VAR_meteoCount1
    84F2 701C               CMP #28
    84F4 180285             JNZ _getWDay0 ;Previous meteo data not complete
    84F7 1A8386             JSR getBitChar
    84FA 52C080             LDXA VAR_meteoCount2
    84FD 4320               STA (ZP_meteoWrite),X
    84FF 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (weekday)    
    8502 1A7686 _getWDay0   JSR getBit
    8505 E20E80             ORAA VAR_bitCache+1
    8508 DB                 SHR
    8509 420E80             STAA VAR_bitCache+1
                            ;Check for last bit
    850C 321180             LDAA VAR_second
    850F 702C               CMP #44       
    8511 18B586             JNZ _RTS
                
                ;*** Get meteo 2/2 ***
    8514 32C080             LDAA VAR_meteoCount2
    8517 704A               CMP #74
    8519 182185             JNZ _getWDay1 ;Previous meteo data not complete
    851C 3042               LDA #66
    851E 42C080             STAA VAR_meteoCount2
                
                ;Last bit
                            ;Shift data right by 4
    8521 320E80 _getWDay1   LDAA VAR_bitCache+1
    8524 B010               DIV #10h
    8526 420E80             STAA VAR_bitCache+1
                
                            ;Count high bits and add it to "VAR_dateParity"
    8529 5003               LDX #3
    852B 591880             LDYA VAR_dateParity
    852E 1A9186             JSR bitCnt
    8531 421880             STAA VAR_dateParity
                            ;Save weekday value
    8534 320E80             LDAA VAR_bitCache+1
    8537 1AA586             JSR bcdToDec
    853A 42C480             STAA VAR_tmpWeekday
                
                ;DEBUG print weekday
                
    853D 10B586             JMP _RTS  
                
                ;Get/decode month
                ;---------------------------------------------------------
                getMonth    
    8540 702D               CMP #45
    8542 184885             JNZ _gMet60
    8545 2F0E80             STZA VAR_bitCache+1
                
                ;*** Get meteo ***
    8548 32BF80 _gMet60     LDAA VAR_meteoCount1
    854B 701C               CMP #28
    854D 185B85             JNZ _gMon0 ;Previous meteo data not complete
    8550 1A8386             JSR getBitChar
    8553 52C080             LDXA VAR_meteoCount2
    8556 4320               STA (ZP_meteoWrite),X
    8558 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (month)
    855B 1A7686 _gMon0      JSR getBit
    855E E20E80             ORAA VAR_bitCache+1
    8561 DB                 SHR
    8562 420E80             STAA VAR_bitCache+1            
                            ;Check for last bit
    8565 321180             LDAA VAR_second
    8568 7031               CMP #49       
    856A 18B586             JNZ _RTS 
                
                ;*** Get meteo 2/2 ***
    856D 32C080             LDAA VAR_meteoCount2
    8570 7047               CMP #71
    8572 187A85             JNZ _gMon1 ;Previous meteo data not complete
    8575 304A               LDA #74
    8577 42C080             STAA VAR_meteoCount2
                
                ;Last bit
                            ;Shift data right by 2
    857A BD0E80 _gMon1      SHRA VAR_bitCache+1
    857D BD0E80             SHRA VAR_bitCache+1
                
                            ;Count high bits and add it to "VAR_dateParity"
    8580 320E80             LDAA VAR_bitCache+1
    8583 5005               LDX #5
    8585 591880             LDYA VAR_dateParity
    8588 1A9186             JSR bitCnt
    858B 421880             STAA VAR_dateParity
                            ;Save month value
    858E 320E80             LDAA VAR_bitCache+1
    8591 1AA586             JSR bcdToDec
    8594 42C580             STAA VAR_tmpMonth
                
                ;DEBUG print month
                
    8597 10B586             JMP _RTS 
                
                ;Get/decode year
                ;---------------------------------------------------------
                getYear     
    859A 703A               CMP #58
    859C 19C985             JPZ parityDate ;Last bit -> Check parity
    859F 7032               CMP #50
    85A1 18A785             JNZ _gMet70
    85A4 2F0E80             STZA VAR_bitCache+1
                
                ;*** Get meteo ***
    85A7 32BF80 _gMet70     LDAA VAR_meteoCount1
    85AA 701C               CMP #28
    85AC 18BA85             JNZ _gYear0 ;Previous data not complete
    85AF 1A8386             JSR getBitChar
    85B2 52C080             LDXA VAR_meteoCount2
    85B5 4320               STA (ZP_meteoWrite),X
    85B7 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (year)
    85BA BD0E80 _gYear0     SHRA VAR_bitCache+1
    85BD 1A7686             JSR getBit
    85C0 E20E80             ORAA VAR_bitCache+1
    85C3 420E80             STAA VAR_bitCache+1
    85C6 10B586             JMP _RTS
                
                ;Last bit
                ;Check parity for whole date (Day, weekday, month, year)         
                parityDate
    85C9 1A7686             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    85CC 08                 PHA
                            ;Count high bits and add it to "VAR_dateParity"
                            ;Determine if bitcount of "VAR_dateParity" is even or odd
    85CD 320E80             LDAA VAR_bitCache+1
    85D0 5008               LDX #8
    85D2 591880             LDYA VAR_dateParity
    85D5 1A9186             JSR bitCnt
    85D8 17EA85             JPC _pDat0
    85DB 0C                 PLA ;Bit count = "odd" 
    85DC 18EE85             JNZ _pDateOK
                
    85DF 300B   _pDateBAD   LDA #00Bh ;Partity n.OK
    85E1 D21080             ANDA VAR_dataOK
    85E4 421080             STAA VAR_dataOK
                
                ;DEBUG print hours parity failure            
                
    85E7 10B586             JMP _RTS
                
    85EA 0C     _pDat0      PLA ;Bit count = "even"
    85EB 18DF85             JNZ _pDateBAD
                
    85EE 320E80 _pDateOK    LDAA VAR_bitCache+1
    85F1 1AA586             JSR bcdToDec
    85F4 42C680             STAA VAR_tmpYear ;Save year value
    85F7 3004               LDA #04h
    85F9 E21080             ORAA VAR_dataOK
    85FC 421080             STAA VAR_dataOK
                
                ;DEBUG print year
                
    85FF 10B586             JMP _RTS
                
                ;Decoding end
                ;---------------------------------------------------------
                
                ;DEBUG print interference sign
    8602 1F                 RTS
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on Multi-I/O LEDs   
                ;---------------------------------------------------------
                syncDisp
                ;Display synced status           
    8603 320B80             LDAA FLG_synced
    8606 191486             JPZ _syncD0
    8609 3008               LDA #08h 
    860B F2C780             EORA VAR_ledsDataOK
    860E 42C780             STAA VAR_ledsDataOK
    8611 106C86             JMP _syncD4
    8614 3008   _syncD0     LDA #08h 
    8616 E2C780             ORAA VAR_ledsDataOK
    8619 42C780             STAA VAR_ledsDataOK
                
    861C 321180             LDAA VAR_second
    861F 7015               CMP #21
    8621 166C86             JNC _syncD4 ;Second <21 -> No time information fetching
    8624 701D               CMP #29
    8626 163686             JNC _syncD1 ;Second >= 21 & <29 -> Fetching minutes
    8629 7024               CMP #36
    862B 164986             JNC _syncD2 ;Second >= 29 & < 36 -> Fetching hours
    862E 703B               CMP #59
    8630 165C86             JNC _syncD3 ;Second >= 36 & < 59 -> Fetching date
    8633 106C86             JMP _syncD4
                
                ;Fetching minutes
    8636 321080 _syncD1     LDAA VAR_dataOK
    8639 D001               AND #01h
    863B 186C86             JNZ _syncD4
    863E 3001               LDA #01h 
    8640 F2C780             EORA VAR_ledsDataOK
    8643 42C780             STAA VAR_ledsDataOK
    8646 106C86             JMP _syncD4
                
                ;Fetching hours
    8649 321080 _syncD2     LDAA VAR_dataOK
    864C D002               AND #02h
    864E 186C86             JNZ _syncD4
    8651 3002               LDA #02h 
    8653 F2C780             EORA VAR_ledsDataOK
    8656 42C780             STAA VAR_ledsDataOK
    8659 106C86             JMP _syncD4
                
                ;Fetching date 
    865C 321080 _syncD3     LDAA VAR_dataOK
    865F D004               AND #04h
    8661 186C86             JNZ _syncD4
    8664 3004               LDA #04h 
    8666 F2C780             EORA VAR_ledsDataOK
    8669 42C780             STAA VAR_ledsDataOK
                
    866C 321080 _syncD4     LDAA VAR_dataOK
    866F E2C780             ORAA VAR_ledsDataOK
    8672 1B0603             JSR (KERN_IOCHANGELED)
    8675 1F                 RTS
                
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on SCC-Board   
                ;---------------------------------------------------------
                
                ;--------------------------------------------------------- 
                ;Helper functions   
                ;---------------------------------------------------------
                
                ;Get bit information from Time (Output: A = High(80h), Low(00h))        
                getBit      
    8676 320D80             LDAA VAR_bitCache
    8679 7005               CMP #PARAM_LOWHIGH
    867B 168186             JNC _gBit0
                            ;Time >= PARAM_LOWHIGH -> Bit = 1
    867E 3080               LDA #80h
    8680 4D                 SKA
    8681 2C     _gBit0      CLA ;Time < PARAM_LOWHIGH -> Bit = 0
    8682 1F                 RTS
                
                ;Get bit information from Time as Char (Output: A = Char)        
                getBitChar      
    8683 320D80             LDAA VAR_bitCache
    8686 7005               CMP #PARAM_LOWHIGH
    8688 168E86             JNC _gBitC0
                            ;Time >= PARAM_LOWHIGH -> Bit = 1
    868B 3031               LDA #'1'
    868D 4E                 SKB
    868E 3030   _gBitC0     LDA #'0' ;Time < PARAM_LOWHIGH -> Bit = 0
    8690 1F                 RTS
                
                ;Count high bits
                ;Input: A = Byte, X = Number of bits, Y = Counter offset
                ;Output: A = Counter value, Carry = 0 -> odd, Carry = 1 -> even
                bitCnt
    8691 DB     _bCnt0      SHR
    8692 169686             JNC _bCnt1
    8695 8B                 INY
    8696 499186 _bCnt1      DXJP _bCnt0
    8699 29                 SAY
    869A 08                 PHA
    869B C002               MOD #2
    869D 19A286             JPZ _bCnt2
    86A0 04                 CLC ;Counter value "odd"
    86A1 4D                 SKA
    86A2 05     _bCnt2      SEC ;Counter value "even"
    86A3 0C                 PLA
    86A4 1F                 RTS
                
                ;Convert BCD to decimal (Input: A = BCD value) (Output: A = decimal vlaue)      
                bcdToDec
    86A5 08                 PHA
    86A6 B010               DIV #10h
    86A8 A00A               MUL #00Ah
    86AA 420E80             STAA VAR_bitCache+1
    86AD 0C                 PLA
    86AE D00F               AND #00Fh
    86B0 04                 CLC
    86B1 820E80             ADCA VAR_bitCache+1
    86B4 1F                 RTS
                
                _RTS    
    86B5 04                 CLC
    86B6 1F                 RTS
                
                _failRTS
    86B7 2C                 CLA
    86B8 05                 SEC
    86B9 1F                 RTS
                
                


Segment Table:
**************
Segment Name                 Startaddr  Endaddr     Size  Type
=========================================================================
default                           8000     86B9      6BA  CODE  fixed
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

No errors found.
