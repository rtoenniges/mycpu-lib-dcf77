                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                ;~~  [MyCA] Macro Cross Assembler V1.10 for MyCPU, (c) 2023 by Dennis Kuschel  ~~
                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                ;[File: sl60dcf77.asm]
                ;[ASCII]
                ;******************************************
                ;***********  DCF77 Library  **************
                ;******************************************
                ;***** by Robin TÃ¶nniges (2016-2024) ******
                ;******************************************
                
                ;[File: C:\Program Files (x86)\myca\include\conio.hsm]
                ;[ASCII]
                
                ;-- functions --
                KERN_KBHIT          EQU 023Ah
                KERN_GETCH          EQU 023Ch
                KERN_UNGETCH        EQU 023Eh
                KERN_TESTCTRLC      EQU 0240h
                KERN_PRINTCHAR      EQU 0242h
                KERN_PRINTSTR       EQU 0244h
                KERN_PRINTSTRR      EQU 0246h
                KERN_GETCRSRPOS     EQU 0248h
                KERN_GETSCREENSIZE  EQU 024Ah
                KERN_GETFREELINES   EQU 024Ch
                KERN_INPUT          EQU 0258h
                KERN_PRINTHEX       EQU 025Eh
                KERN_PRINTDEZ       EQU 0260h
                KERN_SETCONSOLE     EQU 022Ch
                KERN_GSTERMINAL     EQU 02A0h
                KERN_QUOTEMODE      EQU 02E6h
                KERN_GSSTDOUTVECT   EQU 02D4h
                KERN_SETINPSPVECT   EQU 025Ah
                KERN_SETINPUTMODE   EQU 025Ch
                
                ;-- flag definitions --
                CON_DISP_LCD        SET 01h
                CON_DISP_SCREEN     SET 02h
                CON_DISP_TTY        SET 03h
                CON_DISP_TTYSCR     SET 04h
                CON_DISP_NONE       SET 0Fh
                CON_KEYB_KEYB       SET 10h
                CON_KEYB_TTY        SET 20h
                CON_KEYB_NONE       SET 0F0h
                INPMODE_BASIC       SET 0
                INPMODE_BASICRUN    SET 1
                INPMODE_KERNALSHELL SET 2
                INPUTFLAG_HISTORY   SET 01h
                INPUTFLAG_SIZE      SET 02h
                INPUTFLAG_QUOTE     SET 04h
                INPUTFLAG_LINE80    SET 08h
                INPUTFLAG_TABKEY    SET 10h
                INPUTFLAG_NOBORDER  SET 20h
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\sys.hsm]
                ;[ASCII]
                
                KERN_WARMSTART      EQU 0220h
                KERN_FILEINPUT      EQU 027Ah
                KERN_GETINFO        EQU 02A2h
                KERN_REGFILEDEVICE  EQU 0264h
                KERN_FSREGISTER     EQU 02AEh
                KERN_FSUNREGISTER   EQU 02B0h
                KERN_GETCHECKSUM16  EQU 02B2h
                KERN_SETMEMBORDERS  EQU 029Eh
                KERN_SETIDLEFUNC    EQU 02EAh
                KERN_IDLE           EQU 02ECh
                KERN_TESTVERSION    EQU 030Ch
                KERN_CONFIGBYTE     EQU 030Ah
                KERN_IDEDRIVER      EQU 030Eh
                KERN_MULTIPLEX      EQU 0312h
                KERN_PRGMOVE        EQU 032Ah
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\code.hsm]
                ;[ASCII]
                
                KERN_ADAPTOPCODES   EQU 02C4h
                KERN_EXECUTEFILE    EQU 02BEh
                KERN_EXITTSR        EQU 02C2h
                KERN_KILLPROGRAM    EQU 02C0h
                KERN_KILLPROGEX     EQU 0328h
                KERN_SPECROMCALL    EQU 02B6h
                KERN_CALLFROMROM    EQU 02B8h
                KERN_CALLROM        EQU 02BAh
                KERN_LIBCALL        EQU 02CAh
                KERN_LIBSELECT      EQU 02CCh
                KERN_LIBDESELECT    EQU 02CEh
                KERN_LIBUNLOAD      EQU 02D0h
                KERN_ISLOADED       EQU 02D2h
                KERN_ASSERT         EQU 0326h
                
                REG_ROMPAGE  SET 3900h
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\interrupt.hsm]
                ;[ASCII]
                
                KERN_IC_ENABLEINT   EQU 0222h
                KERN_IC_DISABLEINT  EQU 0224h
                KERN_IC_GETVECTOR   EQU 0226h
                KERN_IC_SETVECTOR   EQU 0228h
                KERN_IC_REGISTERBH  EQU 022Ah
                KERN_SPINLOCK       EQU 02A8h
                KERN_INTVECT        EQU 0332h
                
                KERN_INSDELTIMER    EQU 02AAh
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\time.hsm]
                ;[ASCII]
                
                KERN_GETSETTIME     EQU 029Ah
                KERN_GETSETDATE     EQU 029Ch
                
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\mem.hsm]
                ;[ASCII]
                
                KERN_MALLOCFREE     EQU 02C8h
                KERN_ALLOCFREERAMP  EQU 02ACh
                KERN_ALLOCDBUF      EQU 031Ah
                KERN_FREEDBUF       EQU 031Ch
                KERN_ALLOCFREEZSP   EQU 02F4h
                
                REG_RAMPAGE         SET 3800h
                ADR_RAMPAGE_START   SET 4000h
                
                ;[File: sl60dcf77.asm]
                ;Comment this line out if you dont want synced status on Multi-I/O-LEDs
                ;Comment this line in if you use the SCC-Rack-Extension
                ;Comment this line in if library should load on higher ROM-Page
                ;Comment this line in if you want debug output
                
                ;Debug Message
                ;Second[MeteoCount1|MeteoCount2]: BitLevel(PulseTime) {Additional comments}
                ;Example: 28[28|49]: H(6) Minute: 32
                
                ORG 8000h
    8000 0280    DW 8002h
    8002 7B81    DW initfunc
    8004 C681    DW termfunc
    8006 7B81    DW codestart
                ;-------------------------------------;
                ; declare variables
                
                ;Addresses
                HDW_INT             EQU 7       ;IRQ7
                
                HDW_SCC_BOARD       EQU 3000h   ;Address of SCC board
                
                KERN_IOCHANGELED    EQU 0306h   ;Kernel routine for changing the Multi-I/O-LEDs
                
                ;Decoding parameter
                ;Low        = 100ms         is theoretically 3
                ;High       = 200ms         is theoretically 6
                ;Syncpause  = 1800-1900ms   is theoretically 54-57
                ;New second = 800-900ms     is theoretically 24-27
                PARAM_LOWHIGH       SET 5       ;Edge time < PARAM_LOWHIGH      = 0(Low),           >= PARAM_LOWHIGH    = 1(High)
                PARAM_SYNCPAUSE     SET 50      ;Edge time < PARAM_SYNCPAUSE    = New second/bit,   >= PARAM_SYNCPAUSE  = Syncpoint
                PARAM_SECOND        SET 20      ;Edge time < PARAM_SECOND       = New bit,          >= PARAM_SECOND     = New second
                PARAM_IGNORE        SET 2       ;Edge time < PARAM_IGNORE       = Signal interference (ignore)
                
                ;Variables
    8008 01     FLG_firstStart      DB  1   ;This flag indicates first start of library -> Ignore first edge
    8009 0000   FLG_dcfReceiver     DW  0   ;This flag is set to 1 if new input (rising edge) comes from the DCF77-Receiver
                                            ;FLG_dcfReceiver+1 is set to 1 if bit is ready for decoding
    800B 01     FLG_synced          DB  1   ;Sync flag -> 0 if synchron with dcf77
    800C 00     VAR_bitCount        DB  0   ;Timer Interrupt Counter
    800D 0000   VAR_bitCache        DW  0   ;Byte 0 = time value, Byte 1 = temp value
    800F 00     VAR_edgeCnt         DB  0   ;Edge counter
    8010 00     VAR_dataOK          DB  0   ;Parity check -> Bit 1 = Minutes OK, Bit 2 = Hours OK, Bit 3 = Date OK, Bit 4 = Meteo OK
                
                ;VAR_pSecond         DB  0   ;Pseudo second to bridge desynchronization
    8011 00     VAR_second          DB  0   ;DCF77-Second/Bit counter
                
                ;Time variables initialized with FFh to "lock" Get-functions until 2nd synchronization point reached
    8012 FF     VAR_minutes         DB  0FFh
    8013 FF     VAR_hours           DB  0FFh
                
    8014 FF     VAR_day             DB  0FFh
    8015 FF     VAR_weekday         DB  0FFh
    8016 FF     VAR_month           DB  0FFh
    8017 FF     VAR_year            DB  0FFh
                
    8018 00     VAR_dateParity      DB  0
                
                ;2x 82 Bit + 0 (Little endian)
    8019 000000 VAR_meteo1          DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ;Weather bits n
    801C 000000 
    801F 000000 
    8022 000000 
    8025 0000   
    8027 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ;Weather bits n+1
    802A 000000 
    802D 000000 
    8030 000000 
    8033 0000   
                                        ;******* Minute *******|********* Hour *********|********* Day **********|**** Month ****|*** WD **|******** Year *********|
    8035 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0
    8038 000000 
    803B 000000 
    803E 000000 
    8041 000000 
    8044 000000 
    8047 000000 
    804A 000000 
    804D 000000 
    8050 000000 
    8053 000000 
    8056 000000 
    8059 000000 
    805C 00     
    805D 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ;Weather bits n+2
    8060 000000 
    8063 000000 
    8066 000000 
    8069 000000 
                
    806C 000000 VAR_meteo2          DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    806F 000000 
    8072 000000 
    8075 000000 
    8078 0000   
    807A 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    807D 000000 
    8080 000000 
    8083 000000 
    8086 0000   
    8088 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0
    808B 000000 
    808E 000000 
    8091 000000 
    8094 000000 
    8097 000000 
    809A 000000 
    809D 000000 
    80A0 000000 
    80A3 000000 
    80A6 000000 
    80A9 000000 
    80AC 000000 
    80AF 00     
    80B0 000000                     DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    80B3 000000 
    80B6 000000 
    80B9 000000 
    80BC 000000 
                
                ZP_meteoWrite       EQU 10h ;Write pointer for meteo data
                ZP_meteoRead        EQU 12h ;Read pointer for meteo data
    80BF 00     VAR_meteoCount1     DB  0 ;Weather bit counter (0-41)
    80C0 00     VAR_meteoCount2     DB  0 ;Time bit counter (42-81)
                
    80C1 00     VAR_tmpMinutes      DB  0
    80C2 00     VAR_tmpHours        DB  0
    80C3 00     VAR_tmpDay          DB  0
    80C4 00     VAR_tmpWeekday      DB  0
    80C5 00     VAR_tmpMonth        DB  0
    80C6 00     VAR_tmpYear         DB  0
    80C7 00     VAR_ledsDataOK      DB  0
                
    80C8 00     VAR_timerhandle     DB  0   ;Address of timer interrupt handle
    80C9 00     VAR_RAMPAGE         DB  0
                
    80CA D3594E STR_sync            DB "Sync pause detected!",0
    80CD 432050 
    80D0 415553 
    80D3 452044 
    80D6 455445 
    80D9 435445 
    80DC 442100 
    80DF C94E54 STR_interference    DB "Interference detected!",0
    80E2 455246 
    80E5 455245 
    80E8 4E4345 
    80EB 204445 
    80EE 544543 
    80F1 544544 
    80F4 2100   
    80F6 D3594E STR_lost_sync       DB "Synchronization lost!",0
    80F9 434852 
    80FC 4F4E49 
    80FF 5A4154 
    8102 494F4E 
    8105 204C4F 
    8108 535421 
    810B 00     
    810C CD494E STR_minute_fail     DB "Minute: Bad Parity!",0
    810F 555445 
    8112 3A20C2 
    8115 414420 
    8118 D04152 
    811B 495459 
    811E 2100   
    8120 C84F55 STR_hour_fail       DB "Hour: Bad Parity!",0
    8123 523A20 
    8126 C24144 
    8129 20D041 
    812C 524954 
    812F 592100 
    8132 C44154 STR_date_fail       DB "Date: Bad Parity!",0
    8135 453A20 
    8138 C24144 
    813B 20D041 
    813E 524954 
    8141 592100 
    8144 CD4554 STR_meteo           DB "Meteo: ",0
    8147 454F3A 
    814A 2000   
    814C CD494E STR_minute          DB "Minute: ",0
    814F 555445 
    8152 3A2000 
    8155 C84F55 STR_hour            DB "Hour: ",0
    8158 523A20 
    815B 00     
    815C C44159 STR_day             DB "Day: ",0
    815F 3A2000 
    8162 D74545 STR_weekday         DB "Weekday: ",0
    8165 4B4441 
    8168 593A20 
    816B 00     
    816C CD4F4E STR_month           DB "Month: ",0
    816F 54483A 
    8172 2000   
    8174 D94541 STR_year            DB "Year: ",0
    8177 523A20 
    817A 00     
                
                ;-------------------------------------;
                ; begin of assembly code
                
                codestart
                ;--------------------------------------------------------- 
                ;Library handling  
                ;---------------------------------------------------------  
                
                ;Library initialization
                ;---------------------------------------------------------   
                initfunc
    817B E000               ORA #0
    817D 18E881             JNZ funcdispatch
    8180 04                 CLC
    8181 1BD202             JSR (KERN_ISLOADED)
    8184 2C                 CLA
    8185 17E388             JPC _RTS
                
                ;Initialize Zeropointer
    8188 3C10               FLG ZP_meteoWrite
    818A 3C11               FLG ZP_meteoWrite+1
    818C 3C12               FLG ZP_meteoRead
    818E 3C13               FLG ZP_meteoRead+1
                
                            ;move this program to a separate memory page
    8190 6C7B81             LPT  #codestart
    8193 300E               LDA  #0Eh
    8195 1B1203             JSR  (KERN_MULTIPLEX)  ;may fail on older kernel
                
    8198 6C1980             LPT #VAR_meteo1
    819B 6F12               SPT ZP_meteoRead
    819D 6C6C80             LPT #VAR_meteo2
    81A0 6F10               SPT ZP_meteoWrite
                
                ;Enable hardware interrupt (IRQ7)
    81A2 3007               LDA #HDW_INT
    81A4 6CB482             LPT #int_dcf77
    81A7 1B2802             JSR (KERN_IC_SETVECTOR)
    81AA 1B2202             JSR (KERN_IC_ENABLEINT)
                
                ;Enable timer interrupt
    81AD 2C                 CLA    
    81AE 6C4483             LPT #int_timer
    81B1 1B1203             JSR (KERN_MULTIPLEX)
    81B4 42C880             STAA VAR_timerhandle  ;Save adress of timerhandle 
                
                ;Register idle function
    81B7 05                 SEC
    81B8 6C4E83             LPT #int_idle
    81BB 1BEA02             JSR (KERN_SETIDLEFUNC)
                
                ;If sync display enabled clear LEDs 
    81BE 2C                 CLA
    81BF 1B0603             JSR (KERN_IOCHANGELED)
    81C2 2C                 CLA
    81C3 11C202             JMP (KERN_EXITTSR)
                
                ;Termination function
                ;---------------------------------------------------------                  
                termfunc  
                            ;Disable timer-interrupt
    81C6 3001               LDA  #1
    81C8 52C880             LDXA VAR_timerhandle      
    81CB 1B1203             JSR (KERN_MULTIPLEX)
                            ;Disable hardware-interrupt
    81CE 3007               LDA #HDW_INT
    81D0 1B2402             JSR (KERN_IC_DISABLEINT)
                            ;Disable idle function
    81D3 04                 CLC
    81D4 6C4E83             LPT #int_idle
    81D7 1BEA02             JSR (KERN_SETIDLEFUNC)
                
                            ;Set LEDs to default
    81DA 30FF               LDA #0FFh
    81DC 1B0603             JSR (KERN_IOCHANGELED)
                
    81DF 320030             LDAA HDW_SCC_BOARD
    81E2 D0FB               AND #0FBh
    81E4 420030             STAA HDW_SCC_BOARD
    81E7 1F                 RTS
                
                ;Functiondispatch
                ;---------------------------------------------------------     
                funcdispatch
    81E8 9B                 DEC
    81E9 191782             JPZ func_getSeconds     ;Function 01h  
    81EC 9B                 DEC 
    81ED 192382             JPZ func_getMinutes     ;Function 02h         
    81F0 9B                 DEC 
    81F1 193682             JPZ func_getHours       ;Function 03h 
    81F4 9B                 DEC 
    81F5 194982             JPZ func_getDay         ;Function 04h   
    81F8 9B                 DEC 
    81F9 195C82             JPZ func_getWeekday     ;Function 05h       
    81FC 9B                 DEC 
    81FD 196F82             JPZ func_getMonth       ;Function 06h      
    8200 9B                 DEC 
    8201 198282             JPZ func_getYear        ;Function 07h 
    8204 9B                 DEC 
    8205 199582             JPZ func_getMeteoTime   ;Function 08h
    8208 9B                 DEC 
    8209 19A282             JPZ func_getEntryPoint  ;Function 09h
    820C 9B                 DEC
    820D 19A882             JPZ func_getROMPage     ;Function 0Ah
    8210 9B                 DEC
    8211 19AE82             JPZ func_getRAMPage     ;Function 0Bh
    8214 10E588             JMP _failRTS
                
                ;Function '01h' = Get seconds (OUTPUT = Accu), Carry = 0 if successfull
                func_getSeconds
    8217 320B80             LDAA FLG_synced
    821A 18E588             JNZ _failRTS
    821D 321180             LDAA VAR_second
    8220 10E388             JMP _RTS
                
                ;Function '02h' = Get minutes (OUTPUT = Accu), Carry = 0 if successfull         
                func_getMinutes  
    8223 321080             LDAA VAR_dataOK
    8226 D001               AND #01h
    8228 19E588             JPZ _failRTS
    822B 321280             LDAA VAR_minutes
    822E 70FF               CMP #0FFh
    8230 19E588             JPZ _failRTS
    8233 10E388             JMP _RTS
                
                ;Function '03h' = Get hours (OUTPUT = Accu), Carry = 0 if successfull 
                func_getHours
    8236 321080             LDAA VAR_dataOK
    8239 D002               AND #02h
    823B 19E588             JPZ _failRTS
    823E 321380             LDAA VAR_hours
    8241 70FF               CMP #0FFh
    8243 19E588             JPZ _failRTS
    8246 10E388             JMP _RTS        
                
                ;Function '04h' = Get day (OUTPUT = Accu), Carry = 0 if successfull 
                func_getDay
    8249 321080             LDAA VAR_dataOK
    824C D004               AND #04h
    824E 19E588             JPZ _failRTS
    8251 321480             LDAA VAR_day
    8254 70FF               CMP #0FFh
    8256 19E588             JPZ _failRTS
    8259 10E388             JMP _RTS    
                
                ;Function '05h' = Get weekday (OUTPUT = Accu), Carry = 0 if successfull 
                ;1 = monday, 2 = tuesday, 3 = wednesday, 4 = thursday, 5 = friday, 6 = saturday, 7 = sunday
                func_getWeekday
    825C 321080             LDAA VAR_dataOK
    825F D004               AND #04h
    8261 19E588             JPZ _failRTS
    8264 321580             LDAA VAR_weekday
    8267 70FF               CMP #0FFh
    8269 19E588             JPZ _failRTS
    826C 10E388             JMP _RTS   
                
                ;Function '06h' = Get month (OUTPUT = Accu), Carry = 0 if successfull 
                func_getMonth
    826F 321080             LDAA VAR_dataOK
    8272 D004               AND #04h
    8274 19E588             JPZ _failRTS
    8277 321680             LDAA VAR_month
    827A 70FF               CMP #0FFh
    827C 19E588             JPZ _failRTS
    827F 10E388             JMP _RTS     
                
                ;Function '07h' = Get year (OUTPUT = Accu), Carry = 0 if successfull 
                func_getYear
    8282 321080             LDAA VAR_dataOK
    8285 D004               AND #04h
    8287 19E588             JPZ _failRTS
    828A 321780             LDAA VAR_year
    828D 70FF               CMP #0FFh
    828F 19E588             JPZ _failRTS
    8292 10E388             JMP _RTS
                
                ;Function '08h' = Get encoded METEO Information (X/Y = Pointer to zero terminated string), Carry = 0 if successfull
                ;Bit 0-41 = meteotime (3 minutes)
                ;Bit 42-81 = time information (Minutes + Hours + Day + Month + Weekday + Year) without parity
                func_getMeteoTime
    8295 321080             LDAA VAR_dataOK
    8298 D008               AND #08h
    829A 19E588             JPZ _failRTS
    829D 5F12               LPT ZP_meteoRead
    829F 10E388             JMP _RTS
                
                ;Function '09h' = Get entrypoint of library         
                func_getEntryPoint
    82A2 6CE881             LPT #funcdispatch
    82A5 10E388             JMP _RTS
                
                ;Function '0Ah' = Get ROM-Page of library
                func_getROMPage
    82A8 320039             LDAA REG_ROMPAGE
    82AB 10E388             JMP _RTS
                
                ;Function '0Bh' = Get RAM-Page of library
                func_getRAMPage
    82AE 320038             LDAA REG_RAMPAGE
    82B1 10E388             JMP _RTS
                
                ;--------------------------------------------------------- 
                ;Interrupt routines   
                ;---------------------------------------------------------       
                
                ;BEGIN - Receiver interrupt
                ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    
                int_dcf77
                            ;First start?
    82B4 320880             LDAA FLG_firstStart
    82B7 19D282             JPZ _rInt0
    82BA 2F0880             STZA FLG_firstStart
    82BD 1F                 RTS
                
                            ;Check for interference
    82BE 320C80             LDAA VAR_bitCount
    82C1 7002               CMP #PARAM_IGNORE
    82C3 17D282             JPC _rInt0
                            ;Interference detected -> Ignore
                
                ; print interference            
    82C6 300D       LDA #13 ;\r
    82C8 1B4202     JSR (KERN_PRINTCHAR)
    82CB 6CDF80     LPT #STR_interference
    82CE 1B4402     JSR (KERN_PRINTSTR)
                
    82D1 1F                 RTS
                
    82D2 3001   _rInt0      LDA #1 
    82D4 420980             STAA FLG_dcfReceiver ;Flank detected -> Set flag (Pause timer count)
    82D7 7D0F80             INCA VAR_edgeCnt ;Count edges (For signal error detection)
    82DA 320C80             LDAA VAR_bitCount
    82DD 420D80             STAA VAR_bitCache ;Move bitCounter to cache
    82E0 2F0C80             STZA VAR_bitCount
    82E3 2F0980             STZA FLG_dcfReceiver ;Resume timer count
                
                            ;LDAA VAR_bitCache 
    82E6 7032               CMP #PARAM_SYNCPAUSE ;Synchronize with signal -> Detect syncpoint/-gap
    82E8 160083             JNC _rInt2
                            ;Time >= PARAM_SYNCPAUSE -> Time longer than 1 second
                            ;Syncpoint reached
    82EB 2F0B80             STZA FLG_synced
    82EE 2F1180             STZA VAR_second
    82F1 2F0F80             STZA VAR_edgeCnt
                
    82F4 300D       LDA #13 ;\r
    82F6 1B4202     JSR (KERN_PRINTCHAR)
    82F9 6CCA80     LPT #STR_sync
    82FC 1B4402     JSR (KERN_PRINTSTR)
                
    82FF 1F                 RTS
                
                ;Time < PARAM_SYNCPAUSE          
    8300 7014   _rInt2      CMP #PARAM_SECOND 
    8302 160983             JNC _rInt3
    8305 7D1180             INCA VAR_second ;Time >= PARAM_SECOND -> Next second
    8308 1F                 RTS
                
                ;Time < PARAM_SECOND -> New bit
    8309 320F80 _rInt3      LDAA VAR_edgeCnt ;First do signal checking -> Twice as many edges+1 as seconds?
    830C 05                 SEC
    830D 9001               SBC #1
    830F B002               DIV #2
    8311 721180             CMPA VAR_second
    8314 192D83             JPZ _rInt4 ;Check successfull -> Go forward to bit checking
                
                ;No longer synchronized        
                deSync  
    8317 3001               LDA #1 
    8319 420B80             STAA FLG_synced
    831C 2F1080             STZA VAR_dataOK
    831F 3008               LDA #08
    8321 42C780             STAA VAR_ledsDataOK
    8324 2F1180             STZA VAR_second
    8327 2FBF80             STZA VAR_meteoCount1
    832A 2FC080             STZA VAR_meteoCount2
                
                ;New bit -> Ready for decode   
    832D 3001   _rInt4      LDA #1
    832F 420A80             STAA FLG_dcfReceiver+1
                
                ; print desynchronisation            
    8332 320B80     LDAA FLG_synced
    8335 19E388     JPZ _RTS
    8338 300D       LDA #13 ;\r
    833A 1B4202     JSR (KERN_PRINTCHAR)
    833D 6CF680     LPT #STR_lost_sync
    8340 1B4402     JSR (KERN_PRINTSTR)
                
    8343 1F                 RTS
                
                ;END - Receiver interrupt
                ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                
                ;BEGIN - Timer interrupt 30.51757813 times per second
                ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
                int_timer
                            ;Measure time between two edges
    8344 320980             LDAA FLG_dcfReceiver
    8347 18E388             JNZ _RTS       
    834A 7D0C80             INCA VAR_bitCount
    834D 1F                 RTS
                ;END - Timer interrupt
                ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                
                ;BEGIN - Idle function (Bit decoding)
                ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
                int_idle
    834E 320A80             LDAA FLG_dcfReceiver+1
    8351 19E388             JPZ _RTS
    8354 2F0A80             STZA FLG_dcfReceiver+1 ;Get ready for new bit immediately
                ;--------------------------------------------------------- 
                ;DCF77 decoding   
                ;---------------------------------------------------------                     
                
                ;New bit received
                ;---------------------------------------------------------
                ;Display synced status on I/O-Module LEDs
    8357 1AFE87         JSR syncDisp
                ;Display synced status on SCC-Board
    835A 1A7188         JSR sccBoard
                
    835D 320B80         LDAA FLG_synced
    8360 18E388         JNZ _RTS
                
                ; print time measurement and bit information
    8363 300D           LDA #13 ;\r
    8365 1B4202         JSR (KERN_PRINTCHAR)
    8368 321180         LDAA VAR_second
    836B 2D             CLX
    836C 2E             CLY
    836D 1B6002         JSR (KERN_PRINTDEZ)
    8370 305B           LDA #'['
    8372 1B4202         JSR (KERN_PRINTCHAR) 
    8375 32BF80         LDAA VAR_meteoCount1
    8378 2D             CLX
    8379 2E             CLY
    837A 1B6002         JSR (KERN_PRINTDEZ)
    837D 307C           LDA #'|'
    837F 1B4202         JSR (KERN_PRINTCHAR) 
    8382 32C080         LDAA VAR_meteoCount2
    8385 2D             CLX
    8386 2E             CLY
    8387 1B6002         JSR (KERN_PRINTDEZ)
    838A 305D           LDA #']'
    838C 1B4202         JSR (KERN_PRINTCHAR) 
    838F 303A           LDA #':'
    8391 1B4202         JSR (KERN_PRINTCHAR)
    8394 3020           LDA #' '
    8396 1B4202         JSR (KERN_PRINTCHAR)
                
    8399 1AA488         JSR getBit
    839C 7080           CMP #80h
    839E 18A683         JNZ _dbg0
    83A1 30C8           LDA #'H'
    83A3 10A883         JMP _dbg1
    83A6 30CC   _dbg0   LDA #'L'
    83A8 1B4202 _dbg1   JSR (KERN_PRINTCHAR) 
    83AB 3028           LDA #'('
    83AD 1B4202         JSR (KERN_PRINTCHAR) 
                
    83B0 320D80         LDAA VAR_bitCache
    83B3 2D             CLX
    83B4 2E             CLY
    83B5 1B6002         JSR (KERN_PRINTDEZ)
                
    83B8 3029           LDA #')'
    83BA 1B4202         JSR (KERN_PRINTCHAR) 
                
    83BD 321180             LDAA VAR_second
    83C0 183884             JNZ _nBit3
    83C3 1AA488             JSR getBit
    83C6 181783             JNZ deSync ;If Bit 0 != 0 -> Not synchronized or incorrect signal
                
                ;Second/bit = 0 -> Take over data from last minute    
    83C9 320B80             LDAA FLG_synced
    83CC 18E388             JNZ _RTS
    83CF 321180             LDAA VAR_second
    83D2 22                 TAY            
    83D3 321080             LDAA VAR_dataOK
    83D6 D001               AND #01h
    83D8 19E283             JPZ _nBit1
    83DB 32C180             LDAA VAR_tmpMinutes ;Take over 'minutes'
    83DE 421280             STAA VAR_minutes
    83E1 20                 TAX
    83E2 321080 _nBit1      LDAA VAR_dataOK
    83E5 D002               AND #02h
    83E7 190584             JPZ _nBit2
    83EA 32C280             LDAA VAR_tmpHours ;Take over 'hours'
    83ED 421380             STAA VAR_hours
                            ;Set system time
    83F0 08                 PHA
    83F1 321080             LDAA VAR_dataOK
    83F4 D003               AND #03h
    83F6 7003               CMP #03h
    83F8 18E388             JNZ _RTS
    83FB 0C                 PLA
    83FC 6400               CPY #0
    83FE 180584             JNZ _nBit2 ;Sync every minute at xx:xx:00
    8401 05                 SEC
    8402 1B9A02             JSR (KERN_GETSETTIME)
                
    8405 321080 _nBit2      LDAA VAR_dataOK
    8408 D004               AND #04h
    840A 19E388             JPZ _RTS
    840D 32C680             LDAA VAR_tmpYear ;Take over 'year'
    8410 421780             STAA VAR_year
    8413 22                 TAY
    8414 32C580             LDAA VAR_tmpMonth ;Take over 'month'
    8417 421680             STAA VAR_month
    841A 20                 TAX
    841B 32C480             LDAA VAR_tmpWeekday ;Take over 'weekday'
    841E 421580             STAA VAR_weekday
    8421 32C380             LDAA VAR_tmpDay ;Take over 'day'
    8424 421480             STAA VAR_day
                            ;Set system date
    8427 08                 PHA
    8428 321180             LDAA VAR_second
    842B 7000               CMP #0
    842D 18E388             JNZ _RTS ;Sync every minute at xx:xx:00
    8430 0C                 PLA
    8431 05                 SEC
    8432 1B9C02             JSR (KERN_GETSETDATE)
                
    8435 10E388             JMP _RTS
                
                ;Bit > 0        
    8438 7014   _nBit3      CMP #20
    843A 184684             JNZ _nBit4
    843D 1AA488             JSR getBit ;Second/bit = 20 -> Begin of time information always '1'
    8440 191783             JPZ deSync ;If Bit 20 != 1 -> Not synchronized or incorrect signal
    8443 10E388             JMP _RTS
                
                ;Bit != 20 - Get/decode data
    8446 321180 _nBit4      LDAA VAR_second
    8449 700F               CMP #15
    844B 167D84             JNC getMeteo ;Go to meteo
                            ;Second >= 15
    844E 7015               CMP #21
    8450 16E388             JNC _RTS ; Ignore bit 15-20
                            ;Second >= 21
    8453 701D               CMP #29
    8455 16EB84             JNC getMinutes ;Go to minute decoding
                            ;Second >= 29
    8458 7024               CMP #36
    845A 168A85             JNC getHours ;Go to hour decoding
                            ;Second >= 36
    845D 702A               CMP #42
    845F 162386             JNC getDay ;Go to day decoding
                            ;Second >= 42
    8462 702D               CMP #45
    8464 169386             JNC getWDay ;Go to weekday decoding
                            ;Second >= 45
    8467 7032               CMP #50
    8469 16FF86             JNC getMonth ;Go to month decoding
                            ;Second >= 50
    846C 703B               CMP #59
    846E 166C87             JNC getYear ;Go to year decoding
                            ;Second >= 59
    8471 18E388             JNZ _RTS
                            ;Second = 59 -> Leap second!
    8474 1AA488             JSR getBit ;Always '0'
    8477 181783             JNZ deSync 
    847A 10E388             JMP _RTS
                
                ;Get/decode meteotime
                ;---------------------------------------------------------
                getMeteo    
    847D 1A2382             JSR func_getMinutes
    8480 17C684             JPC _gMet12 ;No minute data available -> Skip meteo section
    8483 C003               MOD #3
    8485 19CF84             JPZ _gMet10 ;//Check for start minute -> = 0, 3, 6, 9, ...
                            ;Minute -> n+1 or n+2
    8488 32BF80             LDAA VAR_meteoCount1
    848B 700E               CMP #14
    848D 16E388             JNC _RTS ;Previous data not complete
    8490 20                 TAX
    8491 1AB188             JSR getBitChar
    8494 4310               STA (ZP_meteoWrite),X
    8496 7DBF80             INCA VAR_meteoCount1        
    8499 21                 TXA
    849A 7029               CMP #41
    849C 18E388             JNZ _RTS
                            ;Last bit received
    849F 2C                 CLA
    84A0 5052               LDX #82
    84A2 4310               STA (ZP_meteoWrite),X ;Terminate String with 0
    84A4 3008               LDA #08h
    84A6 E21080             ORAA VAR_dataOK
    84A9 421080             STAA VAR_dataOK
    84AC 5F12               LPT ZP_meteoRead ;Swap read and write register
    84AE 7A                 PHR
    84AF 5F10               LPT ZP_meteoWrite
    84B1 6F12               SPT ZP_meteoRead
    84B3 8A                 PLR
    84B4 6F10               SPT ZP_meteoWrite
                
                ; print meteo string
    84B6 3020       LDA #' '
    84B8 1B4202     JSR (KERN_PRINTCHAR)
    84BB 6C4481     LPT #STR_meteo
    84BE 1B4402     JSR (KERN_PRINTSTR)
    84C1 5F12       LPT ZP_meteoRead
    84C3 1B4402     JSR (KERN_PRINTSTR)
                
    84C6 2FBF80 _gMet12     STZA VAR_meteoCount1 ;Reset bit counter
    84C9 2FC080             STZA VAR_meteoCount2 ;Reset bit counter            
    84CC 10E388             JMP _RTS    
                
    84CF 321180 _gMet10     LDAA VAR_second ;Start minute (0, 3, 6, 9, ...)
    84D2 7001               CMP #1
    84D4 18DD84             JNZ _gMet11 ;Bit > 1 -> Write to Array
    84D7 2FBF80             STZA VAR_meteoCount1 ;First minute & first bit -> Reset bit counter
    84DA 2FC080             STZA VAR_meteoCount2 ;First minute & first bit -> Reset bit counter
    84DD 1AB188 _gMet11     JSR getBitChar
    84E0 52BF80             LDXA VAR_meteoCount1
    84E3 4310               STA (ZP_meteoWrite),X
    84E5 7DBF80             INCA VAR_meteoCount1
    84E8 10E388             JMP _RTS        
                
                ;Get/decode minutes
                ;---------------------------------------------------------
                getMinutes   
    84EB 701C               CMP #28
    84ED 192585             JPZ _gMet21 ;Last bit -> Check parity
    84F0 7015               CMP #21
    84F2 180585             JNZ _gMet20
    84F5 2F0E80             STZA VAR_bitCache+1    ;First bit -> Clear data
    84F8 32BF80             LDAA VAR_meteoCount1
    84FB 701C               CMP #28
    84FD 181885             JNZ _gMin0 ;Previous meteo data not complete
    8500 302A               LDA #42
    8502 42C080             STAA VAR_meteoCount2
                
                ;*** Get meteo 1/2 ***
    8505 32BF80 _gMet20     LDAA VAR_meteoCount1
    8508 701C               CMP #28
    850A 181885             JNZ _gMin0 ;Previous meteo data not complete
    850D 1AB188             JSR getBitChar
    8510 52C080             LDXA VAR_meteoCount2
    8513 4310               STA (ZP_meteoWrite),X
    8515 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (minutes)
    8518 1AA488 _gMin0      JSR getBit
    851B E20E80             ORAA VAR_bitCache+1
    851E DB                 SHR
    851F 420E80             STAA VAR_bitCache+1
    8522 10E388             JMP _RTS
                
                ;*** Get meteo 2/2 ***
    8525 32C080 _gMet21     LDAA VAR_meteoCount2
    8528 7031               CMP #49
    852A 183585             JNZ parityMinutes ;Previous meteo data not complete
    852D 20                 TAX
    852E 3030               LDA #'0'
    8530 4310               STA (ZP_meteoWrite),X
    8532 7DC080             INCA VAR_meteoCount2
                
                ;Last bit
                ;Check parity (minutes)        
                parityMinutes  
    8535 1AA488             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    8538 08                 PHA
                            ;Determine if bitcount of data is even or odd
    8539 320E80             LDAA VAR_bitCache+1
    853C 5007               LDX #7
    853E 2E                 CLY
    853F 1ABF88             JSR bitCnt
    8542 175F85             JPC _pMin0   
    8545 0C                 PLA ;Bit count = "odd"
    8546 186385             JNZ _pMinOK
                
    8549 300E   _pMinBAD    LDA #00Eh ;Parity n.OK
    854B D21080             ANDA VAR_dataOK
    854E 421080             STAA VAR_dataOK
                
                ; print minutes parity failure            
    8551 3020       LDA #' '
    8553 1B4202     JSR (KERN_PRINTCHAR)
    8556 6C0C81     LPT #STR_minute_fail
    8559 1B4402     JSR (KERN_PRINTSTR)
                
    855C 10E388             JMP _RTS
                
    855F 0C     _pMin0      PLA ;Bit count = "even"
    8560 184985             JNZ _pMinBAD
                
    8563 320E80 _pMinOK     LDAA VAR_bitCache+1
    8566 1AD388             JSR bcdToDec
    8569 42C180             STAA VAR_tmpMinutes
    856C 3001               LDA #01h
    856E E21080             ORAA VAR_dataOK
    8571 421080             STAA VAR_dataOK
                
                ; print minutes
    8574 3020       LDA #' '
    8576 1B4202     JSR (KERN_PRINTCHAR)
    8579 6C4C81     LPT #STR_minute
    857C 1B4402     JSR (KERN_PRINTSTR)
    857F 32C180     LDAA VAR_tmpMinutes
    8582 2D         CLX
    8583 2E         CLY
    8584 1B6002     JSR (KERN_PRINTDEZ)
    8587 10E388             JMP _RTS
                
                ;Get/decode hours
                ;---------------------------------------------------------
                getHours
    858A 7023               CMP #35
    858C 19B785             JPZ _gMet31 ;Last bit -> Check parity
    858F 701D               CMP #29
    8591 189785             JNZ _gMet30
    8594 2F0E80             STZA VAR_bitCache+1
                
                ;*** Get meteo 1/2 ***
    8597 32BF80 _gMet30     LDAA VAR_meteoCount1
    859A 701C               CMP #28
    859C 18AA85             JNZ _gHrs0 ;Previous meteo data not complete
    859F 1AB188             JSR getBitChar
    85A2 52C080             LDXA VAR_meteoCount2
    85A5 4310               STA (ZP_meteoWrite),X
    85A7 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (hours)
    85AA 1AA488 _gHrs0      JSR getBit
    85AD E20E80             ORAA VAR_bitCache+1
    85B0 DB                 SHR
    85B1 420E80             STAA VAR_bitCache+1
    85B4 10E388             JMP _RTS
                
                ;*** Get meteo 2/2 ***
    85B7 32C080 _gMet31     LDAA VAR_meteoCount2
    85BA 7038               CMP #56
    85BC 18CB85             JNZ parityHours ;Previous meteo data not complete
    85BF 20                 TAX
    85C0 3030               LDA #'0'
    85C2 4310               STA (ZP_meteoWrite),X ; 1. '0'
    85C4 7B                 INX
    85C5 4310               STA (ZP_meteoWrite),X ; 2. '0'
    85C7 7B                 INX
    85C8 55C080             STXA VAR_meteoCount2
                
                ;Last bit
                ;Check parity (hours)         
                parityHours       
    85CB BD0E80             SHRA VAR_bitCache+1
    85CE 1AA488             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    85D1 08                 PHA
                            ;Determine if bitcount of data is even or odd
    85D2 320E80             LDAA VAR_bitCache+1
    85D5 5006               LDX #6
    85D7 2E                 CLY
    85D8 1ABF88             JSR bitCnt
    85DB 17F885             JPC _pHrs0   
    85DE 0C                 PLA ;Bit count = "odd"
    85DF 18FC85             JNZ _pHrsOK
                
    85E2 300D   _pHrsBAD    LDA #00Dh ;Parity n.OK
    85E4 D21080             ANDA VAR_dataOK
    85E7 421080             STAA VAR_dataOK
                
                ; print hours parity failure            
    85EA 3020       LDA #' '
    85EC 1B4202     JSR (KERN_PRINTCHAR)
    85EF 6C2081     LPT #STR_hour_fail
    85F2 1B4402     JSR (KERN_PRINTSTR)
                
    85F5 10E388             JMP _RTS
                
    85F8 0C     _pHrs0      PLA ;Bit count = "even"
    85F9 18E285             JNZ _pHrsBAD
                
    85FC 320E80 _pHrsOK     LDAA VAR_bitCache+1
    85FF 1AD388             JSR bcdToDec
    8602 42C280             STAA VAR_tmpHours
    8605 3002               LDA #02h
    8607 E21080             ORAA VAR_dataOK
    860A 421080             STAA VAR_dataOK
                
                ; print hours
    860D 3020       LDA #' '
    860F 1B4202     JSR (KERN_PRINTCHAR)
    8612 6C5581     LPT #STR_hour
    8615 1B4402     JSR (KERN_PRINTSTR)
    8618 32C280     LDAA VAR_tmpHours
    861B 2D         CLX
    861C 2E         CLY
    861D 1B6002     JSR (KERN_PRINTDEZ)
    8620 10E388             JMP _RTS
                
                ;Get/decode day
                ;---------------------------------------------------------
                getDay  
    8623 7024               CMP #36 
    8625 182B86             JNZ _gMet40
    8628 2F0E80             STZA VAR_bitCache+1
                
                ;*** Get meteo 1/2 ***
    862B 32BF80 _gMet40     LDAA VAR_meteoCount1
    862E 701C               CMP #28
    8630 183E86             JNZ _gDay0 ;Previous meteo data not complete
    8633 1AB188             JSR getBitChar
    8636 52C080             LDXA VAR_meteoCount2
    8639 4310               STA (ZP_meteoWrite),X
    863B 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (day)      
    863E 1AA488 _gDay0      JSR getBit
    8641 E20E80             ORAA VAR_bitCache+1
    8644 DB                 SHR
    8645 420E80             STAA VAR_bitCache+1
                            ;Check for last bit
    8648 321180             LDAA VAR_second
    864B 7029               CMP #41       
    864D 18E388             JNZ _RTS 
                
                ;*** Get meteo 2/2 ***
    8650 32C080             LDAA VAR_meteoCount2
    8653 7040               CMP #64
    8655 186586             JNZ _gDay1 ;Previous meteo data not complete
    8658 20                 TAX
    8659 3030               LDA #'0'
    865B 4310               STA (ZP_meteoWrite),X ; 1. '0'
    865D 7B                 INX
    865E 4310               STA (ZP_meteoWrite),X ; 2. '0'
    8660 3047               LDA #71
    8662 42C080             STAA VAR_meteoCount2          
                
                ;Last bit
    8665 BD0E80 _gDay1      SHRA VAR_bitCache+1
                            ;Count high bits and add it to "VAR_dateParity"
    8668 320E80             LDAA VAR_bitCache+1
    866B 5006               LDX #6
    866D 2E                 CLY
    866E 1ABF88             JSR bitCnt
    8671 421880             STAA VAR_dateParity
                            ;Save day value
    8674 320E80             LDAA VAR_bitCache+1
    8677 1AD388             JSR bcdToDec
    867A 42C380             STAA VAR_tmpDay
                
                ; print day
    867D 3020       LDA #' '
    867F 1B4202     JSR (KERN_PRINTCHAR)
    8682 6C5C81     LPT #STR_day
    8685 1B4402     JSR (KERN_PRINTSTR)
    8688 32C380     LDAA VAR_tmpDay
    868B 2D         CLX
    868C 2E         CLY
    868D 1B6002     JSR (KERN_PRINTDEZ)
    8690 10E388             JMP _RTS        
                
                ;Get/decode weekday
                ;---------------------------------------------------------
                getWDay 
    8693 702A               CMP #42
    8695 189B86             JNZ _gMet50
    8698 2F0E80             STZA VAR_bitCache+1
                
                ;*** Get meteo 1/2 ***
    869B 32BF80 _gMet50     LDAA VAR_meteoCount1
    869E 701C               CMP #28
    86A0 18AE86             JNZ _getWDay0 ;Previous meteo data not complete
    86A3 1AB188             JSR getBitChar
    86A6 52C080             LDXA VAR_meteoCount2
    86A9 4310               STA (ZP_meteoWrite),X
    86AB 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (weekday)    
    86AE 1AA488 _getWDay0   JSR getBit
    86B1 E20E80             ORAA VAR_bitCache+1
    86B4 DB                 SHR
    86B5 420E80             STAA VAR_bitCache+1
                            ;Check for last bit
    86B8 321180             LDAA VAR_second
    86BB 702C               CMP #44       
    86BD 18E388             JNZ _RTS
                
                ;*** Get meteo 2/2 ***
    86C0 32C080             LDAA VAR_meteoCount2
    86C3 704A               CMP #74
    86C5 18CD86             JNZ _getWDay1 ;Previous meteo data not complete
    86C8 3042               LDA #66
    86CA 42C080             STAA VAR_meteoCount2
                
                ;Last bit
                            ;Shift data right by 4
    86CD 320E80 _getWDay1   LDAA VAR_bitCache+1
    86D0 B010               DIV #10h
    86D2 420E80             STAA VAR_bitCache+1
                
                            ;Count high bits and add it to "VAR_dateParity"
    86D5 5003               LDX #3
    86D7 591880             LDYA VAR_dateParity
    86DA 1ABF88             JSR bitCnt
    86DD 421880             STAA VAR_dateParity
                            ;Save weekday value
    86E0 320E80             LDAA VAR_bitCache+1
    86E3 1AD388             JSR bcdToDec
    86E6 42C480             STAA VAR_tmpWeekday
                
                ; print weekday
    86E9 3020       LDA #' '
    86EB 1B4202     JSR (KERN_PRINTCHAR)
    86EE 6C6281     LPT #STR_weekday
    86F1 1B4402     JSR (KERN_PRINTSTR)
    86F4 32C480     LDAA VAR_tmpWeekday
    86F7 2D         CLX
    86F8 2E         CLY
    86F9 1B6002     JSR (KERN_PRINTDEZ)
                
    86FC 10E388             JMP _RTS  
                
                ;Get/decode month
                ;---------------------------------------------------------
                getMonth    
    86FF 702D               CMP #45
    8701 180787             JNZ _gMet60
    8704 2F0E80             STZA VAR_bitCache+1
                
                ;*** Get meteo ***
    8707 32BF80 _gMet60     LDAA VAR_meteoCount1
    870A 701C               CMP #28
    870C 181A87             JNZ _gMon0 ;Previous meteo data not complete
    870F 1AB188             JSR getBitChar
    8712 52C080             LDXA VAR_meteoCount2
    8715 4310               STA (ZP_meteoWrite),X
    8717 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (month)
    871A 1AA488 _gMon0      JSR getBit
    871D E20E80             ORAA VAR_bitCache+1
    8720 DB                 SHR
    8721 420E80             STAA VAR_bitCache+1            
                            ;Check for last bit
    8724 321180             LDAA VAR_second
    8727 7031               CMP #49       
    8729 18E388             JNZ _RTS 
                
                ;*** Get meteo 2/2 ***
    872C 32C080             LDAA VAR_meteoCount2
    872F 7047               CMP #71
    8731 183987             JNZ _gMon1 ;Previous meteo data not complete
    8734 304A               LDA #74
    8736 42C080             STAA VAR_meteoCount2
                
                ;Last bit
                            ;Shift data right by 2
    8739 BD0E80 _gMon1      SHRA VAR_bitCache+1
    873C BD0E80             SHRA VAR_bitCache+1
                
                            ;Count high bits and add it to "VAR_dateParity"
    873F 320E80             LDAA VAR_bitCache+1
    8742 5005               LDX #5
    8744 591880             LDYA VAR_dateParity
    8747 1ABF88             JSR bitCnt
    874A 421880             STAA VAR_dateParity
                            ;Save month value
    874D 320E80             LDAA VAR_bitCache+1
    8750 1AD388             JSR bcdToDec
    8753 42C580             STAA VAR_tmpMonth
                
                ; print month
    8756 3020       LDA #' '
    8758 1B4202     JSR (KERN_PRINTCHAR)
    875B 6C6C81     LPT #STR_month
    875E 1B4402     JSR (KERN_PRINTSTR)
    8761 32C580     LDAA VAR_tmpMonth
    8764 2D         CLX
    8765 2E         CLY
    8766 1B6002     JSR (KERN_PRINTDEZ)
                
    8769 10E388             JMP _RTS 
                
                ;Get/decode year
                ;---------------------------------------------------------
                getYear     
    876C 703A               CMP #58
    876E 199B87             JPZ parityDate ;Last bit -> Check parity
    8771 7032               CMP #50
    8773 187987             JNZ _gMet70
    8776 2F0E80             STZA VAR_bitCache+1
                
                ;*** Get meteo ***
    8779 32BF80 _gMet70     LDAA VAR_meteoCount1
    877C 701C               CMP #28
    877E 188C87             JNZ _gYear0 ;Previous data not complete
    8781 1AB188             JSR getBitChar
    8784 52C080             LDXA VAR_meteoCount2
    8787 4310               STA (ZP_meteoWrite),X
    8789 7DC080             INCA VAR_meteoCount2
                
                ;Get bit (year)
    878C BD0E80 _gYear0     SHRA VAR_bitCache+1
    878F 1AA488             JSR getBit
    8792 E20E80             ORAA VAR_bitCache+1
    8795 420E80             STAA VAR_bitCache+1
    8798 10E388             JMP _RTS
                
                ;Last bit
                ;Check parity for whole date (Day, weekday, month, year)         
                parityDate
    879B 1AA488             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    879E 08                 PHA
                            ;Count high bits and add it to "VAR_dateParity"
                            ;Determine if bitcount of "VAR_dateParity" is even or odd
    879F 320E80             LDAA VAR_bitCache+1
    87A2 5008               LDX #8
    87A4 591880             LDYA VAR_dateParity
    87A7 1ABF88             JSR bitCnt
    87AA 17C787             JPC _pDat0
    87AD 0C                 PLA ;Bit count = "odd" 
    87AE 18CB87             JNZ _pDateOK
                
    87B1 300B   _pDateBAD   LDA #00Bh ;Partity n.OK
    87B3 D21080             ANDA VAR_dataOK
    87B6 421080             STAA VAR_dataOK
                
                ; print hours parity failure            
    87B9 3020       LDA #' '
    87BB 1B4202     JSR (KERN_PRINTCHAR)
    87BE 6C3281     LPT #STR_date_fail
    87C1 1B4402     JSR (KERN_PRINTSTR)
                
    87C4 10E388             JMP _RTS
                
    87C7 0C     _pDat0      PLA ;Bit count = "even"
    87C8 18B187             JNZ _pDateBAD
                
    87CB 320E80 _pDateOK    LDAA VAR_bitCache+1
    87CE 1AD388             JSR bcdToDec
    87D1 42C680             STAA VAR_tmpYear ;Save year value
    87D4 3004               LDA #04h
    87D6 E21080             ORAA VAR_dataOK
    87D9 421080             STAA VAR_dataOK
                
                ; print year
    87DC 3020       LDA #' '
    87DE 1B4202     JSR (KERN_PRINTCHAR)
    87E1 6C7481     LPT #STR_year
    87E4 1B4402     JSR (KERN_PRINTSTR)
    87E7 32C680     LDAA VAR_tmpYear
    87EA 2D         CLX
    87EB 2E         CLY
    87EC 1B6002     JSR (KERN_PRINTDEZ)
                
    87EF 10E388             JMP _RTS
                
                ;Decoding end
                ;---------------------------------------------------------
                
                ; print interference sign
    87F2 300D       LDA #13 ;\r
    87F4 1B4202     JSR (KERN_PRINTCHAR)
    87F7 6CDF80     LPT #STR_interference
    87FA 1B4402     JSR (KERN_PRINTSTR)
    87FD 1F                 RTS
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on Multi-I/O LEDs   
                ;---------------------------------------------------------
                syncDisp
                ;Display synced status           
    87FE 320B80             LDAA FLG_synced
    8801 190F88             JPZ _syncD0
    8804 3008               LDA #08h 
    8806 F2C780             EORA VAR_ledsDataOK
    8809 42C780             STAA VAR_ledsDataOK
    880C 106788             JMP _syncD4
    880F 3008   _syncD0     LDA #08h 
    8811 E2C780             ORAA VAR_ledsDataOK
    8814 42C780             STAA VAR_ledsDataOK
                
    8817 321180             LDAA VAR_second
    881A 7015               CMP #21
    881C 166788             JNC _syncD4 ;Second <21 -> No time information fetching
    881F 701D               CMP #29
    8821 163188             JNC _syncD1 ;Second >= 21 & <29 -> Fetching minutes
    8824 7024               CMP #36
    8826 164488             JNC _syncD2 ;Second >= 29 & < 36 -> Fetching hours
    8829 703B               CMP #59
    882B 165788             JNC _syncD3 ;Second >= 36 & < 59 -> Fetching date
    882E 106788             JMP _syncD4
                
                ;Fetching minutes
    8831 321080 _syncD1     LDAA VAR_dataOK
    8834 D001               AND #01h
    8836 186788             JNZ _syncD4
    8839 3001               LDA #01h 
    883B F2C780             EORA VAR_ledsDataOK
    883E 42C780             STAA VAR_ledsDataOK
    8841 106788             JMP _syncD4
                
                ;Fetching hours
    8844 321080 _syncD2     LDAA VAR_dataOK
    8847 D002               AND #02h
    8849 186788             JNZ _syncD4
    884C 3002               LDA #02h 
    884E F2C780             EORA VAR_ledsDataOK
    8851 42C780             STAA VAR_ledsDataOK
    8854 106788             JMP _syncD4
                
                ;Fetching date 
    8857 321080 _syncD3     LDAA VAR_dataOK
    885A D004               AND #04h
    885C 186788             JNZ _syncD4
    885F 3004               LDA #04h 
    8861 F2C780             EORA VAR_ledsDataOK
    8864 42C780             STAA VAR_ledsDataOK
                
    8867 321080 _syncD4     LDAA VAR_dataOK
    886A E2C780             ORAA VAR_ledsDataOK
    886D 1B0603             JSR (KERN_IOCHANGELED)
    8870 1F                 RTS
                
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on SCC-Board   
                ;---------------------------------------------------------
                sccBoard
                ;Receiver not synced (LED off)           
    8871 320B80             LDAA FLG_synced
    8874 198888             JPZ _sccB0
    8877 320030             LDAA HDW_SCC_BOARD
    887A D004               AND #04h
    887C 19E388             JPZ _RTS
    887F 320030             LDAA HDW_SCC_BOARD
    8882 F004               EOR #04h
    8884 420030             STAA HDW_SCC_BOARD
    8887 1F                 RTS
                
                ;Receiver synced but no data available (Toggle LED)
    8888 321080 _sccB0      LDAA VAR_dataOK
    888B D007               AND #07h
    888D 7007               CMP #07h
    888F 199B88             JPZ _sccB1
    8892 320030             LDAA HDW_SCC_BOARD
    8895 F004               EOR #04h
    8897 420030             STAA HDW_SCC_BOARD
    889A 1F                 RTS
                
                ;Receiver synced and data available (LED on)         
    889B 320030 _sccB1      LDAA HDW_SCC_BOARD
    889E E004               ORA #04h
    88A0 420030             STAA HDW_SCC_BOARD
    88A3 1F                 RTS     
                
                ;--------------------------------------------------------- 
                ;Helper functions   
                ;---------------------------------------------------------
                
                ;Get bit information from Time (Output: A = High(80h), Low(00h))        
                getBit      
    88A4 320D80             LDAA VAR_bitCache
    88A7 7005               CMP #PARAM_LOWHIGH
    88A9 16AF88             JNC _gBit0
                            ;Time >= PARAM_LOWHIGH -> Bit = 1
    88AC 3080               LDA #80h
    88AE 4D                 SKA
    88AF 2C     _gBit0      CLA ;Time < PARAM_LOWHIGH -> Bit = 0
    88B0 1F                 RTS
                
                ;Get bit information from Time as Char (Output: A = Char)        
                getBitChar      
    88B1 320D80             LDAA VAR_bitCache
    88B4 7005               CMP #PARAM_LOWHIGH
    88B6 16BC88             JNC _gBitC0
                            ;Time >= PARAM_LOWHIGH -> Bit = 1
    88B9 3031               LDA #'1'
    88BB 4E                 SKB
    88BC 3030   _gBitC0     LDA #'0' ;Time < PARAM_LOWHIGH -> Bit = 0
    88BE 1F                 RTS
                
                ;Count high bits
                ;Input: A = Byte, X = Number of bits, Y = Counter offset
                ;Output: A = Counter value, Carry = 0 -> odd, Carry = 1 -> even
                bitCnt
    88BF DB     _bCnt0      SHR
    88C0 16C488             JNC _bCnt1
    88C3 8B                 INY
    88C4 49BF88 _bCnt1      DXJP _bCnt0
    88C7 29                 SAY
    88C8 08                 PHA
    88C9 C002               MOD #2
    88CB 19D088             JPZ _bCnt2
    88CE 04                 CLC ;Counter value "odd"
    88CF 4D                 SKA
    88D0 05     _bCnt2      SEC ;Counter value "even"
    88D1 0C                 PLA
    88D2 1F                 RTS
                
                ;Convert BCD to decimal (Input: A = BCD value) (Output: A = decimal vlaue)      
                bcdToDec
    88D3 08                 PHA
    88D4 B010               DIV #10h
    88D6 A00A               MUL #00Ah
    88D8 420E80             STAA VAR_bitCache+1
    88DB 0C                 PLA
    88DC D00F               AND #00Fh
    88DE 04                 CLC
    88DF 820E80             ADCA VAR_bitCache+1
    88E2 1F                 RTS
                
                _RTS    
    88E3 04                 CLC
    88E4 1F                 RTS
                
                _failRTS
    88E5 2C                 CLA
    88E6 05                 SEC
    88E7 1F                 RTS
                
                


Segment Table:
**************
Segment Name                 Startaddr  Endaddr     Size  Type
=========================================================================
default                           8000     88E7      8E8  CODE  fixed
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

No errors found.
